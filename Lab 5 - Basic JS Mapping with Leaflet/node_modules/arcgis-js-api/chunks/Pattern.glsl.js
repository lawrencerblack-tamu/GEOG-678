/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../views/3d/webgl-engine/core/shaderLibrary/ForwardLinearDepth.glsl","../views/3d/webgl-engine/core/shaderLibrary/ShaderOutput","../views/3d/webgl-engine/core/shaderLibrary/Slice.glsl","../views/3d/webgl-engine/core/shaderLibrary/Transform.glsl","../views/3d/webgl-engine/core/shaderLibrary/attributes/ObjectAndLayerIdColor.glsl","../views/3d/webgl-engine/core/shaderLibrary/attributes/VertexColor.glsl","../views/3d/webgl-engine/core/shaderLibrary/output/OutputDepth.glsl","../views/3d/webgl-engine/core/shaderLibrary/output/OutputHighlight.glsl","../views/3d/webgl-engine/core/shaderLibrary/shading/MultipassTerrainTest.glsl","../views/3d/webgl-engine/core/shaderLibrary/shading/VisualVariables.glsl","../views/3d/webgl-engine/core/shaderLibrary/util/AlphaCutoff","../views/3d/webgl-engine/core/shaderLibrary/util/ColorConversion.glsl","../views/3d/webgl-engine/core/shaderLibrary/util/View.glsl","../views/3d/webgl-engine/core/shaderModules/Float4PassUniform","../views/3d/webgl-engine/core/shaderModules/FloatPassUniform","../views/3d/webgl-engine/core/shaderModules/interfaces","../views/3d/webgl-engine/core/shaderModules/ShaderBuilder","../views/3d/webgl-engine/lib/TransparencyPassType","../views/3d/webgl-engine/lib/VertexAttribute","../views/3d/webgl-engine/materials/PatternStyle"],(function(e,t,o,a,r,l,i,n,d,s,c,u,g,p,v,f,h,m,w,b,y){"use strict";const S=.70710678118,C=S,x=.08715574274;function P(e){const P=new m.ShaderBuilder,O=e.multipassEnabled&&(e.output===o.ShaderOutput.Color||e.output===o.ShaderOutput.Alpha),{vertex:V,fragment:A,attributes:R,varyings:D}=P;p.addProjViewLocalOrigin(V,e),P.include(r.Transform,e),P.include(i.VertexColor,e),P.include(c.VisualVariables,e),P.include(l.ObjectAndLayerIdColor,e),e.draped?V.uniforms.add(new f.FloatPassUniform("worldToScreenRatio",((e,t)=>1/t.screenToPCSRatio))):R.add(b.VertexAttribute.BOUNDINGRECT,"mat3"),R.add(b.VertexAttribute.POSITION,"vec3"),R.add(b.VertexAttribute.UVMAPSPACE,"vec4"),e.vvColor&&R.add(b.VertexAttribute.COLORFEATUREATTRIBUTE,"float"),D.add("vColor","vec4"),D.add("vpos","vec3"),D.add("vuv","vec2"),O&&D.add("depth","float"),V.uniforms.add(new v.Float4PassUniform("uColor",(e=>e.color)));const L=e.style===y.Style.ForwardDiagonal||e.style===y.Style.BackwardDiagonal||e.style===y.Style.DiagonalCross;L&&V.code.add(h.glsl`
      const mat2 rotate45 = mat2(${h.glsl.float(S)}, ${h.glsl.float(-C)},
                                 ${h.glsl.float(C)}, ${h.glsl.float(S)});
    `),e.draped||(p.addCameraPosition(V,e),V.uniforms.add(new f.FloatPassUniform("worldToScreenPerDistanceRatio",((e,t)=>1/t.camera.perScreenPixelRatio))),V.code.add(h.glsl`vec3 projectPointToLineSegment(vec3 center, vec3 halfVector, vec3 point) {
float projectedLength = dot(halfVector, point - center) / dot(halfVector, halfVector);
return center + halfVector * clamp(projectedLength, -1.0, 1.0);
}`),V.code.add(h.glsl`vec3 intersectRayPlane(vec3 rayDir, vec3 rayOrigin, vec3 planeNormal, vec3 planePoint) {
float d = dot(planeNormal, planePoint);
float t = (d - dot(planeNormal, rayOrigin)) / dot(planeNormal, rayDir);
return rayOrigin + t * rayDir;
}`),V.code.add(h.glsl`
      float boundingRectDistanceToCamera() {
        vec3 center = vec3(boundingRect[0][0], boundingRect[0][1], boundingRect[0][2]);
        vec3 halfU = vec3(boundingRect[1][0], boundingRect[1][1], boundingRect[1][2]);
        vec3 halfV = vec3(boundingRect[2][0], boundingRect[2][1], boundingRect[2][2]);
        vec3 n = normalize(cross(halfU, halfV));

        vec3 viewDir = - vec3(view[0][2], view[1][2], view[2][2]);

        float viewAngle = dot(viewDir, n);
        float minViewAngle = ${h.glsl.float(x)};

        if (abs(viewAngle) < minViewAngle) {
          // view direction is (almost) parallel to plane -> clamp it to min angle
          float normalComponent = sign(viewAngle) * minViewAngle - viewAngle;
          viewDir = normalize(viewDir + normalComponent * n);
        }

        // intersect view direction with infinite plane that contains bounding rect
        vec3 planeProjected = intersectRayPlane(viewDir, cameraPosition, n, center);

        // clip to bounds by projecting to u and v line segments individually
        vec3 uProjected = projectPointToLineSegment(center, halfU, planeProjected);
        vec3 vProjected = projectPointToLineSegment(center, halfV, planeProjected);

        // use to calculate the closest point to camera on bounding rect
        vec3 closestPoint = uProjected + vProjected - center;

        return length(closestPoint - cameraPosition);
      }
    `)),V.code.add(h.glsl`
    vec2 scaledUV() {
      vec2 uv = uvMapSpace.xy ${L?" * rotate45":""};
      vec2 uvCellOrigin = uvMapSpace.zw ${L?" * rotate45":""};

      ${e.draped?"":h.glsl`
            float distanceToCamera = boundingRectDistanceToCamera();
            float worldToScreenRatio = worldToScreenPerDistanceRatio / distanceToCamera;
          `}

      // Logarithmically discretize ratio to avoid jittering
      float step = 0.1;
      float discreteWorldToScreenRatio = log(worldToScreenRatio);
      discreteWorldToScreenRatio = ceil(discreteWorldToScreenRatio / step) * step;
      discreteWorldToScreenRatio = exp(discreteWorldToScreenRatio);

      vec2 uvOffset = mod(uvCellOrigin * discreteWorldToScreenRatio, ${h.glsl.float(e.patternSpacing)});
      return uvOffset + (uv * discreteWorldToScreenRatio);
    }
  `);const j=e.output===o.ShaderOutput.LinearDepth;return j&&(P.include(n.OutputDepth,e),t.addNearFar(P),t.addLinearDepth(P)),V.code.add(h.glsl`
    void main(void) {
      vuv = scaledUV();
      vpos = position;
      ${O?"depth = (view * vec4(vpos, 1.0)).z;":""}
      forwardNormalizedVertexColor();
      forwardObjectAndLayerIdColor();
      ${e.hasVertexColors?"vColor *= uColor;":e.vvColor?"vColor = uColor * interpolateVVColor(colorFeatureAttribute);":"vColor = uColor;"}
      gl_Position = ${j?h.glsl`transformPositionWithDepth(proj, view, vpos, nearFar, linearDepth);`:h.glsl`transformPosition(proj, view, vpos);`}
    }
  `),P.include(a.SliceDraw,e),A.include(g.ColorConversion),e.draped&&A.uniforms.add(new f.FloatPassUniform("texelSize",((e,t)=>1/t.camera.pixelRatio))),e.output===o.ShaderOutput.Highlight&&P.include(d.OutputHighlight,e),O&&P.include(s.multipassTerrainTest,e),e.output!==o.ShaderOutput.Highlight&&(A.code.add(h.glsl`
      const float lineWidth = ${h.glsl.float(e.lineWidth)};
      const float spacing = ${h.glsl.float(e.patternSpacing)};
      const float spacingINV = ${h.glsl.float(1/e.patternSpacing)};

      float coverage(float p, float txlSize) {
        p = mod(p, spacing);

        float halfTxlSize = txlSize / 2.0;

        float start = p - halfTxlSize;
        float end = p + halfTxlSize;

        float coverage = (ceil(end * spacingINV) - floor(start * spacingINV)) * lineWidth;
        coverage -= min(lineWidth, mod(start, spacing));
        coverage -= max(lineWidth - mod(end, spacing), 0.0);

        return coverage / txlSize;
      }
    `),e.draped||A.code.add(h.glsl`const int maxSamples = 5;
float sampleAA(float p) {
vec2 dxdy = abs(vec2(dFdx(p), dFdy(p)));
float fwidth = dxdy.x + dxdy.y;
ivec2 samples = 1 + ivec2(clamp(dxdy, 0.0, float(maxSamples - 1)));
vec2 invSamples = 1.0 / vec2(samples);
float accumulator = 0.0;
for (int j = 0; j < maxSamples; j++) {
if(j >= samples.y) {
break;
}
for (int i = 0; i < maxSamples; i++) {
if(i >= samples.x) {
break;
}
vec2 step = vec2(i,j) * invSamples - 0.5;
accumulator += coverage(p + step.x * dxdy.x + step.y * dxdy.y, fwidth);
}
}
accumulator /= float(samples.x * samples.y);
return accumulator;
}`)),A.code.add(h.glsl`
    void main() {
      discardBySlice(vpos);
      ${O?"terrainDepthTest(depth);":""}
      vec4 color = vColor;
      color = highlightSlice(color, vpos);

      ${e.output!==o.ShaderOutput.Highlight?h.glsl`color.a *= ${T(e)};`:""}

      ${e.output===o.ShaderOutput.ObjectAndLayerIdColor?h.glsl`color.a = 1.0;`:""}

      if (color.a < ${h.glsl.float(u.symbolAlphaCutoff)}) {
        discard;
      }

      ${e.output===o.ShaderOutput.Alpha?h.glsl`fragColor = vec4(color.a);`:""}

      ${e.output===o.ShaderOutput.Color?h.glsl`fragColor = color; ${e.transparencyPassType===w.TransparencyPassType.Color?"fragColor = premultiplyAlpha(fragColor);":""}`:""}
      ${e.output===o.ShaderOutput.Highlight?h.glsl`outputHighlight();`:""}
      ${e.output===o.ShaderOutput.LinearDepth?h.glsl`outputDepth(linearDepth);`:""};
      ${e.output===o.ShaderOutput.ObjectAndLayerIdColor?h.glsl`outputObjectAndLayerIdColor();`:""}
    }
  `),P}function T(e){function t(t){return e.draped?h.glsl`coverage(vuv.${t}, texelSize)`:h.glsl`sampleAA(vuv.${t})`}switch(e.style){case y.Style.ForwardDiagonal:case y.Style.Horizontal:return t("y");case y.Style.BackwardDiagonal:case y.Style.Vertical:return t("x");case y.Style.DiagonalCross:case y.Style.Cross:return h.glsl`
        1.0 - (1.0 - ${t("x")}) * (1.0 - ${t("y")})
      `;default:return"0.0"}}const O=Object.freeze(Object.defineProperty({__proto__:null,build:P},Symbol.toStringTag,{value:"Module"}));e.Pattern=O,e.build=P}));
