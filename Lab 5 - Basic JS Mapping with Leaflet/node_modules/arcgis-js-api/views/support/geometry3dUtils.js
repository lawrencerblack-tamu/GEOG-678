/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../core/mathUtils","../../core/libs/gl-matrix-2/math/vec2","../../core/libs/gl-matrix-2/factories/vec2f64","../../chunks/vec32","../../core/libs/gl-matrix-2/factories/vec3f64","../../core/libs/gl-matrix-2/math/common","../../geometry/support/plane","../3d/support/mathUtils","./geometry2dUtils"],(function(e,t,n,r,s,c,i,a,o,l){"use strict";function u({start:t,end:s,type:c},i,a){const o=[],l=n.subtract(Y,s,t),u=n.subtract(x,t,i),d=n.squaredLength(l),p=2*n.dot(l,u),L=p*p-4*d*(n.squaredLength(u)-a*a);if(0===L){const s=-p/(2*d);(c===e.VerticalPlaneType.PLANE||s>=0)&&o.push(n.scaleAndAdd(r.create(),t,l,s))}else if(L>0){const s=Math.sqrt(L),i=(-p+s)/(2*d);(c===e.VerticalPlaneType.PLANE||i>=0)&&o.push(n.scaleAndAdd(r.create(),t,l,i));const a=(-p-s)/(2*d);(c===e.VerticalPlaneType.PLANE||a>=0)&&o.push(n.scaleAndAdd(r.create(),t,l,a))}return o}function d(t,r){const a=t.start,o=t.end,u=n.subtract(Y,o,a),d=s.set(F,-u[1],u[0],0),p=r.start,L=r.end,f=s.sub(H,L,p),A=s.dot(f,d),y=s.set(D,a[0],a[1],0),P=s.sub(_,y,p),b=s.dot(P,d),T=i.getEpsilon();if(Math.abs(A)<T)return Math.abs(b),[];const h=b/A,E=s.scaleAndAdd(O,p,f,h);if(r.type===l.LineType.RAY){const e=s.sub(S,E,p);if(s.dot(e,f)<-T)return[]}if(t.type===e.VerticalPlaneType.HALF_PLANE){const e=n.sub(x,E,a);if(n.dot(e,u)<-T)return[]}return[c.clone(E)]}function p(e,t){return m(q(Z,t[2],e),t)}function L(e,t){const n=0;return V(q(Z,n,e),q(w,n,t)).map((([e,t])=>r.fromValues(e,t)))}function f(e,t){return b(e,q(Z,e[2],t))}function A(e,t){return T(q(Z,e[2],t),e)}function y(e,t,r){const s=n.subtract(Y,e,t),i=n.length(s),a=0===i?1:r/i,o=c.create();return n.scaleAndAdd(o,t,s,a),o[2]=e[2],o}function P(e,t,r){return n.distance(e,t)-r}function b(e,{start:t,end:n,type:r},i=c.create()){const a=s.sub(j,e,t),o=s.sub(F,n,t),u=s.dot(a,o)/s.dot(o,o);return s.scaleAndAdd(i,t,o,r===l.LineType.RAY?Math.max(u,0):u)}function T({start:e,end:t,type:n},r){const c=s.sub(j,r,e),a=s.sub(F,t,e);if(n===l.LineType.RAY&&s.dot(a,c)<-i.getEpsilon())return s.distance(e,r);const o=s.cross(H,a,c);return s.len(o)/s.len(a)}const h=(()=>{const e=c.create(),t=c.create(),i=c.create();return({start:u,end:d},{center:p,radius:L,normal:f,slicePlane:A})=>{const y=a.fromPositionAndNormal(p,f,U);if(C(a.distance(y,u),0)&&C(a.distance(y,d),0)){o.tangentFrame(f,e,t);const a=(r,c)=>(s.subtract(i,c,p),n.set(r,s.dot(i,e),s.dot(i,t)),r),y=l.intersectLineLikeAndCircle({start:a(Y,u),end:a(x,d),type:l.LineType.LINE},r.ZEROS,L),P=[];for(const[n,r]of y){const i=s.copy(c.create(),p);s.scaleAndAdd(i,i,e,n),s.scaleAndAdd(i,i,t,r),A&&!v(A,i)||P.push(i)}return P}const P=c.create();return a.intersectLine(y,u,d,P)?!C(s.distance(P,p),L)||A&&!v(A,P)?[]:[P]:[]}})();function E({start:e,end:t,type:r},i,a){const o=[],u=s.subtract(j,t,e),d=n.subtract(x,e,i),p=n.squaredLength(u),L=2*n.dot(u,d),f=L*L-4*p*(n.squaredLength(d)-a*a);if(0===f){const t=-L/(2*p);(r===l.LineType.LINE||t>=0)&&o.push(s.scaleAndAdd(c.create(),e,u,t))}else if(f>0){const t=Math.sqrt(f),n=(-L+t)/(2*p);(r===l.LineType.LINE||n>=0)&&o.push(s.scaleAndAdd(c.create(),e,u,n));const i=(-L-t)/(2*p);(r===l.LineType.LINE||i>=0)&&o.push(s.scaleAndAdd(c.create(),e,u,i))}return o}function V(e,t){const n=e.start,r=e.end,a=t.start,o=t.end,u=s.sub(j,r,n),d=s.sub(F,o,a),p=s.sub(H,a,n),L=s.cross(D,u,d);if(!C(s.dot(p,L),0))return[];const f=s.sqrLen(L);if(C(f,0))return[];const A=s.cross(_,p,d),y=s.dot(A,L)/f,P=s.scaleAndAdd(O,n,u,y);if(e.type===l.LineType.RAY){const e=s.sub(S,P,n);if(s.dot(u,e)<-i.getEpsilon())return[]}if(t.type===l.LineType.RAY){const e=s.sub(S,P,a);if(s.dot(d,e)<-i.getEpsilon())return[]}return[c.clone(P)]}function m({start:e,end:t,type:n},r){const a=s.sub(j,r,e),o=s.sub(F,t,e),u=s.cross(H,o,a),d=s.sqrLen(u)/s.sqrLen(o),p=i.getEpsilon();if(d<p)switch(n){case l.LineType.LINE:return[c.clone(r)];case l.LineType.RAY:return s.dot(o,a)<-p?[]:[c.clone(r)]}return[]}function g(e,t,r){return C(n.squaredDistance(r,e),t*t)?[c.clone(r)]:[]}function N(e,t,s,c){const[i,a]=e,[o,l]=s,u=o-i,d=l-a,p=u*u+d*d,L=Math.sqrt(p);if(L>t+c)return[];if(L<Math.abs(t-c))return[];if(C(L,0)&&C(t,c))return[];const f=(t*t-c*c+p)/(2*L),A=Math.sqrt(t*t-f*f),y=A*d/L,P=A*u/L,[b,T]=n.lerp(Y,e,s,f/L);return C(y,P)?[r.fromValues(b,T)]:[r.fromValues(b+y,T-P),r.fromValues(b-y,T+P)]}function q(e,t,{start:n,end:r,type:c}){return s.set(e.start,n[0],n[1],t),s.set(e.end,r[0],r[1],t),e.type=R[c],e}function I(e,t){return C(e[2],t[2])}function C(e,n){return t.floatEqualAbsolute(Math.abs(e-n),0,i.getEpsilon())}function M(e,t){return t.filter((t=>v(e,t)))}function v(e,t){return a.isPointInside(e,t)}var k;e.VerticalPlaneType=void 0,(k=e.VerticalPlaneType||(e.VerticalPlaneType={}))[k.PLANE=0]="PLANE",k[k.HALF_PLANE=1]="HALF_PLANE";const R={[e.VerticalPlaneType.PLANE]:l.LineType.LINE,[e.VerticalPlaneType.HALF_PLANE]:l.LineType.RAY},Y=r.create(),x=r.create(),j=c.create(),F=c.create(),H=c.create(),D=c.create(),_=c.create(),O=c.create(),S=c.create(),U=a.create(),Z={start:c.create(),end:c.create(),type:l.LineType.LINE},w={start:c.create(),end:c.create(),type:l.LineType.LINE};Object.defineProperty(e,"LineType",{enumerable:!0,get:()=>l.LineType}),e.intersectLineAndPoint=m,e.intersectLineLikeAndCircle=h,e.intersectLineLikeAndVerticalCylinder=E,e.intersectLineLikes=V,e.intersectVerticalCylinderAndPoint=g,e.intersectVerticalCylinders=N,e.intersectVerticalPlaneAndLineLike=d,e.intersectVerticalPlaneAndPoint=p,e.intersectVerticalPlaneAndVerticalCylinder=u,e.intersectVerticalPlanes=L,e.isClose=C,e.isPointInsidePlane=v,e.pointToLineLikeDistance=T,e.pointToVerticalCylinderDistance=P,e.pointToVerticalPlaneDistance=A,e.pointsInsidePlane=M,e.projectPointToLineLike=b,e.projectPointToVerticalCylinder=y,e.projectPointToVerticalPlane=f,e.vectorsHaveCloseZ=I,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
