/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../core/Cyclical","../../../core/quantityUtils","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../support/elevationInfoUtils","../sketch/normalizedPoint","./SnappingAlgorithm","./snappingUtils","./candidates/LineSnappingCandidate","../support/viewUtils","../../support/angularMeasurementUtils","../../support/geodesicLengthMeasurementUtils","../../support/geometry3dUtils","../../support/geometry2dUtils"],(function(e,t,i,n,o,r,s,a,c,d,l,p,g,h){"use strict";class u extends s.SnappingAlgorithm{snapNewVertex(e,t){const i=t.editGeometryOperations.data.components[0],n=i.edges.length,r=[];if(n<1)return r;const{spatialReference:s}=t,c=d.vectorToScreenPoint(e,s,o.absoluteHeightElevationInfo,this.view),{view:l}=this,p=i.edges[n-1];let g=p;do{if(this.edgeExceedsShortLineThreshold(g,t)){const i=a.editEdgeToSnappingEdge(g,l,t);this._processCandidateProposal(i.left,i.right,e,c,t,r)}g=g.leftVertex.leftEdge}while(g&&g!==p);return r}snapExistingVertex(e,t){const i=[],n=t.vertexHandle,s=n.component;if(s.edges.length<2)return i;const{view:c}=this,{spatialReference:l}=t,p=d.vectorToScreenPoint(e,l,o.absoluteHeightElevationInfo,c),g=n.leftEdge,h=n.rightEdge;g&&h&&this.edgeExceedsShortLineThreshold(g,t)&&this.edgeExceedsShortLineThreshold(h,t)&&this._processCandidateProposal(r.fromAnyMapPoint(g.leftVertex.pos,c,t),r.fromAnyMapPoint(h.rightVertex.pos,c,t),e,p,t,i);const u=s.edges[0];let f=u;do{if(f!==n.leftEdge&&f!==n.rightEdge&&this.edgeExceedsShortLineThreshold(f,t)){const n=a.editEdgeToSnappingEdge(f,c,t);this._processCandidateProposal(n.left,n.right,e,p,t,i)}f=f.rightVertex.rightEdge}while(f&&f!==u);return i}_processCandidateProposal(e,t,i,s,l,p){const{spatialReference:g,pointer:h}=l,u=n.create();this._projectedLine(u,e,t,i,l);const f=r.fromVec3(u);a.squaredScreenDistance(s,d.vectorToScreenPoint(f,g,o.absoluteHeightElevationInfo,this.view))<this.squaredProximityThreshold(h)&&p.push(new c.LineSnappingCandidate({lineStart:e,lineEnd:t,targetPoint:f,isDraped:"on-the-ground"===l.elevationInfo?.mode}))}_projectedLine(e,t,i,n,o){this._projectToLineGeodesic(e,t,i,n,o)||this._projectToLinePlanar(e,n,t,i)}_projectToLineGeodesic(e,n,o,r,{spatialReference:s}){const a=l.radiansGeographicBetweenVec(n,o,s,s);if(null==a)return!1;const c=l.radiansGeographicBetweenVec(o,r,s,s);if(null==c)return!1;const d=p.geodesicDistance(o,r,s);if(null==d)return!1;const g=Math.abs(t.cyclicalPI.shortestSignedDiff(a,c))>Math.PI/2?t.cyclical2PI.normalize(a+Math.PI):a;return l.pointFromDistanceAlongAzimuth(e,o,s,i.valueInUnit(d,"meters"),i.createAngle(g,"radians","geographic"),"geodesic"),e[2]=r[2],!0}_projectToLinePlanar(e,t,i,n){g.projectPointToLineLike(t,{start:i,end:n,type:h.LineType.LINE},e),e[2]=t[2]}}e.LineSnapper=u,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
