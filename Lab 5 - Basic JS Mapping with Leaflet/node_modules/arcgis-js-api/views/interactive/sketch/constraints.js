/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../core/arrayUtils","../../../core/mathUtils","../../../core/libs/gl-matrix-2/math/vec2","../../../core/libs/gl-matrix-2/factories/vec2f64","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../chunks/vec42","../../../core/libs/gl-matrix-2/factories/vec4f64","../../../geometry/support/geodesicConstants","../../../geometry/support/geodesicUtils","../../../geometry/support/plane","../../../chunks/sphere","../../3d/support/mathUtils","./normalizedPoint","../../support/geometry3dUtils","../../support/geometry2dUtils"],(function(e,t,n,r,s,i,c,o,a,l,u,d,f,h,p,P,V){"use strict";class m{intersect(e){return F(this,e)}closestPoints(e){return[this.closestTo(e)]}}class L extends m{constructor(e){super(),this.point=e}equals(e){return this===e||ge(e)&&i.exactEquals(this.point,e.point)}closestTo(){return p.clone(this.point)}}class g extends m{constructor(e,t,n){super(),this.start=e,this.end=t,this.lineLike={start:e,end:t,type:n}}equals(e){return this===e||Ce(e)&&this.lineLike.type===e.lineLike.type&&i.exactEquals(this.start,e.start)&&i.exactEquals(this.end,e.end)}closestTo(e){const t=P.projectPointToLineLike(e,this.lineLike);return p.fromVec3(t)}}class C extends g{constructor(e,t){super(e,t,V.LineType.LINE)}}class y extends g{constructor(e,t){super(e,t,V.LineType.RAY)}}class k extends m{constructor(e){super(),this.constraints=e}equals(e){return this===e||Le(e)&&t.equals(this.constraints,e.constraints,((e,t)=>e.equals(t)))}closestTo(e){let t,n=1/0;for(const r of this.constraints){const s=r.closestTo(e),c=i.squaredDistance(e,s);c<n&&(n=c,t=s)}return t?p.clone(t):e}closestPoints(e){return this.constraints.flatMap((t=>t===this?[]:t.closestPoints(e)))}}class A extends m{constructor(e,t){super(),this.center=e,this.radius=t}equals(e){return this===e||Ae(e)&&this.center[0]===e.center[0]&&this.center[1]===e.center[1]&&this.radius===e.radius}closestTo(e){const t=P.projectPointToVerticalCylinder(e,this.center,this.radius);return p.fromVec3(t)}}class v extends m{constructor(e,t){super(),this.center=e,this.radius=t}equals(e){return this===e||ve(e)&&i.exactEquals(this.center,e.center)&&this.radius===e.radius}closestTo(e){const t=P.projectPointToVerticalCylinder(e,this.center,this.radius);return t[2]=this.center[2],p.fromVec3(t)}asCircle(){return new q(p.clone(this.center),this.radius,p.fromValues(0,0,1))}}class q extends m{constructor(e,t,n,r=void 0){super(),this.center=e,this.radius=t,this.normal=n,this.slicePlane=r}equals(e){return this===e||qe(e)&&i.exactEquals(this.center,e.center)&&i.exactEquals(this.normal,e.normal)&&this.radius===e.radius}closestTo(e){const{center:t,radius:n}=this;d.projectPoint(this.getPlane(T),e,x);const r=i.sub(x,x,t),s=i.squaredLength(r);if(P.isClose(s,0))return p.clone(e);const o=n/Math.sqrt(s),a=i.scaleAndAdd(c.create(),t,r,o),{slicePlane:l}=this;if(l&&!P.isPointInsidePlane(l,a)){const t=K(l,this);return t?.closestTo(e)??p.clone(e)}return p.fromVec3(a)}getPlane(e=d.create()){return d.fromPositionAndNormal(this.center,this.normal,e)}}const x=c.create(),T=d.create();class _ extends m{constructor(e){super(),this.z=e}equals(e){return this===e||ye(e)&&this.z===e.z}closestTo(e){return p.fromVec3(c.fromValues(e[0],e[1],this.z))}getPlane(e=d.create()){return i.set(M,0,0,this.z),d.fromPositionAndNormal(M,c.UNIT_Z,e)}}const M=c.create();class E extends m{constructor(e,t,n){super(),this.start=e,this.end=t,this.planeLike={start:p.asVec2(e),end:p.asVec2(t),type:n}}equals(e){return this===e||ke(e)&&this.planeLike.type===e.planeLike.type&&i.exactEquals(this.start,e.start)&&i.exactEquals(this.end,e.end)}closestTo(e){return p.fromVec3(P.projectPointToVerticalPlane(e,this.planeLike))}closestEndTo(e){const{start:t,end:n}=this.planeLike;return Math.sign(r.dot(r.subtract(z,n,t),r.subtract(w,p.asVec2(e),t)))>0?this.end:this.start}getPlane(e=d.create()){const t=i.copy(S,this.end);return t[2]+=1,d.fromPoints(this.start,this.end,t,e)}getSlicePlane(e=d.create()){const{start:t,end:n,type:r}=this.planeLike;if(r===P.VerticalPlaneType.PLANE)return;const s=i.set(S,t[0],t[1],0),c=i.set(I,n[0],n[1],0),o=i.subtract(I,c,s);return d.fromPositionAndNormal(s,o,e),e}}const z=s.create(),w=s.create(),S=c.create(),I=c.create();class b extends E{constructor(e,t){super(e,t,P.VerticalPlaneType.HALF_PLANE)}}class D extends E{constructor(e,t){super(e,t,P.VerticalPlaneType.PLANE)}}class N extends m{constructor(e,t){super(),this.sphere=f.fromCenterAndRadius(e,t)}equals(e){return this===e||xe(e)&&f.exactEquals(this.sphere,e.sphere)}closestTo(e){const t=f.projectPoint(this.sphere,e,c.create());return p.fromVec3(t)}get center(){return f.getCenter(this.sphere)}get radius(){return this.sphere[3]}}class G extends m{constructor(e,t,n){super(),this.start=e,this.end=t,this.getZ=n,this.planeLike={start:p.asVec2(e),end:p.asVec2(t),type:P.VerticalPlaneType.PLANE}}equals(e){return this===e||Te(e)&&i.exactEquals(this.start,e.start)&&i.exactEquals(this.end,e.end)&&this.getZ===e.getZ}closestTo(e){return O(this,e)}addIfOnTheGround(e,t){for(const n of t){const t=this.getZ(n[0],n[1])??0;P.isClose(n[2],t)&&(n[2]=t,e.push(n))}}}class R extends m{constructor(e,t,n,r,s){super(),this._origin=e,this._spatialReference=t,this._distanceMeters=n,this._elevationMeters=r,this._directionDegrees=s}equals(e){return this===e||_e(e)&&r.exactEquals(this._origin,e._origin)&&this._distanceMeters===e._distanceMeters&&this._elevationMeters===e._elevationMeters&&this._directionDegrees===e._directionDegrees}closestTo([e,t,n]){if(r.set(j,e,t),null!=this._directionDegrees&&null!=this._distanceMeters)u.directGeodeticSolver(j,this._origin,this._directionDegrees,this._distanceMeters,this._spatialReference);else if(null!=this._directionDegrees)U(j,this._origin,this._directionDegrees,j,this._spatialReference);else if(null!=this._distanceMeters){const{azimuth:e}=u.inverseGeodeticSolver(Z,this._origin,j,this._spatialReference);u.directGeodeticSolver(j,this._origin,e??0,this._distanceMeters,this._spatialReference)}return p.create(j[0],j[1],this._elevationMeters??n)}}const j=[0,0],Z=new u.InverseGeodeticSolverResult;function U(e,t,n,r,s){let{azimuth:i,distance:c}=u.inverseGeodeticSolver(H,t,r,s);i??=0;let o=c*Math.cos((i-n)*l.toRadians);o=Math.max(0,o),u.directGeodeticSolver(e,t,n,o,s)}const H=new u.InverseGeodeticSolverResult;function O(e,t){const n=P.projectPointToVerticalPlane(t,e.planeLike);return n[2]=e.getZ(n[0],n[1])??Me,p.fromVec3(n)}function F(e,t){if(Le(e)){const n=[];for(const r of e.constraints){const e=r.intersect(t);e&&n.push(e)}return me(n)}if(Le(t))return F(t,e);if(Te(e))return he(e,t);if(Te(t))return he(t,e);if(ge(e)){const{point:n}=e;if(ge(t))return i.exactEquals(n,t.point)?e:void 0;const r=t.closestTo(n);return i.equals(r,n)?e:void 0}if(Ce(e)){if(ge(t))return F(t,e);if(Ce(t))return Pe(P.intersectLineLikes(e.lineLike,t.lineLike));if(ye(t))return Y(e,t);if(ke(t))return Pe(P.intersectVerticalPlaneAndLineLike(t.planeLike,e.lineLike));if(Ae(t))return Pe(P.intersectLineLikeAndVerticalCylinder(e.lineLike,t.center,t.radius));if(qe(t))return Pe(P.intersectLineLikeAndCircle(e.lineLike,t));if(ve(t))return B(e,t);if(xe(t))return J(e,t)}else if(ye(e)){if(ge(t)||Ce(t))return F(t,e);if(ye(t))return Q(e,t);if(ke(t))return W(e,t);if(Ae(t))return X(e,t);if(qe(t))return ee(e,t);if(ve(t))return $(e,t);if(xe(t))return te(e,t)}else if(ke(e)){if(ge(t)||Ce(t)||ye(t))return F(t,e);if(ke(t))return pe(P.intersectVerticalPlanes(e.planeLike,t.planeLike));if(Ae(t))return pe(P.intersectVerticalPlaneAndVerticalCylinder(e.planeLike,t.center,t.radius));if(qe(t))return re(e,t);if(ve(t))return ne(e,t);if(xe(t))return se(e,t)}else if(Ae(e)){if(ge(t)||Ce(t)||ye(t)||ke(t))return F(t,e);if(Ae(t))return pe(P.intersectVerticalCylinders(p.asVec2(e.center),e.radius,p.asVec2(t.center),t.radius));if(qe(t))return ie();if(ve(t))return ce(e,t);if(xe(t))return oe()}else if(qe(e)){if(ge(t)||Ce(t)||ye(t)||ke(t)||Ae(t))return F(t,e);if(qe(t))return ae();if(ve(t))return ae(t.asCircle());if(xe(t))return le()}else if(ve(e)){if(ge(t)||Ce(t)||ye(t)||ke(t)||Ae(t)||qe(t))return F(t,e);if(ve(t))return ue(t,e);if(xe(t))return de()}else if(xe(e)){if(ge(t)||Ce(t)||ye(t)||ke(t)||Ae(t)||ve(t))return F(t,e);if(xe(t))return fe()}}const Y=(()=>{const e=d.create();return(t,n)=>{const{start:r,end:s}=t;if(P.vectorsHaveCloseZ(r,s)&&P.isClose(r[2],n.z))return t;const i=c.create();return d.intersectLine(n.getPlane(e),r,s,i)?new L(p.fromVec3(i)):void 0}})();function B({lineLike:e},{center:t,radius:n}){const r=t[2];return Pe(P.intersectLineLikeAndVerticalCylinder(e,t,n).filter((e=>P.isClose(e[2],r))))}function J({lineLike:e},{sphere:t}){return Pe(f.intersectLine(t,e.start,e.end))}const K=(()=>{const e=a.create(),t=c.create(),r=c.create();return(s,a,l)=>{const{normal:u,center:f,radius:V}=a;h.tangentFrame(u,t,r);const m=d.getNormal(s),g=V*i.dot(m,t),C=V*i.dot(m,r);o.set(e,f[0],f[1],f[2],1);const y=o.dot(s,e),k=Math.hypot(g,C),A=P.isClose(k,0);if(P.isClose(d.distance(s,f),0)){if(A)return a;if(P.isClose(V,0))return!l||P.isPointInsidePlane(l,f)?new L(p.clone(f)):void 0;i.cross(t,m,u),i.normalize(t,t);const e=new Array,n=c.clone(f);i.scaleAndAdd(n,n,t,V),l&&!P.isPointInsidePlane(l,n)||e.push(n);const r=c.clone(f);return i.scaleAndAdd(r,r,t,-V),l&&!P.isPointInsidePlane(l,r)||e.push(r),Pe(e)}if(A)return;const v=-y/k;if(Math.abs(v)>1||P.isClose(v,1))return;const q=Math.atan(g/C),x=n.asinClamped(v)-q,T=Math.PI-x,_=new Array,M=c.create();i.scaleAndAdd(M,f,t,V*Math.cos(x)),i.scaleAndAdd(M,M,r,V*Math.sin(x)),_.push(M);const E=c.create();return i.scaleAndAdd(E,f,t,V*Math.cos(T)),i.scaleAndAdd(E,E,r,V*Math.sin(T)),_.push(E),Pe(l?P.pointsInsidePlane(l,_):_)}})();function Q(e,t){return P.isClose(e.z,t.z)?e:void 0}function W({z:e},{planeLike:t}){const[n,r]=t.start,[s,i]=t.end,c=p.fromValues(n,r,e),o=p.fromValues(s,i,e);return t.type===P.VerticalPlaneType.PLANE?new C(c,o):new y(c,o)}function X(e,t){const[n,r]=t.center;return new v(p.fromValues(n,r,e.z),t.radius)}function $(e,t){return P.isClose(t.center[2],e.z)?t:void 0}const ee=(()=>{const e=d.create();return(t,n)=>K(t.getPlane(e),n,n.slicePlane)})();function te(e,{center:t,radius:n}){const r=Math.abs(t[2]-e.z);if(r>n&&!P.isClose(r,n))return;const s=p.fromValues(t[0],t[1],e.z),i=Math.sqrt(n**2-r**2);return P.isClose(i,0)?void 0:new v(s,i)}const ne=(()=>{const e=d.create();return(t,{center:n,radius:r})=>{const s=P.intersectVerticalPlaneAndVerticalCylinder(t.planeLike,n,r),i=n[2];t.getSlicePlane(e);const c=new Array;for(const[o,a]of s){const t=[o,a,i];P.isPointInsidePlane(e,t)&&c.push(t)}return Pe(c)}})(),re=(()=>{const e=d.create(),t=d.create();return(n,r)=>K(n.getPlane(e),r,n.getSlicePlane(t))})(),se=(()=>{const e=d.create();return(t,{center:n,radius:r})=>{const s=t.getPlane(e),o=d.signedDistance(s,n),a=Math.abs(o);if(a>r&&!P.isClose(a,r))return;const l=c.clone(d.getNormal(s)),u=i.scaleAndAdd(c.create(),n,l,o),f=Math.sqrt(r**2-o**2);return P.isClose(f,0)?new L(p.fromVec3(d.projectPoint(s,n,c.create()))):new q(p.fromVec3(u),f,l,t.getSlicePlane())}})();function ie(e,t){}function ce(e,t){const n=r.squaredDistance(p.asVec2(e.center),p.asVec2(t.center));if(P.isClose(n,0)&&P.isClose(e.radius,t.radius))return t;return Ve(P.intersectVerticalCylinders(p.asVec2(e.center),e.radius,p.asVec2(t.center),t.radius),t.center[2])}function oe(e,t){}function ae(e,t){}function le(e,t){}function ue(e,t){if(!P.vectorsHaveCloseZ(e.center,t.center))return;const n=r.squaredDistance(p.asVec2(e.center),p.asVec2(t.center));if(P.isClose(n,0)&&P.isClose(e.radius,t.radius))return e;return Ve(P.intersectVerticalCylinders(p.asVec2(e.center),e.radius,p.asVec2(t.center),t.radius),e.center[2])}function de(e,t){}function fe(e,t){}function he(e,t){const{planeLike:n,getZ:r}=e,s=new Array;if(ge(t))e.addIfOnTheGround(s,P.intersectVerticalPlaneAndPoint(n,t.point));else if(Ce(t))e.addIfOnTheGround(s,P.intersectVerticalPlaneAndLineLike(n,t.lineLike));else if(Ae(t))for(const[i,o]of P.intersectVerticalPlaneAndVerticalCylinder(n,t.center,t.radius)){const e=r(i,o);null!=e&&s.push(c.fromValues(i,o,e))}else if(ke(t)||Te(t))for(const[i,o]of P.intersectVerticalPlanes(n,t.planeLike)){const e=r(i,o)??Me;s.push(c.fromValues(i,o,e))}return Pe(s)}function pe(e){return me(e.map((([e,t])=>{const n=p.fromValues(e,t,0),r=p.fromValues(e,t,1);return new C(n,r)})))}function Pe(e){return me(e.map((e=>e?new L(p.fromVec3(e)):void 0)))}function Ve(e,t){return Pe(e.map((([e,n])=>[e,n,t])))}function me(e){if(0!==e.length)return 1===e.length?e[0]??void 0:new k(e.filter(t.isSome))}function Le(e){return e instanceof k}function ge(e){return e instanceof L}function Ce(e){return e instanceof g}function ye(e){return e instanceof _}function ke(e){return e instanceof E}function Ae(e){return e instanceof A}function ve(e){return e instanceof v}function qe(e){return e instanceof q}function xe(e){return e instanceof N}function Te(e){return e instanceof G}function _e(e){return e instanceof R}const Me=0;e.CircleConstraint=q,e.Constraint=m,e.DrapedLineConstraint=G,e.GeodesicConstraint=R,e.HorizontalCircleConstraint=v,e.HorizontalPlaneConstraint=_,e.LineConstraint=C,e.LineLikeConstraint=g,e.PointConstraint=L,e.RayConstraint=y,e.SetConstraint=k,e.SphereConstraint=N,e.VerticalCylinderConstraint=A,e.VerticalHalfPlaneConstraint=b,e.VerticalPlaneConstraint=D,e.VerticalPlaneLikeConstraint=E,e.constraintOrSet=me,e.isPoint=ge,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
