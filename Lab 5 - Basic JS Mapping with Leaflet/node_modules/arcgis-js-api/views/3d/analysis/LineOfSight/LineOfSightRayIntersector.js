/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/tslib.es6","../../../../geometry","../../../../core/Accessor","../../../../core/screenUtils","../../../../core/accessorSupport/decorators/property","../../../../core/has","../../../../core/Logger","../../../../core/RandomLCG","../../../../core/accessorSupport/decorators/subclass","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../geometry/support/ray","../../../../geometry/support/vectorStacks","../../../../layers/graphics/dehydratedFeatures","./LineOfSightIntersectionResult","../../layers/i3s/Intersector","../../support/geometryUtils/ray","../../terrain/Intersector","../../webgl-engine/lib/Intersector","../../webgl-engine/lib/IntersectorInterfaces","../../webgl-engine/lib/intersectorUtilsConversions","../../../../geometry/Point"],(function(e,t,r,n,i,s,o,c,a,l,p,u,d,y,g,h,I,f,m,R,w,v,S){"use strict";e.LineOfSightRayIntersector=class extends n{constructor(e){super(e),this._terrainIntersectionOptionsLayerUids=new Set(["terrain"])}initialize(){this.intersector=R.newIntersector(this.view.state.viewingMode),this.intersector.options.hud=!1,this.intersector.options.store=w.StoreResults.MIN}getScreenPointIntersection(e){const t=i.screenPointObjectToArray(e,y.sv2d.get()),r=f.fromScreen(this.view.state.camera,t,T);return this._getRayIntersection(r)}_getRayIntersection(e,t){if(null==e||null==this.view.sceneIntersectionHelper)return null;const{intersector:r}=this;r.options.store=w.StoreResults.MIN,this.view.sceneIntersectionHelper.intersectToolIntersectorRay(e,r,t);const n=r.results.min,i=u.create();if(!n.getIntersectionPoint(i))return null;if(null!=t?.maxDistance&&p.squaredDistance(i,e.origin)>t.maxDistance**2)return null;const s=this.view.renderCoordsHelper.fromRenderCoords(i,new S({spatialReference:this.view.spatialReference})),o=u.clone(n.normal);if(I.isI3sIntersectorResult(n))return new h.LineOfSightIntersectionResult({type:w.IntersectorType.OBJECT,id:`${n.target.layerUid}/${n.target.nodeIndex}/${n.target.componentIndex}`,mapPoint:s,renderPoint:i,normal:o,ray:d.copy(e),graphic:null});if(I.isTiles3DIntersectorResult(n))return new h.LineOfSightIntersectionResult({type:w.IntersectorType.OBJECT,id:`${n.target.layerUid}/${n.target.graphicUid}`,mapPoint:s,renderPoint:i,normal:o,ray:d.copy(e),graphic:null});if(m.isTerrainIntersectorResult(n))return new h.LineOfSightIntersectionResult({type:w.IntersectorType.TERRAIN,id:n.target.lij.slice(),mapPoint:s,renderPoint:i,normal:o,ray:d.copy(e),graphic:null});const c=v.toGraphic(n,this.view);if(null!=c){const t=c.layer,r=c.sourceLayer;let n;if(r)if("scene"===r.type)n=g.getObjectId(c,r.objectIdField);else n=c.uid;else n=c.uid;return new h.LineOfSightIntersectionResult({type:w.IntersectorType.OBJECT,id:`${t?.uid}/${n}`,mapPoint:s,renderPoint:i,normal:o,ray:d.copy(e),graphic:c})}return null}updateFromGroundIntersection(e,t,r){const n=O,i=b,s=L,o=P;p.copy(i,e),this.view.renderCoordsHelper.worldUpAtPosition(i,s),p.normalize(s,s);const c=this.view.basemapTerrain.visibleElevationBounds,a=(t>=0?1:-1)*((c?Math.abs(c.max-c.min):100)+Math.abs(t));p.scale(o,s,a),p.add(n,i,o),d.fromPoints(n,i,T);const l=this._getRayIntersection(T,{include:this._terrainIntersectionOptionsLayerUids,maxDistance:a});if(null!=l){const e=P;return p.scale(e,s,t),p.add(r,l.renderPoint,e),u.clone(l.normal)}return p.copy(r,e),null}},t.__decorate([s.property()],e.LineOfSightRayIntersector.prototype,"view",void 0),t.__decorate([s.property()],e.LineOfSightRayIntersector.prototype,"intersector",void 0),e.LineOfSightRayIntersector=t.__decorate([l.subclass("esri.views.3d.analysis.LineOfSight.LineOfSightRayIntersector")],e.LineOfSightRayIntersector);const O=u.create(),b=u.create(),L=u.create(),P=u.create(),T=d.create();Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
