/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../chunks/tslib.es6","../../../core/Accessor","../../../core/mathUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../chunks/vec32","../../../core/libs/gl-matrix-2/factories/vec3f64","../../../geometry/ellipsoidUtils","./atmosphereUtils","../../../chunks/Fog.glsl","./FogTechnique","./weather","../webgl-engine/lib/DefaultVertexBufferLayouts","../webgl-engine/lib/glUtil3D","../../webgl/enums"],(function(e,t,s,r,o,a,i,n,c,h,p,d,g,u,l,m,_,y,b){"use strict";const f=.95,P=1;e.Fog=class extends s{constructor(e){super(e),this._passParameters=new u.FogPassParameters;const t=e.context.renderContext.rctx;this._vao=y.createQuadVAO(t,_.Pos2Tex),this._technique=new l.FogTechnique(e);const s=d.getReferenceEllipsoid(e.view.spatialReference);this._planetRadius=s.radius,this._atmosphereRadius=s.radius+g.atmosphereHeight}destroy(){this._technique.release(),this._vao.dispose()}set strength(e){this._passParameters.fogStrength=e}get strength(){return this._passParameters.fogStrength}render(e,t){if(this._update(e,t),this._passParameters.fogAmount<=0)return;const s=this._technique;if(!s.compiled)return void this.context.requestRender();const r=e.offscreenRenderingHelper;r.renderDepthDetached((()=>{this._passParameters.depthTexture=r.depthTexture;const t=e.rctx.bindTechnique(s,e.bindParameters,this._passParameters);this._renderFog(t,e)}))}_renderFog(e,t){const s=t.rctx;s.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),s.drawArrays(b.PrimitiveType.TRIANGLE_STRIP,0,4)}_update(e,t){const s=e.bindParameters.camera;h.normalize(x,s.eye);const o=Math.max(0,h.dot(x,e.bindParameters.lighting.mainLight.direction)),a=t.color,i=.1;h.scale(F,a,i),h.lerp(this._passParameters.fogColor,F,a,o);const n=h.length(s.eye),c=n*n;this._passParameters.atmosphereC=c-this._atmosphereRadius*this._atmosphereRadius,this._passParameters.fogAmount=(1-r.smoothstep(f*m.weatherHeightLimit,P*m.weatherHeightLimit,Math.abs(n-this._planetRadius)))*t.amount,this._passParameters.fogStrength=t.strength}static isSupported(e){return e.capabilities.depthTexture}},t.__decorate([o.property({constructOnly:!0})],e.Fog.prototype,"context",void 0),t.__decorate([o.property({constructOnly:!0})],e.Fog.prototype,"view",void 0),t.__decorate([o.property({constructOnly:!0})],e.Fog.prototype,"rctx",void 0),t.__decorate([o.property({constructOnly:!0})],e.Fog.prototype,"viewingMode",void 0),e.Fog=t.__decorate([c.subclass("esri.views.3d.environment.Fog")],e.Fog);class v{constructor(){this.color=p.create(),this.strength=0,this.amount=0}}const x=p.create(),F=p.create();e.FogParameters=v,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
