/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../core/colorUtils","../../../core/Handles","../../../core/mathUtils","../../../core/reactiveUtils","../../../core/libs/gl-matrix-2/math/vec2","../../../chunks/vec32","../../../chunks/vec42","../../../core/libs/gl-matrix-2/factories/vec4f64","../../../geometry/support/Ellipsoid","./AtmosphereType","./atmosphereUtils","./ChapmanAtmosphereTechnique","./ChapmanAtmosphereTechniqueConfiguration","../webgl/formats","../webgl-engine/lib/DefaultVertexBufferLayouts","../webgl-engine/lib/glUtil3D","../webgl-engine/lib/textureUtils","../../../chunks/AtmosphereCompositing.glsl","../webgl-engine/shaders/AtmosphereCompositingTechnique","../../webgl/enums","../../../webscene/background/ColorBackground"],(function(e,t,s,i,a,r,o,n,h,u,p,d,c,m,l,_,T,g,b,q,P,v){"use strict";class w{constructor(e,i){this._view=e,this._context=i,this.type=p.AtmosphereType.Realistic,this._handles=new s,this._compositingPassParameters=new b.AtmosphereCompositingPassParameters,this._atmosphereConfiguration=new m.ChapmanAtmosphereTechniqueConfiguration,this._passParameters=new c.ChapmanAtmospherePassParameters,this._rootTileElevationMin=NaN,this._lowerBoundEarthRadius=u.earth.radius,this._fadeHaze=0,this._updateRadius(u.earth.radius);const r=this._context.renderContext.rctx;this._updateRootTileElevationBounds(),this._handles.add([a.watch((()=>this._view?.basemapTerrain?.rootTileElevationBounds),(()=>this._view?.basemapTerrain?this._updateRootTileElevationBounds():null)),a.watch((()=>this._view?.basemapTerrain?.visibleElevationBounds),(()=>this._view?.basemapTerrain?this._updateVisibleElevationBounds():null)),a.watch((()=>this._view?.environment.background),(e=>{const s=e instanceof v?t.unitRGBAFromColor(e.color):h.ZEROS;o.set(this._passParameters.backgroundColor,s[0]*s[3],s[1]*s[3],s[2]*s[3])}),a.syncAndInitial)]);const n=new m.ChapmanAtmosphereTechniqueConfiguration;n.haze=!1,this._atmosphereTechnique=this._context.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,n),n.haze=!0,this._atmosphereHazeTechnique=this._context.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,n),n.reduced=!0,n.haze=!1,this._atmosphereReducedTechnique=this._context.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,n),n.haze=!0,this._atmosphereHazeReducedTechnique=this._context.techniqueRepository.acquire(c.ChapmanAtmosphereTechnique,n),this._vao=T.createQuadVAO(r,_.Pos2Tex)}destroy(){this._handles.destroy(),this._atmosphereTechnique.release(),this._atmosphereHazeTechnique.release(),this._atmosphereReducedTechnique.release(),this._atmosphereHazeReducedTechnique.release(),this._vao.dispose()}render(e,t){this._render(e,t?this._atmosphereTechnique:this._atmosphereReducedTechnique,e.offscreenRenderingHelper.depthTexture,t,!1)}renderHaze(e,t,s){this._fadeHaze=t,this._render(e,s?this._atmosphereHazeTechnique:this._atmosphereHazeReducedTechnique,e.bindParameters.linearDepth?.getTexture(),s,!0)}_render(e,t,s,a,r){if(null==s)return;const n=e.offscreenRenderingHelper;this._update(e.bindParameters.camera),this._passParameters.depthTexture=s;const h=e.rctx.bindTechnique(t,e.bindParameters,this._passParameters);if(a)n.renderDepthDetached((()=>this._renderCommon(h,e)));else{const t=e.rctx.getViewport(),a=o.length(e.bindParameters.camera.eye)-u.earth.radius;let p;if(a<d.atmosphereHeight){const e=Math.min(1,Math.max(0,a/d.atmosphereHeight));p=r?i.lerp(.4,.5,e):i.lerp(.2,.3,e)}else{const e=Math.min(1,Math.max(0,(a-d.atmosphereHeight)/(15*d.atmosphereHeight)));p=r?i.lerp(.5,1,e):i.lerp(.3,.6,e)}const c=g.applyTextureResizeModulo(Math.round(p*e.bindParameters.camera.fullViewport[2])),m=g.applyTextureResizeModulo(Math.round(p*e.bindParameters.camera.fullViewport[3]));e.rctx.setViewport(0,0,c,m);const _=n.renderToCachedFBO(null,"chapman",(()=>this._renderCommon(h,e)),[0,0,0,1],l.ColorFormat.RGBA,null,c,m);e.rctx.setViewport(t.x,t.y,t.width,t.height),this._compositingPassParameters.color=_.getTexture(),this._compositingPassParameters.depth=s,this._atmosphereConfiguration.haze=r;const T=this._context.techniqueRepository.acquire(q.AtmosphereCompositingTechnique,this._atmosphereConfiguration);e.rctx.bindTechnique(T,e.bindParameters,this._compositingPassParameters),n.renderDepthDetached((()=>e.rctx.screen.draw())),T.release(),_.release()}}_renderCommon(e,t){null!=this._vao&&(t.rctx.bindVAO(this._vao),e.assertCompatibleVertexAttributeLocations(this._vao),t.rctx.drawArrays(P.PrimitiveType.TRIANGLE_STRIP,0,4))}_adjustRadiusForTesselation(e){return e*Math.cos(Math.PI/16/16)}_updateRootTileElevationBounds(){const e=this._view.basemapTerrain.rootTileElevationBounds.min;e!==this._rootTileElevationMin&&(this._rootTileElevationMin=e,this._lowerBoundEarthRadius=u.earth.radius,this._updateVisibleElevationBounds())}_updateVisibleElevationBounds(){const e=this._adjustRadiusForTesselation(u.earth.radius+this._view.basemapTerrain.visibleElevationBounds.min);e<this._lowerBoundEarthRadius&&this._updateRadius(e)}_updateRadius(e){this._lowerBoundEarthRadius=e,r.set(this._passParameters.radii,e,e+d.atmosphereHeight),this._passParameters.innerFadeDistance=2*Math.sqrt((2*e-d.innerAtmosphereDepth)*d.innerAtmosphereDepth)}_update(e){if(!e)return;const t=o.squaredLength(e.eye),s=Math.sqrt(t),a=t-this._passParameters.radii[1]*this._passParameters.radii[1],r=i.clamp((s-this._passParameters.radii[0])/d.atmosphereHeight,0,1);n.set(this._passParameters.heightParameters,s,t,a,r),this._passParameters.altitudeFade=d.computeInnerAltitudeFade(s-this._lowerBoundEarthRadius),this._passParameters.hazeStrength=i.lerp(i.lerp(.6,1,i.smoothstep(9500,10500,s-u.earth.radius)),1,this._fadeHaze)}static isSupported(e){return e.renderContext.rctx.capabilities.depthTexture}}e.ChapmanAtmosphere=w,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
