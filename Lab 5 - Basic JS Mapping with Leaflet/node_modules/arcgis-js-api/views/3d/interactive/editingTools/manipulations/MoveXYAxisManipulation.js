/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../Color","../../../../../core/Evented","../../../../../core/Handles","../../../../../core/handleUtils","../../../../../core/maybe","../../../../../core/reactiveUtils","../../../../../core/libs/gl-matrix-2/math/mat4","../../../../../core/libs/gl-matrix-2/factories/mat4f64","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../geometry/support/vectorStacks","../../../../../support/elevationInfoUtils","../../Manipulator3D","../../RenderObject","../dragEventPipeline3D","../ManipulatorType","./config","./Manipulation","./moveUtils","../../../webgl-engine/lib/basicInterfaces","../../../webgl-engine/lib/GeometryUtil","../../../webgl-engine/lib/Material","../../../webgl-engine/materials/ColorMaterial","../../../../interactive/dragEventPipeline","../../../../interactive/interfaces"],(function(t,a,e,r,i,n,s,o,l,u,c,p,d,h,g,_,f,M,m,w,v,T,y,A,b,I){"use strict";class S extends m.Manipulation{constructor(t){super(),this._handles=new r,this._arrowManipulatorInfos=new Array,this._angle=0,this._scale=1,this._radius=M.discRadius,this._updateAfterDrag=!1,this.events=new e,this._tool=t.tool,this._view=t.view,this._opaqueMaterial=this._createMaterial(),this._transparentMaterial=this._createMaterial(.5),null!=t.radius&&(this._radius=t.radius),this._createManipulators(),this.forEachManipulator((t=>this._tool.manipulators.add(t)))}set orthogonalAvailable(t){this._arrowManipulatorInfos.length>=3&&(this._arrowManipulatorInfos[1].manipulator.available=t,this._arrowManipulatorInfos[3].manipulator.available=t)}destroy(){this._handles=n.destroyMaybe(this._handles),this.forEachManipulator((t=>{this._tool.manipulators.remove(t),t.destroy()})),this._tool=null,this._view=null,this._arrowManipulatorInfos.length=0}forEachManipulator(t){for(const{manipulator:a}of this._arrowManipulatorInfos)t(a,f.ManipulatorType.TRANSLATE_XY)}createGraphicDragPipeline(t,a,e){const r=a.graphic,i=d.getGraphicEffectiveElevationInfo(r),n=r.geometry.spatialReference;return w.createGraphicMoveDragPipeline(r,e,(a=>this.createDragPipeline(((e,r,i,n,s)=>(({steps:r,cancel:i}=t(e,r,i,n,s)),a(e,r,i))),i,n,r)))}createDragPipeline(t,a,e,r){return i.handlesGroup(this._arrowManipulatorInfos.map((({manipulator:i},n)=>b.createManipulatorDragEventPipeline(i,((i,s,o,l,u)=>{const c=s.next((t=>({...t,manipulatorType:f.ManipulatorType.TRANSLATE_XY}))).next(b.dragAtLocation(this._view,i.elevationAlignedLocation)).next(_.screenToMapXYAtLocation(this._view,i.elevationAlignedLocation,a,e,r)).next(b.constrainToMapAxis(i.location,this.angle+(n+1)*Math.PI*.5)).next(b.addScreenDelta());t(i,c,o,l,u)})))))}get angle(){return this._angle}set angle(t){this._angle=t,this.dragging?this._updateAfterDrag=!0:this._updateManipulatorTransform()}get displayScale(){return this._scale}set displayScale(t){this._scale=t,this._updateManipulatorTransform()}get radius(){return this._radius}set radius(t){this._radius!==t&&(this._radius=t,this._updateManipulators())}_updateManipulators(){for(let t=0;t<this._arrowManipulatorInfos.length;t++)this._updateArrowManipulator(this._arrowManipulatorInfos[t],t);this._updateManipulatorTransform()}_updateArrowManipulator({manipulator:t,transform:a},e){const r=this._radius/M.discRadius,i=M.discTranslateArrowSize*r,n=i*Math.sqrt(3)/2,s=T.createExtrudedTriangle(this._opaqueMaterial,n,i/2,i/2,M.discHeight);T.transformInPlace(s,o.fromTranslation(p.sm4d.get(),u.set(p.sv3d.get(),0,-n/3,0))),t.renderObjects=[new g.RenderObject(s,I.ManipulatorStateFlags.Focused),new g.RenderObject(s.instantiate({material:this._transparentMaterial}),I.ManipulatorStateFlags.Unfocused)],t.radius=n/3*2*1.2;const l=o.fromZRotation(p.sm4d.get(),e*Math.PI/2),c=o.fromTranslation(p.sm4d.get(),u.set(p.sv3d.get(),0,M.discTranslateArrowOffset*r,0));o.multiply(a,l,c)}_createManipulators(){for(let t=0;t<4;t++){const a=this._createArrowManipulator(t);this._arrowManipulatorInfos.push(a)}this._updateManipulatorTransform()}_updateManipulatorTransform(){const t=this.angle,a=o.fromRotation(p.sm4d.get(),t,c.fromValues(0,0,1));if(null==a)return;const e=o.fromScaling(p.sm4d.get(),u.set(p.sv3d.get(),this.displayScale,this.displayScale,this.displayScale)),r=o.multiply(p.sm4d.get(),e,a);for(const i of this._arrowManipulatorInfos){const t=o.multiply(p.sm4d.get(),r,i.transform);i.manipulator.modelTransform=t}}_createArrowManipulator(t){const a=new h.Manipulator3D({view:this._view,autoScaleRenderObjects:!1,worldOriented:!0,focusMultiplier:1,touchMultiplier:1,collisionType:{type:"disc",direction:c.fromValues(0,0,1)}}),e={manipulator:a,transform:l.create()};return this._updateArrowManipulator(e,t),this._handles.add(a.events.on("drag",(t=>{this._updateAfterDrag&&"end"===t.action&&!this.dragging&&(this._updateManipulatorTransform(),this._updateAfterDrag=!1)}))),e}_createMaterial(t=1){const e=new A.ColorMaterial({cullFace:v.CullFaceOptions.Back,renderOccluded:y.RenderOccludedFlag.Transparent,isDecoration:!0});return this._handles.add(s.watch((()=>a.toUnitRGBA(this._view.effectiveTheme.accentColor)),(a=>{a[3]*=t,e.setParameters({color:a})}),s.initial)),e}get test(){return{arrowManipulators:this._arrowManipulatorInfos.map((({manipulator:t})=>t))}}}t.MoveXYAxisManipulation=S,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
