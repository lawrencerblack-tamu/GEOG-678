/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/Cyclical","../../../../../core/mathUtils","../../../../../core/screenUtils","../../../../../core/Logger","../../../../../core/has","../../../../../core/RandomLCG","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../core/libs/gl-matrix-2/math/vec2","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../geometry/ellipsoidUtils","../../../../../geometry/support/axisAngle","../../../../../geometry/support/plane","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintOptions","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../input/util","../InteractiveController","../momentum/PanPlanarMomentumController","../momentum/PanSphericalMomentumController","../momentum/RotationMomentumController","../momentum/ZoomPlanarMomentumController","../momentum/ZoomSphericalMomentumController","../../utils/navigationUtils","../../../webgl-engine/lib/Camera","../../../../navigation/PanPlanarMomentumEstimator","../../../../navigation/PanSphericalMomentumEstimator","../../../../navigation/RotationMomentumEstimator","../../../../navigation/ZoomMomentumEstimator"],(function(t,e,i,n,a,o,r,s,c,h,m,l,p,_,u,P,d,g,C,v,S,M,y,b,w,A,O,E,T,x,R,z,F,k){"use strict";t.PinchAndPanController=class extends y.InteractiveController{constructor(){super(...arguments),this._smoothRotation=new M.ExponentialFalloff(.05),this._rotationAxis=p.create(),this._beginAngle=0,this._beginHeading=0,this._panningPlane=P.create(),this._beginRadius=0,this._smoothScaling=new M.ExponentialFalloff(.05),this._zoomCenterScreen=a.createScreenPointArray(),this._zoomMomentumEstimator=new k.ZoomMomentumEstimator,this._rotationMomentumEstimator=new F.RotationMomentumEstimator,this._panSphericalMomentumEstimator=new z.PanSphericalMomentumEstimator,this._panPlanarMomentumEstimator=new R.PanPlanarMomentumEstimator,this._adjustedSphere=d.create(),this._tmp3d=p.create(),this._tmpScreenPointArray=a.createScreenPointArray(),this._beginScreenPoint=a.createScreenPointArray(),this._beginScenePoint=p.create(),this._screenPickPoint=a.createScreenPointArray(),this._scenePickPoint=p.create(),this._mode=T.NavigationMode.Horizontal,this._sphere=d.create(),this._pointerCount=0,this._tmpInteractionDirection=p.create(),this._beginCamera=new x.Camera,this._constraintOptions=new C.ConstraintOptions(v.ConstraintTypes.ALL,S.InteractionType.NONE,0,this._beginCamera)}get _intersectionHelper(){return this.view.sceneIntersectionHelper}begin(t){if(!this.active)return;this._zoomMomentumEstimator.enabled=this._rotationMomentumEstimator.enabled=this._panPlanarMomentumEstimator.enabled=this._panSphericalMomentumEstimator.enabled=this.view.navigation.momentumEnabled,this._beginHeading=-i.cyclicalPI.normalize(n.deg2rad(this.view.camera.heading)),this._beginRadius=t.radius,this._pointerCount=t.pointers.size,this._beginAngle=t.angle,this._smoothRotation.reset(),a.screenPointObjectToArray(t.center,this._screenPickPoint),m.copy(this._beginScreenPoint,this._screenPickPoint);const e=_.getReferenceEllipsoid(this.view.spatialReference),o=T.pickPointAndInitSphere(this._intersectionHelper,this.startCamera,this._screenPickPoint,e,T.SpherePickPointFallback.Silhouette,0===this.view.map.ground.opacity?T.contentIntersectorOptions:{});null!=o.scenePickPoint&&(this._scenePickPoint=o.scenePickPoint,this._sphere=o.sphere,l.copy(this._beginScenePoint,this._scenePickPoint),this._mode=T.decideNavigationMode(this.startCamera,this._screenPickPoint,e),this._mode===T.NavigationMode.Vertical&&this._preparePlanarPanMode(t,o.hasGeometryIntersection),this._beginCamera.copyFrom(this.startCamera))}update(t){if(!this.active)return;this.currentCamera.copyFrom(this.startCamera);const e=t.pointers.size>1;this._mode===T.NavigationMode.Horizontal?(e&&this._zoomSpherical(t),this._panningSpherical(t),e&&this._rotateSpherical(t)):(e&&this._zoomPlanar(t),this._panningPlanar(t),e&&this._rotatePlanar(t)),this.commitCamera()}end(t){t.pointers.size===this._pointerCount&&this.update(t),this.finishController();const e=this._zoomMomentumEstimator.evaluateMomentum();if(e)return this._mode===T.NavigationMode.Horizontal?new E.ZoomSphericalMomentumController({view:this.view,momentum:e,screenCenter:this._zoomCenterScreen,sceneCenter:this._beginScenePoint,radius:this._sphere[3]}):new O.ZoomPlanarMomentumController({view:this.view,momentum:e,zoomCenter:this._beginScenePoint});const i=this._rotationMomentumEstimator.evaluateMomentum();if(i)return new A.RotationMomentumController({view:this.view,momentum:i,center:d.getCenter(this._sphere),axis:this._rotationAxis});if(this._mode===T.NavigationMode.Horizontal){const t=this._panSphericalMomentumEstimator.evaluateMomentum();if(t)return new w.PanSphericalMomentumController({view:this.view,momentum:t})}else{const t=this._panPlanarMomentumEstimator.evaluateMomentum();if(t)return new b.PanPlanarMomentumController({view:this.view,momentum:t})}return null}_preparePlanarPanMode(t,e){const i=l.negate(this._tmp3d,this.startCamera.viewForward);P.fromPositionAndNormal(this._scenePickPoint,i,this._panningPlane);const n=a.createScreenPointArray(this._screenPickPoint[0],0),o=p.create(),r=l.length(this.startCamera.eye);this._adjustedSphere[3]=r<this._sphere[3]?r-100:this._sphere[3],T.sphereOrPlanePointFromScreenPoint(this._adjustedSphere,this.startCamera,n,o);const s=a.createRenderScreenPointArray3();this.startCamera.projectToRenderScreen(o,s);const c=p.create(),h=p.create(),m=p.create();l.subtract(c,this._scenePickPoint,this.currentCamera.eye);const _=l.length(c);l.normalize(c,c);const u=T.panDistanceModifier*Math.max(Math.abs(this.view.camera.position.z),T.minHeightLimit),d=this.view._stage.renderView.getMinimalDepthForArea(null,this._screenPickPoint[0],this._screenPickPoint[1],this.view.state.camera,T.screenPixelArea);let g=null!=d?d:u;g=e?Math.min(g,_):g,l.copy(m,l.add(h,this.currentCamera.eye,l.scale(h,c,g))),this._panningPlane[3]=-l.dot(P.getNormal(this._panningPlane),m),this.startCamera.center=l.add(h,this.startCamera.eye,l.scale(h,this.startCamera.viewForward,g));const C=a.screenPointObjectToArray(t.center,this._tmpScreenPointArray);T.intersectPlaneFromScreenPointAtEye(this._panningPlane,this.startCamera,C,this._beginScenePoint)}_zoomSpherical(t){const e=this._beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this._smoothScaling.gain=i,this._smoothScaling.update(e),T.applyZoomOnSphere(this._sphere,this.currentCamera,this._smoothScaling.value),a.screenPointObjectToArray(t.center,this._zoomCenterScreen),this._zoomMomentumEstimator.add(this._smoothScaling.value,.001*t.timestamp),this._constraintOptions.interactionType=S.InteractionType.ZOOM,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(t.radius-this._beginRadius),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}_panningSpherical(t){const e=a.screenPointObjectToArray(t.center,this._tmpScreenPointArray);T.sphereOrPlanePointFromScreenPoint(this._sphere,this.currentCamera,e,this._tmp3d),T.preserveHeadingThreshold(this._beginScenePoint,l.dot(this.currentCamera.up,this._beginScenePoint),this._sphere[3],this._beginHeading,this.view.camera.tilt,this.startCamera)?(T.applyPanSphericalPreserveHeading(this._sphere,this.currentCamera,this._beginScenePoint,this._tmp3d,this._beginHeading,this.view.camera.tilt,!1),this._panSphericalMomentumEstimator.addMomentumPreserveHeading(e,this._tmp3d,.001*t.timestamp,this.startCamera,this._sphere,this._beginHeading,this.view.camera.tilt)):(T.applyPanSphericalDirectRotation(this._sphere,this.currentCamera,this._beginScenePoint,this._tmp3d,this.view.camera.tilt,!1),this._panSphericalMomentumEstimator.addMomentumDirectRotation(e,this._tmp3d,.001*t.timestamp,this.startCamera,this._sphere[3],this.view.camera.tilt)),this._constraintOptions.interactionType=S.InteractionType.PAN,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(m.distance(this._screenPickPoint,e)),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}_rotateSpherical(t){l.normalize(this._rotationAxis,this._scenePickPoint),this.currentCamera.aboveGround||l.negate(this._rotationAxis,this._rotationAxis);const e=this._smoothRotation.value,i=e+T.normalizeRotationDelta(t.angle-e),n=.00125*Math.min(Math.max(t.radius,40),120);this._smoothRotation.gain=n,this._smoothRotation.update(i);const a=this._smoothRotation.value-this._beginAngle;this._rotationMomentumEstimator.add(a,.001*t.timestamp),T.applyRotation(this.currentCamera,d.getCenter(this._sphere),u.wrapAxisAngle(this._rotationAxis,a)),this._constraintOptions.interactionType=S.InteractionType.TUMBLE,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(t.radius*i),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}_panningPlanar(t){const e=a.screenPointObjectToArray(t.center,this._tmpScreenPointArray);T.intersectPlaneFromScreenPointAtEye(this._panningPlane,this.currentCamera,e,this._tmp3d)&&(T.applyPanPlanar(this.currentCamera,this._beginScenePoint,this._tmp3d),this._panPlanarMomentumEstimator.add(e,this._tmp3d,.001*t.timestamp),this._constraintOptions.interactionType=S.InteractionType.PAN,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(m.distance(this._beginScreenPoint,e)),this._constraintOptions.interactionDirection=this.view.renderCoordsHelper.worldUpAtPosition(this.currentCamera.eye,this._tmpInteractionDirection),g.applyAll(this.view,this.currentCamera,this._constraintOptions),this._constraintOptions.interactionDirection=null)}_zoomPlanar(t){const e=this._beginRadius/t.radius,i=.001875*Math.min(Math.max(t.radius,40),120);this._smoothScaling.gain=i,this._smoothScaling.update(e),this._zoomMomentumEstimator.add(this._smoothScaling.value,.001*t.timestamp),T.applyZoomToPoint(this.currentCamera,this._beginScenePoint,this._smoothScaling.value,this.view.state.constraints.minimumPoiDistance),this._constraintOptions.interactionType=S.InteractionType.ZOOM,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(t.radius-this._beginRadius),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}_rotatePlanar(t){l.copy(this._rotationAxis,this._beginScenePoint),this.currentCamera.aboveGround||l.negate(this._rotationAxis,this._rotationAxis);const e=this._smoothRotation.value;let i=t.angle-e;i=T.normalizeRotationDelta(i);const n=e+i,a=.00125*Math.min(Math.max(t.radius,40),120);this._smoothRotation.gain=a,this._smoothRotation.update(n);const o=this._smoothRotation.value-this._beginAngle;this._rotationMomentumEstimator.add(o,.001*t.timestamp),T.applyRotation(this.currentCamera,d.getCenter(this._sphere),u.wrapAxisAngle(this._rotationAxis,o)),this._constraintOptions.interactionType=S.InteractionType.TUMBLE,this._constraintOptions.interactionFactor=g.pixelDistanceToInteractionFactor(t.radius*o),g.applyAll(this.view,this.currentCamera,this._constraintOptions)}},t.PinchAndPanController=e.__decorate([h.subclass("esri.views.3d.state.controllers.global.PinchAndPanController")],t.PinchAndPanController),Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
