/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../chunks/tslib.es6","../../../../../core/mathUtils","../../../../../core/time","../../../../../core/Logger","../../../../../core/has","../../../../../core/RandomLCG","../../../../../core/Error","../../../../../core/accessorSupport/decorators/subclass","../../../../../chunks/vec32","../../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../../geometry/ellipsoidUtils","../../../../../chunks/sphere","../../../camera/constraintUtils","../../../camera/constraintUtils/ConstraintOptions","../../../camera/constraintUtils/ConstraintTypes","../../../camera/constraintUtils/InteractionType","../../../camera/constraintUtils/surfaceCollision","../PointToPointAnimationController","../../utils/navigationUtils","../../../support/geometryUtils/ray","../../../support/geometryUtils/sphere","../../../webgl-engine/lib/Camera","../../../webgl-engine/lib/Intersector","../../../../animation/easing"],(function(t,e,i,r,s,a,n,o,c,h,m,p,l,_,d,y,g,C,u,w,D,b,M,v,f){"use strict";const R=.6,S=4,z=60;t.ZoomStepController=class extends u.PointToPointAnimationController{constructor(){super(...arguments),this._zoomLocation=m.create(),this._tmpCamera=new M.Camera,this._tmpViewDir=m.create(),this._tmpRayDir={origin:m.create(),direction:m.create()},this._targetOnSphere=m.create(),this._tmpCenter=m.create(),this._beginCamera=new M.Camera,this._constraintOptions=new d.ConstraintOptions(y.ConstraintTypes.ALL_EXCEPT_COLLISION,g.InteractionType.ZOOM,null,this._beginCamera),this._sphere=l.create()}initialize(){this._intersector=v.newIntersector(this.view.state.viewingMode)}zoomStep(t,e){if(!this.active)return;const i=this.view.state;this.animation.finished?this._beginCamera.copyFrom(i.camera):this.animation.cameraAt(1,this._beginCamera);let r=!1,s=!1;this.intersectionHelper.intersectScreen(e,this._zoomLocation,0===this.view.map.ground.opacity?w.contentIntersectorOptions:{})&&(r=t>0,s=!0),this._tmpCamera.copyFrom(i.camera),r?this.intersectionHelper.intersectRay(this._tmpCamera.ray,this._intersector,this._tmpCenter)&&(this._tmpCamera.center=this._tmpCenter):this.intersectionHelper.intersectRay(this._tmpCamera.ray,this._intersector,this._zoomLocation)?this._tmpCamera.center=this._zoomLocation:h.copy(this._zoomLocation,this._tmpCamera.center),this._updateCamera(this._tmpCamera,t,this._zoomLocation,e,s),this.begin(this._tmpCamera)}animationSettings(){return{duration:r.Milliseconds(600),easing:f.outExpo}}_updateCamera(t,e,r,s,a){const n=p.getReferenceEllipsoid(this.view.spatialReference),o=w.decideNavigationMode(t,s,n),c=Math.abs(this.view.camera.position.z);h.normalize(L,t.eye),h.scale(L,L,-1),D.fromScreenAtEye(t,s,this._tmpRayDir),h.normalize(this._tmpRayDir.direction,this._tmpRayDir.direction);const m=i.clamp(Math.min(w.zoomDistanceModifier,1/Math.abs(h.dot(L,this._tmpRayDir.direction)))*c,w.zoomMinDistanceModifier,w.zoomMaxDistanceModifier);if(o===w.NavigationMode.Horizontal){let i=R**e;this._sphere[3]=h.length(r),h.subtract(this._tmpViewDir,t.center,t.eye);const a=Math.min(h.length(this._tmpViewDir),m);let n=a*i;if(i<=1&&n<S&&(n=S,i=n/a),Math.abs(a-n)<1e-6)return;const o=h.length(t.center);if(this._sphere[3]!==o){const e=this._sphere[3]+i*(o-this._sphere[3]);t.center=h.scale(O,t.center,e/o)}h.scale(this._tmpViewDir,this._tmpViewDir,-i),t.eye=h.add(O,t.center,this._tmpViewDir),_.applyAll(this.view,t,this._constraintOptions),h.squaredDistance(r,t.center)>1e-12&&b.intersectScreen(this._sphere,t,s,this._targetOnSphere)&&w.panToPosition(this._sphere,t,r,this._targetOnSphere,this.view.camera.heading,this.view.camera.tilt,!0)}else{let i=R**Math.abs(e);const n=e>0?1:-1;h.subtract(this._tmpViewDir,r,t.eye);const o=h.length(this._tmpViewDir),c=this.view._stage.renderView.getMinimalDepthForArea(null,s[0],s[1],this.view.state.camera,z);let p=null!=c?c:m;p=a&&e>0?Math.min(p,o):p,h.scale(this._tmpRayDir.direction,this._tmpRayDir.direction,p),h.add(r,this._tmpRayDir.origin,this._tmpRayDir.direction);let l=p*i;const _=Math.max(S,1.01*t.nearFar[0]);if(e>0&&l<_&&(l=_,i=l/p),Math.abs(p-l)<1e-6)return;h.scale(this._tmpRayDir.direction,this._tmpRayDir.direction,n*(1-i)),t.eye=h.add(O,t.eye,this._tmpRayDir.direction),t.center=h.add(O,t.center,this._tmpRayDir.direction)}C.applySurfaceCollisionConstraint(this.view,t)}},t.ZoomStepController=e.__decorate([c.subclass("esri.views.3d.state.controllers.global.ZoomStepController")],t.ZoomStepController);const O=m.create(),L=m.create();Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
