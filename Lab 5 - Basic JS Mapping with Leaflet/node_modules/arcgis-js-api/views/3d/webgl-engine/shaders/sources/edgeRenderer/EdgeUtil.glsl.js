/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../collections/Component/Material/shader/ComponentData.glsl","../../../core/shaderLibrary/attributes/NormalAttribute.glsl","../../../core/shaderLibrary/util/DoublePrecision.glsl","../../../core/shaderLibrary/util/RgbaFloatEncoding.glsl","../../../core/shaderModules/Float3DrawUniform","../../../core/shaderModules/Float3PassUniform","../../../core/shaderModules/FloatPassUniform","../../../core/shaderModules/interfaces","../../../core/shaderModules/Matrix3DrawUniform","../../../core/shaderModules/Matrix3PassUniform","../../../core/shaderModules/Matrix4PassUniform","../../../core/shaderModules/Texture2DDrawUniform","../../../lib/VertexAttribute"],(function(o,e,t,r,a,l,n,d,s,i,m,c,f,u){"use strict";function v(o,v){const x=o.vertex;x.include(a.RgbaFloatEncoding),o.include(t.NormalAttribute,v),x.uniforms.add(new d.FloatPassUniform("distanceFalloffFactor",(o=>o.distanceFalloffFactor))),x.code.add(s.glsl`float distanceBasedPerspectiveFactor(float distance) {
return clamp(sqrt(distanceFalloffFactor / distance), 0.0, 1.0);
}`),x.uniforms.add(new f.Texture2DDrawUniform("componentDataTex",(o=>o.componentDataTexture))),o.attributes.add(u.VertexAttribute.COMPONENTINDEX,"float"),x.constants.add("componentColorFieldOffset","float",0),x.constants.add("componentOtherFieldOffset","float",1),x.constants.add("componentVerticalOffsetFieldOffset","float",2),x.constants.add("componentFieldCount","float",3),x.constants.add("lineWidthFractionFactor","float",8),x.constants.add("extensionLengthOffset","float",128),x.constants.add("verticalOffsetScale","float",2*e.maxElevationOffset),x.code.add(s.glsl`
    vec2 _componentTextureCoords(float componentIndex, float fieldOffset) {
      float fieldIndex = componentFieldCount * componentIndex + fieldOffset;
      float texSize = float(textureSize(componentDataTex, 0).x);
      float colIndex = mod(fieldIndex, texSize);
      float rowIndex = floor(fieldIndex / texSize);

      return vec2(colIndex, rowIndex) + 0.5;
    }

    struct ComponentData {
      vec4 color;
      vec3 normal;
      vec3 normal2;
      float lineWidth;
      float extensionLength;
      float type;
      float verticalOffset;
    };

    ComponentData readComponentData() {
      vec2 colorIndex = _componentTextureCoords(componentIndex, componentColorFieldOffset);
      vec2 otherIndex = _componentTextureCoords(componentIndex, componentOtherFieldOffset);
      vec2 verticalOffsetIndex = _componentTextureCoords(componentIndex, componentVerticalOffsetFieldOffset);
      vec3 normal = normalModel();
      vec3 normal2 = ${v.silhouette?s.glsl`decompressNormal(normal2Compressed)`:s.glsl`normal`};

      vec4 colorValue = texelFetch(componentDataTex, ivec2(colorIndex), 0);
      vec4 otherValue = texelFetch(componentDataTex, ivec2(otherIndex), 0);
      float verticalOffset = (rgba2float(texelFetch(componentDataTex, ivec2(verticalOffsetIndex), 0)) - 0.5) * verticalOffsetScale;

      return ComponentData(
        vec4(colorValue.rgb, colorValue.a * otherValue.w), // otherValue.w stores separate opacity
        normal, normal2,
        otherValue.x * (255.0 / lineWidthFractionFactor),
        otherValue.y * 255.0 - extensionLengthOffset,
        -(otherValue.z * 255.0) + 0.5, // SOLID (=0/255) needs to be > 0.0, SKETCHY (=1/255) needs to be <= 0;
        verticalOffset
      );
    }
  `),v.legacy?x.code.add(s.glsl`vec3 _modelToWorldNormal(vec3 normal) {
return (model * vec4(normal, 0.0)).xyz;
}
vec3 _modelToViewNormal(vec3 normal) {
return (localView * model * vec4(normal, 0.0)).xyz;
}`):(x.uniforms.add(new i.Matrix3DrawUniform("transformNormalGlobalFromModel",(o=>o.transformNormalGlobalFromModel))),x.code.add(s.glsl`vec3 _modelToWorldNormal(vec3 normal) {
return transformNormalGlobalFromModel * normal;
}`)),v.silhouette?(o.attributes.add(u.VertexAttribute.NORMAL2COMPRESSED,"vec2"),x.code.add(s.glsl`vec3 worldNormal(ComponentData data) {
return _modelToWorldNormal(normalize(data.normal + data.normal2));
}`)):x.code.add(s.glsl`vec3 worldNormal(ComponentData data) {
return _modelToWorldNormal(data.normal);
}`),v.legacy?x.code.add(s.glsl`void worldAndViewFromModelPosition(vec3 modelPos, float verticalOffset, out vec3 worldPos, out vec3 viewPos) {
worldPos = (model * vec4(modelPos, 1.0)).xyz;
viewPos = (localView * vec4(worldPos, 1.0)).xyz;
}`):(x.include(r.DoublePrecision,v),x.uniforms.add(new m.Matrix3PassUniform("transformViewFromCameraRelativeRS",(o=>o.transformViewFromCameraRelativeRS)),new i.Matrix3DrawUniform("transformWorldFromModelRS",(o=>o.transformWorldFromModelRS)),new l.Float3DrawUniform("transformWorldFromModelTL",(o=>o.transformWorldFromModelTL)),new l.Float3DrawUniform("transformWorldFromModelTH",(o=>o.transformWorldFromModelTH)),new n.Float3PassUniform("transformWorldFromViewTL",(o=>o.transformWorldFromViewTL)),new n.Float3PassUniform("transformWorldFromViewTH",(o=>o.transformWorldFromViewTH))),x.code.add(s.glsl`
      void worldAndViewFromModelPosition(vec3 modelPos, float verticalOffset, out vec3 worldPos, out vec3 viewPos) {
        vec3 rotatedModelPosition = transformWorldFromModelRS * modelPos;

        vec3 transformCameraRelativeFromModel = dpAdd(
          transformWorldFromModelTL,
          transformWorldFromModelTH,
          -transformWorldFromViewTL,
          -transformWorldFromViewTH
        );

        worldPos = transformCameraRelativeFromModel + rotatedModelPosition;

        if (verticalOffset != 0.0) {
          vec3 vUp = ${v.spherical?s.glsl`normalize(transformWorldFromModelTL + rotatedModelPosition);`:s.glsl`vec3(0.0, 0.0, 1.0);`}
          worldPos += verticalOffset * vUp;
        }

        viewPos = transformViewFromCameraRelativeRS * worldPos;
      }
    `)),x.uniforms.add(new c.Matrix4PassUniform("transformProjFromView",((o,e)=>e.camera.projectionMatrix))),x.code.add(s.glsl`vec4 projFromViewPosition(vec3 position) {
return transformProjFromView * vec4(position, 1.0);
}`),x.code.add(s.glsl`float calculateExtensionLength(float extensionLength, float lineLength) {
return extensionLength / (log2(max(1.0, 256.0 / lineLength)) * 0.2 + 1.0);
}`)}function x(e){return e.mode===o.EdgeUtilMode.SKETCH||e.mode===o.EdgeUtilMode.MIXED}function F(e){return e.mode===o.EdgeUtilMode.SOLID||e.mode===o.EdgeUtilMode.MIXED}var w,M;o.EdgeUtilMode=void 0,(w=o.EdgeUtilMode||(o.EdgeUtilMode={}))[w.SOLID=0]="SOLID",w[w.SKETCH=1]="SKETCH",w[w.MIXED=2]="MIXED",w[w.COUNT=3]="COUNT",o.EdgeSilhouette=void 0,(M=o.EdgeSilhouette||(o.EdgeSilhouette={}))[M.REGULAR=0]="REGULAR",M[M.SILHOUETTE=1]="SILHOUETTE",o.EdgeUtil=v,o.usesSketchLogic=x,o.usesSolidLogic=F,Object.defineProperty(o,Symbol.toStringTag,{value:"Module"})}));
