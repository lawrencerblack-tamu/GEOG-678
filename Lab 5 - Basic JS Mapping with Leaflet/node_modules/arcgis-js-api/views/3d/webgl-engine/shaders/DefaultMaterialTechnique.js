/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["require","exports","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../ViewingMode","../core/shaderLibrary/ShaderOutput","../core/shaderLibrary/attributes/NormalAttribute.glsl","../core/shaderLibrary/attributes/TextureCoordinateAttribute.glsl","../core/shaderLibrary/attributes/VertexNormal.glsl","../core/shaderLibrary/util/AlphaCutoff","../core/shaderTechnique/ReloadableShaderModule","../core/shaderTechnique/ShaderTechnique","../lib/basicInterfaces","../lib/DefaultVertexAttributeLocations","../lib/Material","../lib/OrderIndependentTransparency","../lib/Program","../lib/StencilUtils","../lib/TransparencyPassType","../materials/pbrUtils","../../../../chunks/DefaultMaterial.glsl","../../../webgl/enums","../../../webgl/renderState"],(function(e,t,i,r,a,s,l,n,o,u,c,h,d,p,f,m,b,g,T,P,y,S,x){"use strict";class D extends o.VertexNormalPassParameters{constructor(){super(...arguments),this.isSchematic=!1,this.usePBR=!1,this.mrrFactors=i.fromArray(P.defaultAdvancedMRRFactors),this.hasVertexColors=!1,this.hasSymbolColors=!1,this.doubleSided=!1,this.doubleSidedType="normal",this.cullFace=d.CullFaceOptions.Back,this.isInstanced=!1,this.hasInstancedColor=!1,this.emissiveFactor=i.fromValues(0,0,0),this.instancedDoublePrecision=!1,this.normalType=l.NormalType.Attribute,this.receiveShadows=!0,this.receiveAmbientOcclusion=!0,this.castShadows=!0,this.shadowMappingEnabled=!1,this.ambient=i.fromValues(.2,.2,.2),this.diffuse=i.fromValues(.8,.8,.8),this.externalColor=r.fromValues(1,1,1,1),this.colorMixMode="multiply",this.opacity=1,this.layerOpacity=1,this.origin=i.create(),this.hasSlicePlane=!1,this.hasSliceHighlight=!0,this.offsetTransparentBackfaces=!1,this.vvSize=null,this.vvColor=null,this.vvOpacity=null,this.vvSymbolAnchor=null,this.vvSymbolRotationMatrix=null,this.modelTransformation=null,this.transparent=!1,this.writeDepth=!0,this.customDepthTest=d.DepthTestFunction.Less,this.textureAlphaMode=d.AlphaDiscardMode.Blend,this.textureAlphaCutoff=u.defaultMaskAlphaCutoff,this.textureAlphaPremultiplied=!1,this.hasOccludees=!1,this.renderOccluded=f.RenderOccludedFlag.Occlude,this.isDecoration=!1}}class O extends o.VertexNormalDrawParameters{constructor(){super(...arguments),this.origin=i.create(),this.slicePlaneLocalOrigin=this.origin}}class M extends h.ShaderTechnique{initializeConfiguration(e,t){t.spherical=e.viewingMode===a.ViewingMode.Global,t.doublePrecisionRequiresObfuscation=e.rctx.driverTest.doublePrecisionRequiresObfuscation.result,t.textureCoordinateType=t.hasColorTexture||t.hasMetallicRoughnessTexture||t.hasEmissionTexture||t.hasOcclusionTexture||t.hasNormalTexture?n.TextureCoordinateAttributeType.Default:n.TextureCoordinateAttributeType.None,t.objectAndLayerIdColorInstanced=t.instanced}initializeProgram(e){return this._initializeProgram(e,M.shader)}_initializeProgram(e,t){return new b.Program(e.rctx,t.get().build(this.configuration),p.Default3D)}_convertDepthTestFunction(e){return e===d.DepthTestFunction.Lequal?S.CompareFunction.LEQUAL:S.CompareFunction.LESS}_makePipeline(e,t){const i=this.configuration,r=e===T.TransparencyPassType.NONE,a=e===T.TransparencyPassType.FrontFace;return x.makePipelineState({blending:i.output!==s.ShaderOutput.Color&&i.output!==s.ShaderOutput.Alpha||!i.transparent?null:r?m.blendingDefault:m.oitBlending(e),culling:v(i)?x.cullingParams(i.cullFace):null,depthTest:{func:m.oitDepthTest(e,this._convertDepthTestFunction(i.customDepthTest))},depthWrite:(r||a)&&i.writeDepth?x.defaultDepthWriteParams:null,colorWrite:x.defaultColorWriteParams,stencilWrite:i.hasOccludees?g.stencilWriteMaskOn:null,stencilTest:i.hasOccludees?t?g.stencilToolMaskBaseParams:g.stencilBaseAllZerosParams:null,polygonOffset:r||a?null:m.getOITPolygonOffset(i.enableOffset)})}initializePipeline(){return this._occludeePipelineState=this._makePipeline(this.configuration.transparencyPassType,!0),this._makePipeline(this.configuration.transparencyPassType,!1)}getPipeline(e){return e?this._occludeePipelineState:super.getPipeline()}}function v(e){return e.cullFace!==d.CullFaceOptions.None||!e.hasSlicePlane&&(!e.transparent&&!e.doubleSidedMode)}M.shader=new c.ReloadableShaderModule(y.DefaultMaterial,(()=>new Promise(((t,i)=>e(["./DefaultMaterial.glsl"],t,i))))),t.DefaultMaterialDrawParameters=O,t.DefaultMaterialPassParameters=D,t.DefaultMaterialTechnique=M,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
