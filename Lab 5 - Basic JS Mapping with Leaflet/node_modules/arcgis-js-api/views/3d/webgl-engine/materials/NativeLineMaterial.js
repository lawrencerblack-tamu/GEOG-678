/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../core/Logger","../../../../core/mathUtils","../../../../core/screenUtils","../../../../core/libs/gl-matrix-2/math/vec2","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../../../geometry/support/frustum","../../../../geometry/support/lineSegment","../../../../geometry/support/plane","../core/shaderLibrary/ShaderOutput","../lib/GLMaterial","../lib/Material","../lib/RenderSlot","../lib/Util","../lib/VertexAttribute","./DefaultBufferWriter","./DefaultLayouts","../shaders/NativeLineTechnique","../shaders/NativeLineTechniqueConfiguration"],(function(e,t,r,a,i,n,s,o,c,l,u,d,h,g,f,m,p,S,P,b,y){"use strict";class A extends g.Material{constructor(e){super(e,new x),this._configuration=new y.NativeLineTechniqueConfiguration,this.produces=new Map([[f.RenderSlot.OPAQUE_MATERIAL,e=>e===d.ShaderOutput.Color||e===d.ShaderOutput.Highlight||e===d.ShaderOutput.ObjectAndLayerIdColor]])}getConfiguration(e){return this._configuration.output=e,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.hasVertexColors=this.parameters.hasVertexColors,this._configuration.transparent=this.parameters.color[3]<1||this.parameters.width<1,this._configuration.hasOccludees=this.parameters.hasOccludees,this._configuration}intersect(e,r,a,s,o,d){if(!a.options.selectionMode||!e.visible)return;if(!m.isTranslationMatrix(r))return void t.getLogger("esri.views.3d.webgl-engine.materials.NativeLineMaterial").error("intersection assumes a translation-only matrix");const h=e.attributes.get(p.VertexAttribute.POSITION).data,g=a.camera,f=I;i.copy(f,a.point);const S=2;n.set(V[0],f[0]-S,f[1]+S,0),n.set(V[1],f[0]+S,f[1]+S,0),n.set(V[2],f[0]+S,f[1]-S,0),n.set(V[3],f[0]-S,f[1]-S,0);for(let t=0;t<4;t++)if(!g.unprojectFromRenderScreen(V[t],w[t]))return;u.fromPoints(g.eye,w[0],w[1],j),u.fromPoints(g.eye,w[1],w[2],U),u.fromPoints(g.eye,w[2],w[3],q),u.fromPoints(g.eye,w[3],w[0],B);let P=Number.MAX_VALUE,b=0;for(let t=0;t<h.length-5;t+=3){if(L[0]=h[t]+r[12],L[1]=h[t+1]+r[13],L[2]=h[t+2]+r[14],R[0]=h[t+3]+r[12],R[1]=h[t+4]+r[13],R[2]=h[t+5]+r[14],u.signedDistance(j,L)<0&&u.signedDistance(j,R)<0||u.signedDistance(U,L)<0&&u.signedDistance(U,R)<0||u.signedDistance(q,L)<0&&u.signedDistance(q,R)<0||u.signedDistance(B,L)<0&&u.signedDistance(B,R)<0)continue;if(g.projectToRenderScreen(L,_),g.projectToRenderScreen(R,T),_[2]<0&&T[2]>0){n.subtract(N,L,R);const e=g.frustum,t=-u.signedDistance(e[c.PlaneIndex.NEAR],L)/n.dot(N,u.getNormal(e[c.PlaneIndex.NEAR]));n.scale(N,N,t),n.add(L,L,N),g.projectToRenderScreen(L,_)}else if(_[2]>0&&T[2]<0){n.subtract(N,R,L);const e=g.frustum,t=-u.signedDistance(e[c.PlaneIndex.NEAR],R)/n.dot(N,u.getNormal(e[c.PlaneIndex.NEAR]));n.scale(N,N,t),n.add(R,R,N),g.projectToRenderScreen(R,T)}else if(_[2]<0&&T[2]<0)continue;_[2]=0,T[2]=0;const e=l.distance2(l.fromPoints(_,T,E),f);e<P&&(P=e,n.copy(v,L),n.copy(D,R),b=t/3)}const y=a.rayBegin,A=a.rayEnd;if(P<S*S){let e=Number.MAX_VALUE;if(l.closestLineSegmentPoint(l.fromPoints(v,D,E),l.fromPoints(y,A,C),M)){n.subtract(M,M,y);const t=n.length(M);n.scale(M,M,1/t),e=t/n.distance(y,A)}d(e,M,b,!1)}}intersectDraped(e,t,a,i,n,s){if(!a.options.selectionMode)return;const o=e.attributes.get(p.VertexAttribute.POSITION).data,c=e.attributes.get(p.VertexAttribute.SIZE),l=c?c.data[0]:0,u=i[0],d=i[1],h=((l+1)/2+4)*e.screenToWorldRatio;let g=Number.MAX_VALUE,f=0;for(let m=0;m<o.length-5;m+=3){const e=o[m],t=o[m+1],a=u-e,i=d-t,n=o[m+3]-e,s=o[m+4]-t,c=n*a+s*i,l=n*n+s*s,h=r.clamp(c/l,0,1),p=n*h-a,S=s*h-i,P=p*p+S*S;P<g&&(g=P,f=m/3)}g<h*h&&n(s.dist,s.normal,f,!1)}createGLMaterial(e){return new O(e)}createBufferWriter(){const e=this.parameters.hasVertexColors?P.PositionColorLayout:P.PositionLayout;return new S.DefaultBufferWriter(e)}}class O extends h{_updateOccludeeState(e){e.hasOccludees!==this._material.parameters.hasOccludees&&this._material.setParameters({hasOccludees:e.hasOccludees})}beginSlot(e){return this._output===d.ShaderOutput.Color&&this._updateOccludeeState(e),this.ensureTechnique(b.NativeLineTechnique,e)}}class x extends g.MaterialParameters{constructor(){super(...arguments),this.color=o.ONES,this.hasVertexColors=!1,this.hasSlicePlane=!1,this.width=1,this.hasOccludees=!1}}const L=s.create(),R=s.create(),N=s.create(),M=s.create(),_=a.createRenderScreenPointArray3(),T=a.createRenderScreenPointArray3(),v=s.create(),D=s.create(),E=l.create(),C=l.create(),I=s.create(),V=[a.createRenderScreenPointArray3(),a.createRenderScreenPointArray3(),a.createRenderScreenPointArray3(),a.createRenderScreenPointArray3()],w=[s.create(),s.create(),s.create(),s.create()],j=u.create(),U=u.create(),q=u.create(),B=u.create();e.NativeLineMaterial=A,e.Parameters=x,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
