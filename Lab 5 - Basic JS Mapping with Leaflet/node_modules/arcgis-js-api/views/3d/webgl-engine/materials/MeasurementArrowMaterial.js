/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../chunks/vec32","../../../../core/libs/gl-matrix-2/factories/vec3f64","../../../../core/libs/gl-matrix-2/factories/vec4f64","../../support/buffer/InterleavedLayout","../core/shaderLibrary/ShaderOutput","../lib/GLMaterial","../lib/Material","../lib/RenderSlot","../lib/VertexAttribute","../shaders/MeasurementArrowTechnique"],(function(t,e,r,s,n,a,o,i,u,c,l){"use strict";class h extends i.Material{constructor(t){super(t,new p),this._vertexAttributeLocations=l.MeasurementArrowAttributeLocations,this.produces=new Map([[u.RenderSlot.OPAQUE_MATERIAL,t=>!this._transparent&&(t===a.ShaderOutput.Color||t===a.ShaderOutput.Alpha)],[u.RenderSlot.TRANSPARENT_DEPTH_WRITE_DISABLED_MATERIAL,t=>this._transparent&&(t===a.ShaderOutput.Color||t===a.ShaderOutput.Alpha)]]),this._configuration=new l.MeasurementArrowTechniqueConfiguration}getConfiguration(t,e){return this._configuration.polygonOffsetEnabled=this.parameters.polygonOffset,this._configuration.transparent=this._transparent,this._configuration.transparencyPassType=e.transparencyPassType,this._configuration}intersect(){}createGLMaterial(t){return new f(t)}createBufferWriter(){return new O}get _transparent(){const{parameters:t}=this;return t.outlineColor[3]<1||t.stripeEvenColor[3]<1||t.stripeOddColor[3]<1}}class f extends o{beginSlot(t){return this.ensureTechnique(l.MeasurementArrowTechnique,t)}}class p extends i.MaterialParameters{constructor(){super(...arguments),this.width=32,this.outlineSize=.2,this.outlineColor=s.fromValues(1,.5,0,1),this.stripeEvenColor=s.fromValues(1,1,1,1),this.stripeOddColor=s.fromValues(1,.5,0,1),this.stripeLength=1,this.polygonOffset=!1}}const d=n.newLayout().vec3f(c.VertexAttribute.POSITION).vec3f(c.VertexAttribute.NORMAL).vec2f(c.VertexAttribute.UV0).f32(c.VertexAttribute.LENGTH),A=r.create(),b=r.create(),g=r.create(),m=r.create(),M=r.create();class O{constructor(){this.vertexBufferLayout=d}elementCount(t){return 2*(t.attributes.get(c.VertexAttribute.POSITION).indices.length/2+1)}write(t,r,s,n,a){const{data:o,indices:i}=s.attributes.get(c.VertexAttribute.POSITION),u=s.attributes.get(c.VertexAttribute.NORMAL).data,l=o.length/3;i&&i.length!==2*(l-1)&&console.warn("MeasurementArrowMaterial does not support indices");const h=A,f=b,p=g,d=m,O=M,S=n.position,T=n.normal,x=n.uv0;let V=0;for(let c=0;c<l;++c){const s=3*c;if(e.set(h,o[s],o[s+1],o[s+2]),c<l-1){const t=3*(c+1);e.set(f,o[t],o[t+1],o[t+2]),e.set(O,u[t],u[t+1],u[t+2]),e.normalize(O,O),e.subtract(p,f,h),e.normalize(p,p),e.cross(d,O,p),e.normalize(d,d)}const n=e.distance(h,f);t&&r&&(e.transformMat4(h,h,t),e.transformMat4(f,f,t),e.transformMat4(d,d,r));const i=a+2*c,A=i+1;S.setVec(i,h),S.setVec(A,h),T.setVec(i,d),T.setVec(A,d),x.set(i,0,V),x.set(i,1,-1),x.set(A,0,V),x.set(A,1,1),c<l-1&&(V+=n)}const w=n.length;for(let e=0;e<2*l;++e)w.set(a+e,V)}}t.MeasurementArrowMaterial=h,t.Parameters=p,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
