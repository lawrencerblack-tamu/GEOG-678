/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../core/promiseUtils","../../../../core/libs/gl-matrix-2/factories/vec4f64","../lib/basicInterfaces","../lib/rendererUtils","../../../support/RenderState","../../../support/screenshotUtils","../../../webgl/enums","../../../webgl/FramebufferObject","../../../../core/imageUtils"],(function(e,t,r,a,s,n,i,o,c,h){"use strict";class l{constructor(e,t,r){this.parameters=e,this.frameHasDecorations=t,this.fbos=r}}class d{constructor(e,t,r){this._rctx=e,this._renderFunctions=t,this._forceCameraHook=r,this.supersample=!0,this._screenshotQueue=new Array}destroy(){this._rctx=null}async takeScreenshot(e){await this._renderFunctions.prepareOverlay(),this._renderFunctions.requestRenderScene(a.RenderRequestType.BACKGROUND);const r=t.createResolver();return this._screenshotQueue.push({settings:e,resolver:r}),r.promise}update(e,t){for(const r of this._screenshotQueue){if(null==this._rctx){r.resolver.reject();continue}const a={...r.settings,pixelRatio:r.settings.pixelRatio*e.parameters.camera.pixelRatio},s=this._renderScreenshot(e,a,t);r.resolver(s)}this._screenshotQueue.length=0}_renderScreenshotOverlay(e,t,r){e.width=t.width,e.height=t.height;const s=e.getContext("2d"),n=r.pixelRatio;return s.save(),s.translate(0,t.height),s.scale(1,-1),r.region&&s.translate(-r.region.x,-r.region.y),s.scale(n,n),t=this._renderFunctions.renderOverlay(e,r.disableDecorations?a.Decorations.OFF:a.Decorations.ON,t),s.restore(),t}_readbackScreenshot(e,t){return e.resample?this._readbackScreenshotResampled({...e,resample:e.resample},t):this._readbackScreenshotImmediate(e,t)}_readbackScreenshotResampled(e,t){const{framebufferWidth:r,framebufferHeight:a,region:s,resample:n}=e,c=this._ensureScreenshotEncodeCanvas();let l=h.createEmptyImageData(r,a,c);this._rctx.gl.readPixels(0,0,r,a,o.PixelFormat.RGBA,o.DataType.UNSIGNED_BYTE,new Uint8Array(l.data.buffer)),t(),l=this._renderScreenshotOverlay(c,l,{...e,region:void 0});const d=h.createEmptyImageData(s.width,s.height,c);return i.resampleHermite(l,d,!0,n.region.x,a-(n.region.y+n.region.height),n.region.width,n.region.height)}_readbackScreenshotImmediate(e,t){const{framebufferHeight:r,region:a}=e,s=this._ensureScreenshotEncodeCanvas(),n=h.createEmptyImageData(a.width,a.height,s);return this._rctx.gl.readPixels(a.x,r-(a.y+a.height),a.width,a.height,o.PixelFormat.RGBA,o.DataType.UNSIGNED_BYTE,new Uint8Array(n.data.buffer)),t(),this._renderScreenshotOverlay(s,n,e)}_renderScreenshot(e,t,i){const o=e.parameters.camera,h={width:t.framebufferWidth,height:t.framebufferHeight};c.ensureAttachmentMaxSize(h,Math.min(this._rctx.parameters.maxTextureSize,this._rctx.parameters.maxRenderbufferSize));let l=!1;const d=t.disableDecorations&&e.frameHasDecorations,f=h.width!==o.fullWidth||h.height!==o.fullHeight,u=t.ignorePadding&&o.pixelRatio!==t.pixelRatio,m=f||d||u||t.objectAndLayerIdColor;let g=null,b=null;if(m){const e=o.clone();if(t.ignorePadding){const a=r.clone(e.padding);for(let r=0;r<4;r++)a[r]=Math.round(a[r]/e.pixelRatio*t.pixelRatio);e.padding=a}e.fullWidth=h.width,e.fullHeight=h.height,e.pixelRatio=t.pixelRatio;const c=o.fovX-e.fovX,d=o.fovY-e.fovY;c<0&&c<d?e.fovX=o.fovX:d<0&&d<c&&(e.fovY=o.fovY);const f={camera:e,contentCamera:e,mode:n.RenderState.IDLE,alignPixelEnabled:!0,contentPixelRatio:e.pixelRatio};this._forceCameraHook(f),l=!0;const u=this._renderFunctions.renderScene(f,i,t.objectAndLayerIdColor?s.RendererTarget.ObjectAndLayerID:s.RendererTarget.Screenshot,t.disableDecorations?a.Decorations.OFF:a.Decorations.ON);b=u.screen,g=u.oid}const p=()=>{this._rctx.bindFramebuffer(null),b?.release()};this._rctx.bindFramebuffer(b?.fbo);const _=this._readbackScreenshot(t,p);let x=null;if(t.objectAndLayerIdColor){const e=()=>{this._rctx.bindFramebuffer(null),g?.release()};this._rctx.bindFramebuffer(g?.fbo),x=this._readbackScreenshot(t,e),this._rctx.bindFramebuffer(null)}if(m&&!this._rctx.contextAttributes.alpha)for(let r=3;r<_.data.length;r+=4)_.data[r]=255;if(x&&!this._rctx.contextAttributes.alpha)for(let r=3;r<x.data.length;r+=4)x.data[r]=255;return l&&this._forceCameraHook(e.parameters),[_,x]}_ensureScreenshotEncodeCanvas(){return this._screenshotEncodeCanvas||(this._screenshotEncodeCanvas=document.createElement("canvas")),this._screenshotEncodeCanvas}}e.ScreenshotContext=l,e.ScreenshotManager=d,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
