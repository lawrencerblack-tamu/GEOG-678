/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../../core/has","../../../../core/screenUtils","../../../../chunks/rbush","../../../../geometry/support/aaBoundingRect","../../../../geometry/support/boundsUtils","../../../../geometry/support/normalizeUtils","../../../../geometry/support/spatialReferenceUtils","../../../../symbols/cim/CIMSymbolDrawHelper","../../../../symbols/cim/CIMSymbolHelper","./GraphicStoreItem","./graphicsUtils","./GraphicUpdateMessage"],(function(e,t,s,i,o,r,n,a,l,c,h,u){"use strict";const m=1e-5;function d(e,t){return t.zOrder-e.zOrder}class p{constructor(e,t,s,i,o){this._items=new Map,this._boundsDirty=!1,this._outSpatialReference=e,this._cimResourceManager=t,this._hittestDrawHelper=new a.HittestDrawHelper(t),this._tileInfoView=s,this._store=o;const r=s.getClosestInfoForScale(i);this._resolution=this._tileInfoView.getTileResolution(r.level)}items(){return this._items.values()}getItem(e){return this._items.get(e)}async update(e,t,s){const i=[],o=[],r=[],n=new Set,a=[];let l=0;for(const h of e.items){l++;const e=h.uid,r=this._items.get(e),u=t(h);if(n.add(e),r){r.update(h,u,l)&&(o.push(r),a.push(this._updateItem(r,s)));continue}const m=this._store.createDisplayIdForObjectId(e),d=c.GraphicStoreItem.fromGraphic(h,u,l,m);a.push(this._updateItem(d,s)),this._items.set(d.objectId,d),i.push(d)}for(const[c,h]of this._items.entries())n.has(c)||(this._store.releaseDisplayIdForObjectId(c),this._items.delete(c),r.push(h));return await Promise.all(a),this._index=null,new u.GraphicUpdateMessage(i,o,r)}updateLevel(e){this._resolution!==e&&(this._index=null,this._boundsDirty=!0,this._resolution=e)}hitTest(t,s,o,n,a){const l=e("esri-mobile"),c=e(l?"hittest-2d-mobile-tolerance":"hittest-2d-desktop-tolerance"),u=c+(l?0:e("hittest-2d-small-symbol-tolerance"));t=r.normalizeMapX(t,this._tileInfoView.spatialReference);const m=n*window.devicePixelRatio*u,p=i.create();p[0]=t-m,p[1]=s-m,p[2]=t+m,p[3]=s+m;const _=n*window.devicePixelRatio*c,f=i.create();f[0]=t-_,f[1]=s-_,f[2]=t+_,f[3]=s+_;const b=.5*n*(u+h.pixelBuffer),y=this._searchIndex(t-b,s-b,t+b,s+b);if(!y||0===y.length)return[];const I=[],x=i.create(),g=i.create();for(const e of y){if(!e.visible)continue;const{projectedGeometry:t,symbolResource:s}=e;this._getSymbolBounds(x,s,t,g,a),g[3]=g[2]=g[1]=g[0]=0,i.intersects(x,p)&&I.push(e)}if(0===I.length)return[];const S=this._hittestDrawHelper,w=[];for(const e of I){const{projectedGeometry:t,symbolResource:s}=e;if(!s)continue;const{textInfo:i,symbolInfo:o}=s,r=o.cimSymbol;S.hitTest(f,r.symbol,t,i,a,n)&&w.push(e)}return w.sort(d),w.map((e=>e.objectId))}queryItems(e){return 0===this._items.size?[]:this._searchForItems(e)}clear(){this._items.clear(),this._index=null}async _updateItem(e,t){await e.projectAndNormalize(this._outSpatialReference),await t(e);const{size:s}=e;s[0]=s[1]=s[2]=s[3]=0,this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0)}_searchIndex(e,t,i,o){return this._boundsDirty&&(this._items.forEach((e=>this._getSymbolBounds(e.bounds,e.symbolResource,e.projectedGeometry,e.size,0))),this._boundsDirty=!1),this._index||(this._index=s.rbush(9,(e=>({minX:e.bounds[0],minY:e.bounds[1],maxX:e.bounds[2],maxY:e.bounds[3]}))),this._index.load(Array.from(this._items.values()))),this._index.search({minX:e,minY:t,maxX:i,maxY:o})}_searchForItems(e){const t=this._tileInfoView.spatialReference,s=e.bounds,o=n.getInfo(t);if(o&&t.isWrappable){const[t,r]=o.valid,n=Math.abs(s[2]-r)<m,a=Math.abs(s[0]-t)<m;if((!n||!a)&&(n||a)){const o=e.resolution;let a;a=n?i.create([t,s[1],t+o*h.pixelBuffer,s[3]]):i.create([r-o*h.pixelBuffer,s[1],r,s[3]]);const l=this._searchIndex(s[0],s[1],s[2],s[3]),c=this._searchIndex(a[0],a[1],a[2],a[3]);return[...new Set([...l,...c])]}}return this._searchIndex(s[0],s[1],s[2],s[3])}_getSymbolBounds(e,s,r,n,a){if(!s||!s.symbolInfo.linearCIM||!r)return null;if(e||(e=i.create()),o.getBoundsXY(e,r),!n||0===n[0]&&0===n[1]&&0===n[2]&&0===n[3]){const{textInfo:e,symbolInfo:i}=s,o=i.cimSymbol;n||(n=[0,0,0,0]);const r=l.CIMSymbolInflatedSizeHelper.getSymbolInflateSize(n,o.symbol,this._cimResourceManager,a,e);n[0]=t.pt2px(r[0]),n[1]=t.pt2px(r[1]),n[2]=t.pt2px(r[2]),n[3]=t.pt2px(r[3])}const c=this._resolution,h=l.CIMSymbolInflatedSizeHelper.safeSize(n);return e[0]-=h*c,e[1]-=h*c,e[2]+=h*c,e[3]+=h*c,e}}return p}));
