/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../../core/Error","../../../../core/handleUtils","../../../../core/has","../../../../core/nextTick","../../../../core/promiseUtils","../../../../core/RandomLCG","../../../../core/reactiveUtils","../../../../core/screenUtils","../../../../layers/support/TileInfo","../../tiling/TileInfoView","../../tiling/TileKey","../../tiling/TileQueue","../../tiling/TileStrategy","../../engine/webgl/definitions","./PipelineConnectionHandlers","./Processor","./sources/FeatureSource","./sources/FeatureTileSubscription","./support/Tile"],(function(e,t,s,i,r,n,o,u,a,c,d,p,h,l,g,_,b,f,S){"use strict";class y{constructor(e){this.edit=e,this.resolver=r.createResolver()}}class w{constructor(e,t){this.schema=e,this.version=t,this.resolver=r.createResolver()}}class m{constructor(){this._aggregateAdapter={getFeatureObjectIds:e=>this._processor.getFeatureObjectIdsForAggregate(e)},this._subscriptions=new Map,this._updateRequested=!1,this._updateSubscriptionRequests=[],this._updateHighlightRequests=[]}destroy(){this._subscriptions.clear(),this._processor.destroy(),this._source.destroy(),this._handles.remove(),this._editState=null,this._tileInfoView=null}onDetach(){this.destroy(),this._initialize(this._connection)}_initialize(e){this._source=new b.FeatureSource(this._aggregateAdapter,this._subscriptions,(()=>this._requestUpdate()),e),this._processor=new _(e,this._source),this._handles=t.handlesGroup([o.watch((()=>this._source.updateTracking.updating),(()=>{this._requestUpdate(),this._connection.layerView.setUpdating({data:this._source.updateTracking.updating,pipeline:!0})}))])}set remoteClient(e){this._connection=new g.PipelineConnectionHandlers(e),this._initialize(this._connection)}get features(){const t=this._source.queryEngine;if(!t)throw new e("no-queryEngine","No query engine defined");return t}get aggregates(){const t=this._processor.aggregateQueryEngine;if(!t)throw new e("no-queryEngine","No aggregate query engine defined");return t}get processor(){return this._processor}get streamMessenger(){return this._source.streamMessenger}getDisplayFeatures(e){return this._processor.getDisplayFeatures(e)}async updateSchema(e,t){return s("esri-2d-update-debug")&&this._updateSchemaState&&console.error("InternalError: Schema already updating"),this._updateSchemaState=new w(e,t),this._requestUpdate(),this._updateSchemaState.resolver.promise}updateSubscriptions(e){this._updateSubscriptionRequests.push(e),this._requestUpdate()}updateHighlight(e){this._updateHighlightRequests.push(e),this._requestUpdate()}async onEdits(t){if(null!=this._editState)throw new e("InternalError - Already processing an edit");this._editState=new y(t);const s=this._editState.resolver.promise;return this._requestUpdate(),s}queryStatistics(){return this._source.statistics.toJSON()}async queryVisibleFeatures(e,t){return this.features.executeQuery(e,t)}async queryHeatmapStatistics(e){const t=Math.round(u.pt2px(e.radius));let s=Number.POSITIVE_INFINITY,i=Number.NEGATIVE_INFINITY;const r="string"==typeof e.fieldOffset,n=e.fieldOffset??0,o=Array.from(this._subscriptions.values()),a=this._source.chunks(),c=t**2,d=3/(Math.PI*c),p=2*t,h=Math.ceil(l.tileSize/p);for(const u of o){const t=u.tile,o=new Float64Array(h*h);for(const s of a){const i=s.getTileReader(t);if(!i)continue;const u=i.getCursor();for(;u.next();){let t=1;if(null!=e.field){const s=u.readAttribute(e.field);t=r?-1*+s:+s+n}const s=u.readXForDisplay()/p,i=u.readYForDisplay()/p,a=Math.floor(s),l=Math.floor(i);if(a<0||l<0||a>=h||l>=h)continue;const g=((.5+a-s)*p)**2+((.5+l-i)*p)**2;if(g>c)continue;const _=t*(d*(1-g/c)**2);o[l+a*h]+=_}}for(let e=0;e<o.length;e++)s=Math.min(s,o[e]),i=Math.max(i,o[e])}return{max:i,min:s}}async getSampleFeatures(e){const t=this._source.chunks();if(t.reduce(((e,t)=>e+t.size()),0)<=e.minFeatureCount){if(!this._source.updateTracking.updating){const e=[];return this._source.store.forEachUnsafe((t=>e.push(t.readLegacyFeatureWorldSpace()))),e}return null}const s=new Set,i=[],r=t.map((e=>e.reader.getCursor())),o=new n,u=3*e.sampleSize;for(let n=0;n<u&&i.length<e.sampleSize;n++){const e=r[o.getIntRange(0,t.length-1)];if(0===e.getSize())continue;const n=o.getIntRange(0,e.getSize()-1);e.setIndex(n);const u=e.getObjectId();s.has(u)||(s.add(u),i.push(e.readLegacyFeatureWorldSpace()))}return i.length>=e.sampleSize?i:null}_requestUpdate(){this._updateRequested||(this._updateRequested=!0,i.nextTick((()=>this._scheduleNextUpdate())))}_scheduleNextUpdate(){this._updateRequested&&(this._ongoingUpdate||(this._ongoingUpdate=this._doUpdate().finally((()=>{this._ongoingUpdate=null,this._scheduleNextUpdate()})),this._updateRequested=!1))}_subscribe(e){const t=e.tileId;if(this._subscriptions.has(t)){const i=this._subscriptions.get(t);return void(i.paused&&(s("esri-2d-update-debug")&&console.debug(`Tile[${t}] Pipeline.resume`),i.resume(),i.version=e.version,this._source.onResume(i)))}s("esri-2d-update-debug")&&console.debug(`Tile[${t}] Pipeline.subscribe`);const i=new S.Tile(this._tileInfoView,t),r=new f.FeatureTileSubscription(i,e.version);this._subscriptions.set(t,r),this._source.onSubscribe(r),this._processor.onSubscribe(r)}_unsubscribe(e){const t=this._subscriptions.get(e);t&&(s("esri-2d-update-debug")&&console.debug(`Tile[${e}] Pipeline.unsubscribe`),this._source.onUnsubscribe(t),this._processor.onUnsubscribe(t),this._subscriptions.delete(t.key.id),t.destroy())}_pauseSubscription(e){const t=this._subscriptions.get(e);t&&(s("esri-2d-update-debug")&&console.debug(`Tile[${e}] Pipeline.pause`),t.pause())}async _doUpdate(){if(s("esri-2d-update-debug")&&console.debug("Pipeline._doUpdateStart"),await this._connection.layerView.setUpdating({data:this._source.updateTracking.updating,pipeline:!0}),this._updateSubscriptionRequests.length){const e=this._updateSubscriptionRequests;this._updateSubscriptionRequests=[];for(const t of e)this._doUpdateSubscriptions(t)}const e=this._updateSchemaState;if(this._updateSchemaState=null,null!=e){const{schema:t,version:s}=e;await this._doUpdateSchema(t,s)}const t=this._editState;if(this._editState=null,null!=t){s("esri-2d-update-debug")&&console.debug("Pipeline.applyEditOverride",t.edit);const e=await this._source.getOverride(t.edit);await this._processor.applyOverride(e),s("esri-2d-update-debug")&&console.debug("Pipeline.endEditOverride",t.edit)}if(this._updateHighlightRequests.length){const e=this._updateHighlightRequests;this._updateHighlightRequests=[];for(const t of e)this._processor.updateHighlight(t)}const i=this._source.cleanupRemovedChunks();this._processor.removeChunks(i);try{this._subscriptions.size&&(s("esri-2d-update-debug")&&console.debug("Pipeline.updateChunksStart"),await this._processor.updateChunks(),s("esri-2d-update-debug")&&console.debug("Pipeline.updateChunksEnd"))}catch(n){r.throwIfNotAbortError(n)}null!=t&&t.resolver.resolve(),null!=e&&e.resolver.resolve(),this._updateRequested?(s("esri-2d-update-debug")&&console.debug("Pipeline._doUpdateEnd [updateRequested=true]"),await this._connection.layerView.setUpdating({data:this._source.updateTracking.updating,pipeline:!0})):(s("esri-2d-update-debug")&&console.debug("Pipeline._doUpdateEnd [updateRequested=false, After flush]"),await this._connection.layerView.setUpdating({data:this._source.updateTracking.updating,pipeline:this._updateRequested}))}async _doUpdateSchema(e,t){if(s("esri-2d-update-debug")&&console.debug(`Version[${t}] Pipeline.updateStart`,{schema:e}),!this._tileInfoView){const t=a.fromJSON(e.source.tileInfoJSON);this._tileInfoView=new c(t)}const i={tileInfo:this._tileInfoView?.tileInfo};try{const s=await this._source.update(e,t),r=Array.from(this._subscriptions.values());await this._processor.update(e,t,i,s,r)}catch(r){console.error(r)}s("esri-2d-update-debug")&&console.debug(`Version[${t}] Pipeline.updateEnd`)}_doUpdateSubscriptions(e){if(s("esri-2d-update-debug")&&console.debug("Pipeline.updateSubscriptions",e),!this._tileInfoView){const t=a.fromJSON(e.tileInfoJSON);this._tileInfoView=new c(t)}for(const t of e.subscribe)this._subscribe(t);for(const t of e.unsubscribe)this._unsubscribe(t);if(s("featurelayer-query-pausing-enabled"))for(const t of e.pause)this._pauseSubscription(t)}}return m}));
