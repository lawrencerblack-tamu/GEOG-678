/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../../core/has","../../../../core/maybe","../../../../core/promiseUtils","../../../../core/accessorSupport/diffUtils","../../../../geometry/SpatialReference","../../engine/webgl/mesh/MultiTileMeshData","../../engine/webgl/mesh/factories/FeatureMeshFactory","../../engine/webgl/mesh/factories/ResourceProxy","./ProcessorTileMessageQueue","./processor/BinningStrategy","./processor/ClusterStrategy","./processor/FeatureUpdateStrategy","./support/AttributeStore","./support/ComputedAttributeStorage"],(function(e,t,s,r,i,a,o,n,c,h,u,g,d,y){"use strict";class _{constructor(e,t){this._connection=e,this._source=t,this._version=1,this._proxy=new n.ResourceProxy({fetch:(e,t)=>this._connection.layerView.fetch(e,t),fetchDictionary:(e,t)=>this._connection.layerView.fetchDictionary(e,t)}),this._attributeStore=new d.AttributeStore({isLocal:!1,update:e=>s.ignoreAbortErrors(this._connection.container.updateAttributeView(e))})}destroy(){this._proxy.destory(),this._strategy?.destroy(),this._attributeStore.destroy()}get aggregateQueryEngine(){return this._strategy?.aggregateQueryEngine}getDisplayFeatures(e){return this._strategy?this._strategy.getDisplayFeatures(e):{features:[],aggregates:[]}}getFeatureObjectIdsForAggregate(e){return this._strategy?this._strategy.getFeatureObjectIdsForAggregate(e):[]}onSubscribe(e){this._strategy?.onSubscribe(e)}onUnsubscribe(e){this._strategy?.onUnsubscribe(e)}async update(t,s,a,n,c){const h=t.processor,u=r.diff(this._schema,h);if(!u&&!n)return;e("esri-2d-update-debug")&&console.debug(`Version[${this._version}] SymbolProcessor.update`,{changes:u,schema:h}),this._schema=h;const g=i.fromJSON(t.source.mutable.dataFilter.outSpatialReference),d=new y.ComputedAttributeStorage({fields:this._source.metadata.fieldsIndex,spatialReference:g});return await this._attributeStore.update(h.storage,d,this._source.metadata,g,s),this._strategy?.invalidateAttributeData(),n||r.hasDiff(u,"mesh")?(r.hasDiff(u,"mesh.strategy")&&await this._updateStrategy(h.mesh.strategy,g,c,h.mesh.timeZone),this._updateSortKey(d,"sortKey"in h.mesh?h.mesh.sortKey:null),(r.hasDiff(u,"mesh.factory")||"dictionary"===h.mesh.factory.symbology.type)&&(this._factory=await o.FeatureMeshFactory.create(d,this._proxy,h.mesh.factory,a)),this._invalidate(),this._version=s,this._connection.container.updateRenderState(this._version)):void 0}async applyOverride(e){if(!this._strategy)return;const t=this._strategy.applyOverride(e);for await(const r of t)try{await this._process(r)}catch(s){}this._source.applyOverride(e)}async updateChunks(){await this._doUpdateChunks(),this._strategy?.afterUpdateChunks()}async removeChunks(e){this._strategy?.removeChunks(e),this._attributeStore.incrementDisplayIdGeneration()}updateHighlight({highlights:e}){if(!this._strategy)return void this._attributeStore.setHighlight(e.map((({objectId:e,highlightFlags:t})=>({objectId:e,highlightFlags:t,displayId:-1}))),e);const t=this._strategy.displayMap(e,(({objectId:e})=>e),((e,{highlightFlags:t},s)=>({objectId:s,displayId:e,highlightFlags:t})));this._attributeStore.setHighlight(t,e)}async _doUpdateChunks(){if(!this._strategy)return;const t=this._strategy.updateChunks(),r=[],i=new Map;for await(const e of t){let t=i.get(e.id);null==t&&(t=new c.ProcessorTileMessageQueue({concurrency:16,process:e=>this._process(e)}),i.set(e.id,t));const a=t.push(e).catch((e=>s.throwIfNotAbortError(e)));r.push(a)}try{await Promise.all(r)}catch(a){}e("esri-2d-update-debug")&&console.log("SendUpdates"),await this._attributeStore.sendUpdates(),e("esri-2d-update-debug")&&console.log("SendUpdates.await")}async _updateStrategy(e,t,s,r){switch(this._strategy?.destroy(),e.type){case"feature":this._strategy=new g.FeatureUpdateStrategy(this._source,this._attributeStore,r);break;case"binning":this._strategy=await h.BinningStrategy.create(e,t,this._source,this._attributeStore,r);break;case"cluster":this._strategy=await u.ClusterStrategy.create(this._connection,e,t,this._source,this._attributeStore,r)}for(const i of s)this._strategy.onSubscribe(i)}async _updateSortKey(e,s){if(this._sortInfo=t.destroyMaybe(this._sortInfo?.computed),null!=s){const t=s.byRenderer?null:await e.createComputedField(s);this._sortInfo={...s,computed:t}}}_invalidate(){this._strategy&&this._strategy.invalidate()}async _process(t){const r=t.subscription;if(e("esri-2d-update-debug")){const e=r.tile;console.debug(`Version[${this._version}] Tile[${e.key.id}, end=${t.end}] Processor._process`)}await this._fetchResources(t),s.throwIfAborted(r.signal);const i=await this._write(t,r.tile.createArcadeEvaluationOptions(this._schema.mesh.timeZone)),a=r.tile.tileInfoView.tileInfo.isWrappable,{message:o,transferList:n}=i.serialize(a),c=t.createMessage(o,this._version,this._attributeStore.epoch);if(s.throwIfAborted(r.signal),this._connection.container.onMessage(c,{signal:r.signal,transferList:n}),this._attributeStore.sendUpdates(),e("esri-2d-update-debug")){const e=r.tile;console.debug(`Version[${this._version}] Tile[${e.key.id}, end=${t.end}] Processor._process.await`)}}async _fetchResources(e){await this._fetchMatcherResources(e),await this._fetchWriterResources(e)}async _fetchMatcherResources(e){if(e.reader)return this._factory.enqueueMatcherRequests(this._proxy,e.reader)}async _fetchWriterResources(e){if(!e.reader)return;const t=e.reader.getCursor(),s=e.subscription.tile.createArcadeEvaluationOptions(this._schema.mesh.timeZone);for(;t.next();)this._factory.enqueueWriterRequests(this._proxy,t,s);await this._proxy.fetchEnqueuedResources()}async _write(e,t){const s=e.subscription.tile,r=e.reader?.getCursor(),i=r?.getSize()??0,o=s.tileInfoView.tileInfo.isWrappable,n=new a.MultiTileMeshData(s.key,this._strategy.enablePixelBuffering,o,i);if(!r)return n;const c=s.createArcadeEvaluationOptions(this._schema.mesh.timeZone);for(;r.next();){const e=this._getSortKeyValue(r,t);n.entityStart(r.getDisplayId(),e),this._factory.write(n,this._proxy,r,c,s.level),n.entityEnd()}return n}_getSortKeyValue(e,t){if(!this._sortInfo)return 0;const{computed:s,order:r,byRenderer:i}=this._sortInfo,a=i?this._factory.getSortKey(e,t):s?.read(e,t);return null==a||isNaN(a)?0:a*("asc"===r?-1:1)}}return _}));
