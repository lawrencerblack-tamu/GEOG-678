/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../../core/Error","../../../../../../rest/support/Query","./ALoadStrategy","./support/queryAdapters","../../support/FeatureSetReaderJSON","../../../../../support/QueueProcessor"],(function(e,t,r,s,o,n,a){"use strict";class u extends s.ALoadStrategy{constructor(e,t,r,s,n){super(r),this._serviceInfo=e,this._queryInfo=t,this._metadata=s,this._eventLog=n,this._queue=new a.QueueProcessor({concurrency:16,process:async e=>{const t={signal:e.options?.signal,query:e.query.customParameters};return this._adapter.executeQuery(e.query.inner,t)}}),this._adapter=o.createQueryAdapter(e,s)}async updateFields(e){this._queryInfo.updateFields(e);const s=Array.from(this._store.chunks()).map((async e=>{const t=r.fromJSON(e.queryInfo.queryJSON);if(t)try{return await this._tryUpdateFields(e.reader,t),null}catch(s){return s}})),o=(await Promise.all(s)).filter((e=>e));if(o.length)throw new t("featurelayer-query","Encountered errors when downloading fields",{errors:o})}async queryOverride({edits:e}){const t=[],r=[];for(const n of e.removed)null!=n.objectId&&-1!==n.objectId?t.push(n.objectId):r.push(n.globalId);r.length&&t.push(...this._mapGlobalIdsToObjectIds(r));const s=e.addOrModified.map((({objectId:e})=>e));let o;if(s.length){const e=this._queryInfo.createQuery({objectIds:s});o=await this._fetch(e)}else o=n.FeatureSetReaderJSON.empty(this._metadata);return{reader:o,removed:t}}_mapGlobalIdsToObjectIds(e){const t=new Set(e),r=this._metadata.globalIdField;if(null==r)throw new Error("InternalError: Recieved an edit with globalIds, but not supported by the service");const s=[];return this._store.forEachUnsafe((e=>{const o=e.readAttribute(r);t.has(o)&&s.push(e.getObjectId())})),s}async _fetch(e,t){const r=await this._enqueue(e,t);return await this._tryUpdateFields(r,e.inner),r}async _tryUpdateFields(e,t){const r=this._queryInfo.createPatchFieldsQuery(t,e);if(!r)return;const s=await this._enqueue(r,this._options);e.joinAttributes(s)}async _enqueue(e,t){return this._eventLog.onEvent({type:"fetchStart"}),this._queue.push({query:e,options:t}).finally((()=>{this._eventLog.onEvent({type:"fetchEnd",done:0===this._queue.length})}))}}e.AFetchLoadStrategy=u,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
