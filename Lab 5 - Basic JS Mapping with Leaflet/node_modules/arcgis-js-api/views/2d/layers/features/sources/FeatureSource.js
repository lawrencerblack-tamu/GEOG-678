/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../request","../../../../../core/has","../../../../../core/promiseUtils","../../../../../core/accessorSupport/diffUtils","../../../../../layers/graphics/data/QueryEngine","../../../../../rest/query/operations/query","../FeatureStoreStatistics","./FeatureSourceQueryInfo","./StreamMessenger","./strategies/DrillDownTileLoadStrategy","./strategies/PagedTileLoadStrategy","./strategies/SnapshotLoadStrategy","./strategies/StreamLoadStrategy","./strategies/chunks/SourceChunkStore","../support/FeatureMetadata","../../support/UpdateTracking2D"],(function(e,t,s,a,r,i,n,o,h,u,d,c,g,l,_,y,p){"use strict";class m{constructor(e,t,s,a){this._aggregateAdapter=e,this._subscriptions=t,this._onChange=s,this._connection=a,this._updateTracking=new p.UpdateTracking2D({debugName:"FeatureSource"}),this._didInvalidateData=!1,this._store=new _.FeatureSourceChunkStore(this._onChange)}destroy(){this._strategy?.destroy(),this._store.destroy(),this._streamMessenger?.destroy()}get _eventLog(){return this._connection.eventLog}get metadata(){if(!this._metadata)throw new Error("InternalError: Metadata not defined. Was update called?");return this._metadata}get service(){return this._schema.service}get store(){return this._store}get streamMessenger(){return null==this._streamMessenger&&this._initStreamMessenger(),this._streamMessenger}get statistics(){return o.FeatureStoreStatistics.from(this._store)}get updateTracking(){return this._updateTracking}get queryEngine(){if(!this._queryEngine){if(!this._schema)return null;const{dataFilter:e}=this._schema.mutable,t=this._schema.mutable.availableFields,s=this._metadata;this._queryEngine=new i.QueryEngine({featureStore:this._store,fieldsIndex:s.fieldsIndex,geometryType:s.geometryType,objectIdField:s.objectIdField,hasM:!1,hasZ:!1,spatialReference:e.outSpatialReference,cacheSpatialQueries:!0,aggregateAdapter:this._aggregateAdapter,timeInfo:s.timeInfo,definitionExpression:e.definitionExpression,availableFields:t})}return this._queryEngine}get isStream(){return"stream"===this._schema.type}chunks(){return Array.from(this._store.chunks())}cleanupRemovedChunks(){return this._store.cleanupRemovedChunks()}onSubscribe(e){this._eventLog.onEvent({type:"subscribe",tile:e.tile.id});const t=this._strategy?.load(e);t&&(t.then((()=>this._eventLog.onEvent({type:"loaded",tile:e.tile.id}))).catch((t=>this._eventLog.onEvent({type:"error",tile:e.tile.id,error:t}))),this._updateTracking.addPromise(t))}onResume(e){this._updateTracking.addPromise(a.ignoreAbortErrors(this._strategy?.load(e)))}onUnsubscribe(e){this._eventLog.onEvent({type:"unsubscribe",tile:e.tile.id}),this._strategy?.unload(e)}getOverride(e){return this._updateTracking.addPromise(this._doGetOverride(e))}applyOverride(e){this._didInvalidateData=!0,this._store.applyOverrides(e,this.metadata)}async update(e,t){const a=e.source,i=r.diff(this._schema?.mutable,a.mutable);if(!i)return!1;if(s("esri-2d-update-debug")&&console.debug(`Version[${t}] FeatureSource.update`,{changes:i}),this._schema=a,this._metadata=new y.FeatureMetadata(this._schema.service.metadata),this._queryEngine?.destroy(),this._queryEngine=null,"feature"===this._schema.type&&null!=this._schema.service.queryMetadata.lastEditDate&&(this._lastEditDate=this._schema.service.queryMetadata.lastEditDate),null==this._streamMessenger&&"stream"===this._schema.type&&this._initStreamMessenger(),r.hasRootDiffOnly(i,"sourceRefreshVersion")&&this._strategy?.refresh)return await this._strategy.refresh(),!0;if("feature"===a.type&&r.hasRootDiffOnly(i,"availableFields")){if(await this._queryLastEditDateChanged()||this._didInvalidateData)this._didInvalidateData=!1,await this._updateStrategy(t);else{this._eventLog.onEvent({type:"updateFieldsStart"});try{await this._strategy.updateFields(a.mutable.availableFields),this._eventLog.onEvent({type:"updateFieldsEnd"})}catch(n){this._eventLog.onEvent({type:"updateFieldsError",error:n})}}return!1}return!(!r.hasRootDiff(i,"dataFilter")&&!r.hasRootDiff(i,"sourceRefreshVersion"))&&(await this._updateStrategy(t),!0)}_initStreamMessenger(){null==this._streamMessenger&&(this._streamMessenger=new u.StreamMessenger(this._connection))}async _doGetOverride(e){return this._strategy.queryOverride(e)}async _queryLastEditDateChanged(){if(null==this._lastEditDate)return!1;const e=this._schema.service.source,s={...e.query,f:"json"},a=(await t(e.path,{query:s,responseType:"json"})).data.editingInfo.lastEditDate;return a!==this._lastEditDate&&(this._lastEditDate=a,!0)}async _createStrategy(){const e=this.service,t="isSourceHosted"in e&&e.isSourceHosted,s=Array.isArray(e.source),a=e.source&&"collection"in e.source,r=t||s||a;if("stream"===this._schema.type){const e=new l.StreamLoadStrategy(this._schema.service,this._schema.mutable.dataFilter,this._store,{outSR:this._schema.mutable.dataFilter.outSpatialReference},this.metadata);return this._streamMessenger.strategy=e,e}const i=h.FeatureSourceQueryInfo.fromSchema(this._schema,this._metadata),n=await this._supportSnapshotMode(this._schema,i);return n?new g.SnapshotLoadStrategy(this._schema.service,i,this._store,n.featureCount,this.metadata,this._eventLog):r?new c.PagedTileLoadStrategy(this._schema.service,i,this._store,this.metadata,this._eventLog):new d.DrillDownTileLoadStrategy(this._schema.service,i,this._store,this.metadata,this._eventLog)}async _updateStrategy(e){const t=await this._createStrategy();this._eventLog.onEvent({type:"updateStrategyStart",about:t.about});const r=!!this._strategy;this._store.clear(),this._strategy?.destroy(),this._strategy=t,s("esri-2d-update-debug")&&console.debug(`Version[${e}] FeatureSource.updateStrategy`,{strategy:t});const i=Array.from(this._subscriptions.values());if(!i.length)return void this._eventLog.onEvent({type:"updateStrategyEnd"});const n=Promise.all(i.map((e=>this._strategy.load(e).then((()=>this._eventLog.onEvent({type:"loaded",tile:e.tile.id}))).catch((t=>this._eventLog.onEvent({type:"error",tile:e.tile.id,error:t}))))));this._updateTracking.addPromise(n);try{r&&await n}catch(o){a.throwIfNotAbortError(o)}this._eventLog.onEvent({type:"updateStrategyEnd"}),s("esri-2d-update-debug")&&console.debug(`Version[${e}] FeatureSource.updateStrategyEnd`,{strategy:t})}async _supportSnapshotMode(e,t){const{queryMetadata:s}=e.service,a=s.snapshotInfo;if(!a||!a.supportsSnapshotMinThreshold||!a.snapshotCountThresholds)return null;const r=e.service.source,i=t.createQuery();i.inner.orderByFields=[],i.inner.returnGeometry=!1;const o=(await n.executeQueryForCount(r,i.inner,{query:i.customParameters})).data.count,{min:h,max:u}=a.snapshotCountThresholds;return o<=h||a.supportsSnapshotMaxThreshold&&o<u?{featureCount:o}:null}}e.FeatureSource=m,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
