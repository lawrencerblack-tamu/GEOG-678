/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../core/has","../../../../core/maybe","./cpuMapped/FreeList"],(function(t,e,r,s){"use strict";const a=e("esri-2d-log-allocations");class i{static create(t,e){const r=e.acquireUint32Array(t);return new i(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class n{constructor(){this._data=new ArrayBuffer(n.BYTE_LENGTH),this._freeList=new s.FreeList({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class o{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*n.BYTE_LENGTH}acquireUint32Array(t){if(this._bytesAllocated+=t,a&&console.log(`Allocating ${t}, (${this._bytesAllocated} / ${this._bytesTotal})`),t>=n.BYTE_LENGTH)return new Uint32Array(t/Uint32Array.BYTES_PER_ELEMENT);for(const r of this._pages){const e=r.acquireUint32Array(t);if(null!=e)return e}const e=this._addPage().acquireUint32Array(t);return r.assertIsSome(e,"Expected to allocate page"),e}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,a&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new n;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}t.ArrayBufferPool=o,t.PooledUint32Array=i,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
