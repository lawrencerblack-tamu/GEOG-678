/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../../../../core/string","./TechniqueInstance","./mesh/instanceIdUtils"],(function(t,n,e){"use strict";class s{constructor(){this._instanceById=new Map}destroy(){this._instanceById.clear()}get size(){return this._instanceById.size}updateStart(){this._instanceByIdNext=new Map}updateEnd(){if(!this._instanceByIdNext)throw new Error("InternalError: Found updateEnd call without corresponding updateStart");for(const t of this._instanceById.keys())this._instanceByIdNext.has(t)||this._instanceById.delete(t);for(const[t,n]of this._instanceByIdNext.entries()){const e=this._instanceById.get(t);e?e.setInput(n.getInput()):this._instanceById.set(t,n)}this._instanceByIdNext=null}values(){return this._instanceById.values()}ensureInstance(s,i,c){let a=`${s.registryName}`;for(const t in i){const n=i[t];if("object"==typeof n&&"geometry"===t)for(const e in n)a+=`.${t}.${e}.${null!=n[e]}`;else a+=`.${t}.${null!=i[t]}`}if(null!=c)for(const t in c)c[t]&&(a+=`-${t}`);const r=t.numericHash(a);if(this._instanceByIdNext){const t=new n.TechniqueInstance(e.castInstanceId(r),s,s.meshWriter.name,i,c);return this._instanceByIdNext.set(r,t),t}if(!this._instanceById.has(r)){const t=new n.TechniqueInstance(e.castInstanceId(r),s,s.meshWriter.name,i,c);this._instanceById.set(r,t)}return this._instanceById.get(r)}getInstance(t){return this._instanceById.get(t)}}return s}));
