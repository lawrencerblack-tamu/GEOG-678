/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../../../geometry/GeometryCursor","../../../../../../../symbols/cim/effects/CIMEffectHelper","./loadGeometryEngine","./MeshWriterVertexPack"],(function(e,t,r,a,s){"use strict";function i(e){if(!e)return!1;for(const t of e)switch(t.effect.type){case"CIMGeometricEffectBuffer":case"CIMGeometricEffectOffset":case"CIMGeometricEffectDonut":return!0}return!1}class c{constructor(e,t,r,a){this._instanceId=e,this._evaluator=t,this._viewParams=r,this._optionalAttributes=a,this._evaluator.evaluator=e=>this.vertexSpec.createComputedParams(e)}get _vertexPack(){if(!this._cachedVertexPack){const e=s.MeshWriterVertexPack.fromVertexSpec(this.vertexSpec,this._optionalAttributes);this._evaluator.hasDynamicProperties||e.pack(this._evaluator.evaluatedMeshParams,this._viewParams),this._cachedVertexPack=e}return this._cachedVertexPack}get evaluatedMeshParams(){return this._evaluator.evaluatedMeshParams}get hasEffects(){return!!this.evaluatedMeshParams.effects}get instanceId(){return this._instanceId}get attributeLayout(){return this._vertexPack.attributeLayout}setReferences(e){this._references=e}getBoundsInfo(){return null}getTileInfo(){return this._viewParams.tileInfo}async loadDependencies(){i(this._evaluator.inputMeshParams.params.effects?.effectInfos)&&await a.loadGeometryEngine()}enqueueRequest(e,t,r){this._evaluator.hasDynamicProperties&&this._evaluator.enqueueRequest(e,t,r)}write(e,s,i,c,o){this.ensurePacked(s,i,c);const n=this.evaluatedMeshParams.effects;if(!n||0===n.length)return void this._write(e,i,void 0,o);const u=i.readGeometryForDisplay()?.clone();if(!u)return;const h=t.GeometryCursor.fromOptimizedCIM(u,i.geometryType),f=a.getGeometryEngine();h.invertY();const l=e.id||"",m=r.CIMEffectHelper.executeEffects(n,h,l,f);let v;for(;v=m.next();)v.invertY(),this._write(e,i,v,o)}ensurePacked(e,t,r){if(!this._evaluator.hasDynamicProperties)return;const a=this._evaluator.evaluateMeshParams(e,t,r);this._vertexPack.pack(a,this._viewParams)}_writeVertex(e,t,r,a,s){const i=this.evaluatedMeshParams;this._vertexPack.writeVertex(e,t,r,a,i,s)}}e.MeshWriter=c,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
