/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../../../chunks/tslib.es6","../../../../../../../symbols/cim/constants","../../GraphShaderModule","../../graph/glsl","./AFeatureShader","./constants","./LineShader","./MosaicInfo","./utils"],(function(t,e,a,i,n,l,o,r,s,c){"use strict";class d extends r.LineVertexInput{}e.__decorate([i.location(9,n.Float)],d.prototype,"accumulatedDistance",void 0),e.__decorate([i.location(10,n.Vec2)],d.prototype,"segmentDirection",void 0),e.__decorate([i.location(11,n.Vec4)],d.prototype,"tlbr",void 0);class u extends r.LineFragmentInput{}class p extends r.LineShader{_getLineWidthRatio(t,e){const i=new n.Float(a.dashRadius),l=c.getBit(t.bitset,o.bitsetLineScaleDash);return l.multiply(n.max(e,new n.Float(.25))).add(new n.Float(1).subtract(l)).divide(i)}_getSDFAlpha(t){const{halfWidth:e,normal:a,tlbr:i,patternSize:l,accumulatedDistance:o,lineWidthRatio:r}=t,s=l.x.multiply(new n.Float(2)).multiply(r),d=n.fract(o.divide(s)),u=new n.Float(.25).multiply(a.y).add(new n.Float(.5)),p=n.mix(i.xy,i.zw,new n.Vec2(d,u)),m=c.rgba2float(n.texture2D(this.mosaicInfo.texture,p)).subtract(new n.Float(.5)).multiply(e),h=n.clamp(new n.Float(.5).subtract(m),new n.Float(0),new n.Float(1));return new n.Vec4(h)}_getPatternColor(t){const{halfWidth:e,normal:a,color:i,accumulatedDistance:l,patternSize:o,sampleAlphaOnly:r,tlbr:s}=t,c=o.y.multiply(new n.Float(2).multiply(e).divide(o.x)),d=n.fract(l.divide(c)),u=new n.Float(.5).multiply(a.y).add(new n.Float(.5)),p=n.mix(s.xy,s.zw,new n.Vec2(u,d));let m=n.texture2D(this.mosaicInfo.texture,p);return null!=this.visualVariableColor&&(m=n.ifElse(n.greaterThan(r,new n.Float(.5)),new n.Vec4(i.a),i)),m}vertex(t,e){const{segmentDirection:a,tlbr:i,bitset:l}=t,s=r.getLineVertexData(this,t),d=t.accumulatedDistance.divide(this.view.displayZoomFactor).add(n.dot(a,s.scaledOffset)),u=new n.Vec2(i.z.subtract(i.x),i.w.subtract(i.y)),p=i.divide(this.mosaicInfo.size.xyxy),m=c.getBit(l,o.bitsetLineIsSdf),h=c.getBit(l,o.bitsetGenericConsiderAlphaOnly),y=n.ifElse(n.greaterThan(m,new n.Float(.5)),this._getLineWidthRatio(t,s.scaledHalfWidth),new n.Float(1));return{...s,tlbr:p,patternSize:u,accumulatedDistance:d,isSDF:m,sampleAlphaOnly:h,lineWidthRatio:y,...this.maybeRunHittest(t,e,s.halfWidth)}}fragment(t){const{color:e,opacity:a,isSDF:i}=t,l=r.getLineAntialiasing(t,this.antialiasingControls.blur),o=n.ifElse(n.greaterThan(i,new n.Float(.5)),this._getSDFAlpha(t),this._getPatternColor(t)),s=e.multiply(a).multiply(l).multiply(o);return this.getFragmentOutput(s,t)}}e.__decorate([i.uniform(s.MosaicInfo)],p.prototype,"mosaicInfo",void 0),e.__decorate([e.__param(0,i.input(d)),e.__param(1,i.input(l.BaseHittestVertexInput))],p.prototype,"vertex",null),t.TexturedLineFragmentInput=u,t.TexturedLineShader=p,t.TexturedLineVertexInput=d,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
