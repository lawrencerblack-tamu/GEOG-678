/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../../../core/mathUtils","../../../../../../../core/screenUtils","../../../../../../../geometry/GeometryCursor","../../../../../../../symbols/cim/placements/CIMMarkerPlacementHelper","../../../alignmentUtils","../../../definitions","../../../mesh/templates/shapingUtils","../fill/meshWriterUtils","../mesh/loadGeometryEngine","../mesh/MeshWriter","../shaders/constants","./TextParams","../../../../../../webgl/enums"],(function(t,e,o,r,s,i,n,a,c,p,l,h,f,u){"use strict";const d=28,m=[4,4],x=[16,4],g={topLeft:x,topRight:x,bottomLeft:x,bottomRight:x},y=[4,2],T=[4,6],P={topLeft:y,topRight:y,bottomLeft:T,bottomRight:T},_={topLeft:y,topRight:T,bottomLeft:y,bottomRight:T},S={topLeft:T,topRight:T,bottomLeft:m,bottomRight:m},b={topLeft:m,topRight:m,bottomLeft:T,bottomRight:T},k={topLeft:T,topRight:m,bottomLeft:T,bottomRight:m},I={topLeft:m,topRight:T,bottomLeft:m,bottomRight:T},M={createComputedParams:t=>t,attributes:{pos:{type:u.DataType.SHORT,count:2,pack:"position",packPrecisionFactor:10},id:{type:u.DataType.UNSIGNED_BYTE,count:3,pack:"id"},bitset:{type:u.DataType.UNSIGNED_BYTE,count:1,packTessellation:({isBackground:t,mapAligned:e})=>c.packBitset([[h.bitsetTextIsBackground,t],[h.bitsetTextIsMapAligned,!!e]])},zoomRange:{type:u.DataType.UNSIGNED_SHORT,count:2,packPrecisionFactor:n.minMaxZoomPrecisionFactor,packTessellation:({minZoom:t,maxZoom:e})=>[t||0,e||d]},offset:{type:u.DataType.SHORT,count:2,packPrecisionFactor:8,packAlternating:{count:4,packTessellation:({offsets:t})=>{const{bottomLeft:e,bottomRight:o,topLeft:r,topRight:s}=t;return[r,s,e,o]}}},textureUV:{type:u.DataType.SHORT,count:2,packPrecisionFactor:4,packAlternating:{count:4,packTessellation:({texcoords:t})=>{const{bottomLeft:e,bottomRight:o,topLeft:r,topRight:s}=t;return[r,s,e,o]}}},color:{type:u.DataType.UNSIGNED_BYTE,count:4,normalized:!0,packTessellation:({color:t})=>t},fontSize:{type:u.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,packTessellation:({fontSize:t})=>o.pt2px(t)},referenceSize:{type:u.DataType.UNSIGNED_BYTE,count:1,packPrecisionFactor:4,packTessellation:({fontSize:t},{referenceSize:e})=>o.pt2px(e??t)},haloColor:{type:u.DataType.UNSIGNED_BYTE,count:4,normalized:!0,pack:({haloColor:t})=>c.processColorInput(t)},haloFontSize:{type:u.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:4,pack:({haloFontSize:t})=>o.pt2px(t)},clipAngle:{type:u.DataType.UNSIGNED_BYTE,count:1,packTessellation:({clipAngle:t})=>D(t||0)},referenceSymbol:{type:u.DataType.BYTE,count:4,packPrecisionFactor:1,packTessellation:(t,e)=>{if(!t.referenceBounds)return[0,0,0,0];const r=i.getXDirection(e.horizontalAlignment),s=i.getYDirection(e.verticalAlignment),{offsetX:n,offsetY:a,size:c}=t.referenceBounds;return[o.pt2px(n),-o.pt2px(a),o.pt2px(c),r+1<<2|s+1]}}}};class B extends l.MeshWriter{constructor(){super(...arguments),this.vertexSpec=M,this._textMeshParamsPropsInitialized=!1}ensurePacked(t,e,o){super.ensurePacked(t,e,o),this._textMeshParamsPropsInitialized&&!this._evaluator.hasDynamicProperties||(this._textMeshTransformProps=new f.TextMeshTransformProps(this.evaluatedMeshParams),this._textMeshParamsPropsInitialized=!0)}_write(t,e,o){const r=this._getShaping();if(!r)return;const s=e.getDisplayId();if(null!=this.evaluatedMeshParams.placement)return this._writePlacedTextMarkers(t,e,r,o);if(o&&o.nextPath())return o.nextPoint(),this._writeGlyphs(t,s,o.x,o.y,r,0);if("esriGeometryPolygon"===e.geometryType){const o=e.readCentroidForDisplay();if(!o)return;const[i,n]=o.coords;return this._writeGlyphs(t,s,i,n,r,0)}if("esriGeometryMultipoint"===e.geometryType){const o=e.readGeometryForDisplay();return void o?.forEachVertex(((e,o)=>this._writeGlyphs(t,s,e,o,r,0)))}const i=e.readXForDisplay(),n=e.readYForDisplay();return this._writeGlyphs(t,s,i,n,r,0)}_writePlacedTextMarkers(t,e,i,n){const a=n??r.GeometryCursor.fromFeatureSetReaderCIM(e);if(!a)return;const c=-1,l=s.CIMMarkerPlacementHelper.getPlacement(a,c,this.evaluatedMeshParams.placement,o.pt2px(1),t.id,p.getGeometryEngine());if(!l)return;const h=e.getDisplayId();let f=l.next();for(;null!=f;){const e=f.tx,o=-f.ty,r=-f.getAngle();this._writeGlyphs(t,h,e,o,i,r),f=l.next()}}_getShaping(){const t=this._textMeshTransformProps,r=this.evaluatedMeshParams;if(!r.glyphs?.glyphs.length)return null;const s=Math.round(o.pt2px(t.fontSize)),i=o.pt2px(t.offsetX),c=o.pt2px(t.offsetY),p=e.clamp(o.pt2px(r.lineWidth),32,512),l=n.magicLabelLineHeight*e.clamp(r.lineHeightRatio,.25,4);return a.shapeGlyphs(r.glyphs,{scale:s/n.glyphSize,angle:t.postAngle,xOffset:i,yOffset:c,horizontalAlignment:r.horizontalAlignment,verticalAlignment:r.verticalAlignment,maxLineWidth:p,lineHeight:l,decoration:r.decoration,borderLineSizePx:o.pt2px(r.boxBorderLineSize),hasBackground:!!r.boxBackgroundColor,useCIMAngleBehavior:r.useCIMAngleBehavior})}_writeGlyphs(t,e,r,s,i,n,a,p){const l=this.evaluatedMeshParams,h=this._textMeshTransformProps,f=h.fontSize,u=o.pt2px(h.offsetX),d=o.pt2px(h.offsetY),[m,x]=c.getMinMaxZoom(l.scaleInfo,this.getTileInfo());0!==n&&i.setRotation(n);const g=i.bounds,y=r+g.x+u,T=s+g.y-d,P=2*(l.minPixelBuffer?l.minPixelBuffer/f:1),_=Math.max(g.width,g.height)*P;i.textBox&&(t.recordStart(this.instanceId,this.attributeLayout,i.glyphs[0].textureBinding),t.recordBounds(y,T,_,_),this._writeTextBox(t,e,r,s,i.textBox,a,p),t.recordEnd());for(const o of i.glyphs){t.recordStart(this.instanceId,this.attributeLayout,o.textureBinding),t.recordBounds(y,T,_,_);const{texcoords:i,offsets:n}=o;this._writeQuad(t,e,r,s,{texcoords:i,offsets:n,fontSize:f,color:c.processColorInput(l.color),isBackground:!1,referenceBounds:a,minZoom:m,maxZoom:x,...p}),t.recordEnd()}0!==n&&i.setRotation(-n)}_writeTextBox(t,e,o,r,s,i,n){const a=this.evaluatedMeshParams,{fontSize:p}=this._textMeshTransformProps,{boxBackgroundColor:l,boxBorderLineColor:h}=a,f={isBackground:!0,fontSize:p,referenceBounds:i,...n};l&&(this._writeQuad(t,e,o,r,{texcoords:g,offsets:s.main,color:c.processColorInput(l),...f}),h||(this._writeQuad(t,e,o,r,{texcoords:S,offsets:s.top,color:c.processColorInput(l),...f}),this._writeQuad(t,e,o,r,{texcoords:b,offsets:s.bot,color:c.processColorInput(l),...f}),this._writeQuad(t,e,o,r,{texcoords:k,offsets:s.left,color:c.processColorInput(l),...f}),this._writeQuad(t,e,o,r,{texcoords:I,offsets:s.right,color:c.processColorInput(l),...f}))),h&&(this._writeQuad(t,e,o,r,{texcoords:P,offsets:s.top,color:c.processColorInput(h),...f}),this._writeQuad(t,e,o,r,{texcoords:P,offsets:s.bot,color:c.processColorInput(h),...f}),this._writeQuad(t,e,o,r,{texcoords:_,offsets:s.left,color:c.processColorInput(h),...f}),this._writeQuad(t,e,o,r,{texcoords:_,offsets:s.right,color:c.processColorInput(h),...f}))}_writeQuad(t,e,o,r,s){const i=t.vertexCount();this._writeVertex(t,e,o,r,s),t.indexWrite(i+0),t.indexWrite(i+1),t.indexWrite(i+2),t.indexWrite(i+1),t.indexWrite(i+3),t.indexWrite(i+2)}}const D=t=>Math.round(t*(254/360));t.TextMeshWriter=B,t.TextVertexSpec=M,t.maxLabelZoom=d,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
