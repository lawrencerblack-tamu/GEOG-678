/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../../../core/screenUtils","../../../../../../../geometry/GeometryCursor","../../../definitions","../../../TurboLine","../../../mesh/templates/templateUtils","../fill/meshWriterUtils","../mesh/MeshWriter","../mesh/utils","../../../../../../webgl/enums"],(function(e,t,i,s,r,n,o,a,c,l){"use strict";class p{constructor(){this.extrusionOffsetX=0,this.extrusionOffsetY=0,this.normalX=0,this.normalY=0,this.directionX=0,this.directionY=0,this.distance=0}}const h={createComputedParams:e=>e,attributes:{id:{type:l.DataType.UNSIGNED_BYTE,count:3,pack:"id"},pos:{type:l.DataType.SHORT,count:2,pack:"position",packPrecisionFactor:10},bitset:{type:l.DataType.UNSIGNED_BYTE,count:1},zoomRange:{type:l.DataType.SHORT,count:2,packPrecisionFactor:s.minMaxZoomPrecisionFactor,pack:({scaleInfo:e},{tileInfo:t})=>o.getMinMaxZoom(e,t)},color:{type:l.DataType.UNSIGNED_BYTE,count:4,normalized:!0,pack:({color:e})=>o.processColorInput(e)},offset:{type:l.DataType.BYTE,count:2,packPrecisionFactor:16,packTessellation:({extrusionOffsetX:e,extrusionOffsetY:t})=>[o.packRounded(e,16),o.packRounded(t,16)]},normal:{type:l.DataType.BYTE,count:2,packPrecisionFactor:16,packTessellation:({normalX:e,normalY:t})=>[o.packRounded(e,16),o.packRounded(t,16)]},halfWidth:{type:l.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:16,pack:({width:e})=>o.packCeil(t.pt2px(.5*e),16)},referenceHalfWidth:{type:l.DataType.UNSIGNED_SHORT,count:1,packPrecisionFactor:16,pack:({referenceWidth:e})=>o.packCeil(t.pt2px(.5*e),16)}}};class u{constructor(){this.id=0,this.bitset=0,this.indexCount=0,this.vertexCount=0,this.vertexFrom=0,this.vertexBounds=0}}const d=65535;class m extends a.MeshWriter{constructor(e,t,i,s){super(e,t,i,s),this.vertexSpec=h,this._currentWrite=new u,this._tessellationOptions={halfWidth:0,pixelCoordRatio:1,offset:0,wrapDistance:d,textured:!1},this._tessParams=new p,this._initializeTessellator()}writeLineVertices(e,t,i){const s=this._getLines(t);null!=s&&this._writeVertices(e,i,s)}_initializeTessellator(){this._lineTessellator=new r.LineTessellation(this._writeTesselatedVertex.bind(this),this._writeTriangle.bind(this),!0)}_write(e,t,s){const r=s??i.GeometryCursor.fromFeatureSetReaderCIM(t);r&&this._writeGeometry(e,t,r)}_writeGeometry(e,t,i,s){e.recordStart(this.instanceId,this.attributeLayout,s),this.writeLineVertices(e,i,t),e.recordEnd()}_getLines(e){return n.clipLinesMarshall(e,c.getLineClippingMargin(this.evaluatedMeshParams))}_writeVertices(e,i,r){const{_currentWrite:n,_tessellationOptions:a,evaluatedMeshParams:c}=this,{width:l,capType:p,joinType:h,miterLimit:u,hasSizeVV:m}=c,_=t.pt2px(.5*l);a.halfWidth=_,a.capType=o.processLineCapInput(p),a.joinType=o.processLineJoinInput(h),a.miterLimit=u;const x=!m;n.out=e,n.id=i.getDisplayId(),n.vertexCount=0,n.indexCount=0,n.vertexFrom=e.vertexCount(),n.vertexBounds=x&&_<s.thinLineHalfWidthThreshold?0:1;for(const{line:t,start:s}of r)a.initialDistance=s%d,this._lineTessellator.tessellate(t,a,x)}_writeTesselatedVertex(e,t,i,s,r,n,o,a,c,l,p){const{out:h,id:u,vertexBounds:d}=this._currentWrite;return this.hasEffects&&h.recordBounds(e,t,d,d),this._tessParams.extrusionOffsetX=o,this._tessParams.extrusionOffsetY=a,this._tessParams.normalX=c,this._tessParams.normalY=l,this._tessParams.directionX=r,this._tessParams.directionY=n,this._tessParams.distance=p,this._writeVertex(h,u,e,t,this._tessParams),this._currentWrite.vertexFrom+this._currentWrite.vertexCount++}_writeTriangle(e,t,i){const{out:s}=this._currentWrite;s.indexEnsureSize(3),s.indexWrite(e),s.indexWrite(t),s.indexWrite(i),this._currentWrite.indexCount+=3}}e.LineMeshWriter=m,e.LineTessellationParams=p,e.LineVertexSpec=h,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
