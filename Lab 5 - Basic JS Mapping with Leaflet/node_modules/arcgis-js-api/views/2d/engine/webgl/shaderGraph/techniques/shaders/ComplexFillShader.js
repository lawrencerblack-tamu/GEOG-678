/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../../../../chunks/tslib.es6","../../../definitions","../../GraphShaderModule","../../graph/glsl","./AFeatureShader","./constants","./FillShader","./LocalTileOffset","./MosaicInfo","./utils"],(function(e,t,o,i,l,a,r,n,s,d,c){"use strict";class p extends n.FillVertexInput{}t.__decorate([i.location(5,l.Vec4)],p.prototype,"tlbr",void 0),t.__decorate([i.location(6,l.Float)],p.prototype,"width",void 0),t.__decorate([i.location(7,l.Float)],p.prototype,"height",void 0),t.__decorate([i.location(8,l.Vec2)],p.prototype,"offset",void 0),t.__decorate([i.location(9,l.Vec2)],p.prototype,"scale",void 0),t.__decorate([i.location(10,l.Float)],p.prototype,"angle",void 0);class u extends a.FeatureFragmentInput{}function m(e,t,o,i,a){const n=l.equal(c.getBit(a,r.bitsetFillRandomPatternOffset),l.float(1)),s=c.rgba2float(new l.Vec4(e,0));return l.ifElse(n,l.mat3(i.divide(t.x),o.divide(t.y),0,l.negate(o.divide(t.x)),i.divide(t.y),0,c.rand(l.vec2(s,0)),c.rand(l.vec2(0,s)),1),l.mat3(i.divide(t.x),o.divide(t.y),0,l.negate(o.divide(t.x)),i.divide(t.y),0,0,0,1))}function f(e,t){const i=l.mix(new l.Vec2(1),new l.Vec2(1/o.compressionFactorForU16),new l.Vec2(c.getBit(t.bitset,r.bitsetFillPatternWidthIsCompressed),c.getBit(t.bitset,r.bitsetFillPatternHeightIsCompressed))),a=e.view.requiredZoomFactor,n=new l.Vec2(t.width,t.height).multiply(i),s=n.multiply(t.scale).multiply(a),d=t.angle.multiply(r.c256ToRad),p=l.sin(d),u=l.cos(d),f=m(t.id,s,p,u,t.bitset),y=e.localTileOffset.getPatternOffsetAtTileOrigin(n,p,u),g=a.multiply(t.scale).multiply(t.offset.subtract(y)).divide(s),x=new l.Vec3(t.pos,1),F=f.multiply(x).xy.subtract(g),v=t.tlbr.divide(e.mosaicInfo.size.xyxy);let _=c.getBit(t.bitset,r.bitsetGenericConsiderAlphaOnly);return null!=e.visualVariableColor&&(_=l.ifElse(c.isNan(e.storage.getColorValue(t.id)),new l.Float(0),_)),{tileTextureCoord:F,tlbr:v,sampleAlphaOnly:_}}function y(e,t){const o=l.mod(t.tileTextureCoord,new l.Float(1)),i=l.mix(t.tlbr.xy,t.tlbr.zw,o);let a=l.texture2D(e.mosaicInfo.texture,i);return a=l.ifElse(l.greaterThan(t.sampleAlphaOnly,new l.Float(.5)),a.aaaa,a),t.color.multiply(a)}class g extends n.FillShader{vertex(e,t){return{...super.vertex(e,t),...f(this,e)}}fragment(e){const t=y(this,e);return this.getFragmentOutput(t,e,new l.Float(0))}}t.__decorate([i.uniform(d.MosaicInfo)],g.prototype,"mosaicInfo",void 0),t.__decorate([i.uniform(s.LocalTileOffset)],g.prototype,"localTileOffset",void 0),t.__decorate([t.__param(0,i.input(p)),t.__param(1,i.input(a.BaseHittestVertexInput))],g.prototype,"vertex",null),t.__decorate([t.__param(0,i.input(u))],g.prototype,"fragment",null),e.ComplexFillFragmentInput=u,e.ComplexFillShader=g,e.ComplexFillVertexInput=p,e.getComplexFillFragmentColor=y,e.getComplexFillVertexData=f,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})}));
