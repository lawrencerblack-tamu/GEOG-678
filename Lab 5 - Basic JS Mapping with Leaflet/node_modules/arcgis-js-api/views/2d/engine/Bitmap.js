/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../core/promiseUtils","../../../core/libs/gl-matrix-2/math/mat3","../../../core/libs/gl-matrix-2/factories/mat3f32","../../../core/libs/gl-matrix-2/factories/vec2f32","./DisplayObject","./ImageryBitmapSource","../../webgl/enums","../../webgl/Texture","../../webgl/TextureDescriptor"],(function(t,e,i,s,r,h,o,a,u,n){"use strict";function l(t){return t&&"render"in t}function d(t){const e=document.createElement("canvas");return e.width=t.width,e.height=t.height,t.render(e.getContext("2d")),e}function c(t){return l(t)?t instanceof o?t.getRenderedRasterPixels()?.renderedRasterPixels:d(t):t}class _ extends h.DisplayObject{constructor(t=null,e=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this._texture=null,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=e,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),null!=this._uploadStatus&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){null==t&&null==this._source||(this._source=t,this.invalidateTexture(),this.requestRender())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}async setSourceAsync(t,i){null!=this._uploadStatus&&this._uploadStatus.controller.abort();const s=new AbortController,r=e.createResolver();return e.onAbortOrThrow(i,(()=>s.abort())),e.onAbortOrThrow(s,(t=>r.reject(t))),this._uploadStatus={controller:s,resolver:r},this.source=t,r.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}updateTransitionProperties(t,e){t>=64&&(this.fadeTransitionEnabled=!1,this.inFadeTransition=!1),super.updateTransitionProperties(t,e)}setTransform(t){const e=i.identity(this.transforms.displayViewScreenMat3),[s,h]=t.toScreenNoRotation([0,0],[this.x,this.y]),o=this.resolution/this.pixelRatio/t.resolution,a=o*this.width,u=o*this.height,n=Math.PI*this.rotation/180;i.translate(e,e,r.fromValues(s,h)),i.translate(e,e,r.fromValues(a/2,u/2)),i.rotate(e,e,-n),i.translate(e,e,r.fromValues(-a/2,-u/2)),i.scaleByVec2(e,e,r.fromValues(a,u)),i.multiply(this.transforms.displayViewScreenMat3,t.displayViewMat3,e)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,e){this._texture&&t.bindTexture(this._texture,e)}async updateTexture({context:t,painter:i}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(t)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const s=c(this.source);try{if(null!=this._uploadStatus){const{controller:t,resolver:e}=this._uploadStatus,r={signal:t.signal},{width:h,height:o}=this,a=this._texture,u=i.textureUploadManager;await u.enqueueTextureUpdate({data:s,texture:a,width:h,height:o},r),e.resolve(),this._uploadStatus=null}else this._texture.setData(s);this.ready()}catch(r){e.throwIfNotAbortError(r)}}onDetach(){this.destroy()}_createTransforms(){return{displayViewScreenMat3:s.create()}}_createTexture(t){const e=this.immutable,i=new n.TextureDescriptor;return i.internalFormat=e?a.SizedPixelFormat.RGBA8:a.PixelFormat.RGBA,i.wrapMode=a.TextureWrapMode.CLAMP_TO_EDGE,i.isImmutable=e,i.width=this._sourceWidth,i.height=this._sourceHeight,new u.Texture(t,i)}}t.Bitmap=_,t.isImageSource=l,t.rasterize=d,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
