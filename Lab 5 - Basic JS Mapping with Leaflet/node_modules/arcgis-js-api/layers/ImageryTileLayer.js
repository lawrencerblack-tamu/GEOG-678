/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["require","../chunks/tslib.es6","../PopupTemplate","../core/Clonable","../core/Error","../core/Logger","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/reactiveUtils","../core/accessorSupport/decorators/property","../core/accessorSupport/ensureType","../core/RandomLCG","../core/has","../core/accessorSupport/decorators/enumeration","../core/accessorSupport/decorators/subclass","./Layer","./mixins/ArcGISService","./mixins/BlendLayer","./mixins/CustomParametersMixin","./mixins/ImageryTileMixin","./mixins/OperationalLayer","./mixins/PortalLayer","./mixins/RefreshableLayer","./mixins/ScaleRangeLayer","./mixins/TemporalLayer","./support/commonProperties","./support/Field","./support/rasterEnums","./support/RasterFunction","./support/rasterDatasets/FunctionRaster","./support/rasterDatasets/RasterFactory","./support/rasterFunctions/rasterFunctionHelper","../support/popupUtils","../webdoc/interfaces"],(function(e,t,r,s,i,a,o,n,l,p,c,u,d,y,h,m,g,_,f,v,R,S,w,b,F,O,P,T,I,x,L,N,J,C){"use strict";let M=class extends(_.BlendLayer(b.ScaleRangeLayer(R.OperationalLayer(S.PortalLayer(f.CustomParametersMixin(v.ImageryTileMixin(F.TemporalLayer(g.ArcGISService(w.RefreshableLayer(o.MultiOriginJSONMixin(s.ClonableMixin(m)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=n.debounce((async(t,r,s)=>{const{save:i,saveAs:a}=await new Promise(((t,r)=>e(["./save/imageryUtils"],t,r)));switch(t){case C.SaveOperationType.SAVE:return i(this,r);case C.SaveOperationType.SAVE_AS:return a(this,s,r)}}))}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=null!=e?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(n.throwIfAbortError).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const e=[new P({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new P({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],{serviceRasterInfo:t}=this,r=t?.attributeTable,s=null!=r?r.fields:null,i="Raster.";if(s){const t=s.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name=i+e.name,t}));e.push(...t)}const a=t?.dataType,o=t?.multidimensionalInfo;if(("vector-magdir"===a||"vector-uv"===a)&&null!=o){const t=o.variables[0].unit?.trim(),r="Magnitude"+(t?` (${t})`:"");e.push(new P({name:"Raster.Magnitude",alias:r,domain:null,editable:!1,type:"double"})),e.push(new P({name:"Raster.Direction",alias:"Direction (Â°)",domain:null,editable:!1,type:"double"}))}return e}createPopupTemplate(e){const{rasterFields:t}=this,r=new Set(t.map((({name:e})=>e)).filter((e=>"raster.servicepixelvalue.raw"!==e.toLowerCase())));return J.createPopupTemplate({fields:t,title:this.title},{...e,visibleFieldNames:r})}async generateRasterInfo(e,t){if(!(e=c.ensureClass(I,e)))return this.serviceRasterInfo;try{const{rasterInfo:r}=await this._openFunctionRaster(e,t);return r}catch(r){if(r instanceof i)throw r;throw new i("imagery-tile-layer","the given raster function is not supported")}}async save(e){return this._debouncedSaveOperations(C.SaveOperationType.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(C.SaveOperationType.SAVE_AS,t,e)}write(e,t){const r=this._primaryRasters[0]??this.raster;if(this.loaded?"RasterTileServer"===r.datasetFormat&&("Raster"===r.tileType||"Map"===r.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t?.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new i("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){let t=!1;if(this.raster)await this._openFromRaster(this.raster,e),t="Function"===this.raster.datasetFormat;else{const{url:t,rasterFunction:r,source:s}=this;if(!t&&!s)throw new i("imagery-tile-layer:open","missing url or source parameter");s?await this._openFromSource(s,e):r?await this._openFromUrlWithRasterFunction(t,r,e):await this._openFromUrl(t,e)}const r=this.raster.rasterInfo;if(!r)throw new i("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",t?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(l.watch((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e)})))}async _openFromRaster(e,t){e.rasterInfo||await e.open({signal:t}),this._primaryRasters="Function"===e.datasetFormat?e.primaryRasters.rasters:[e],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(e,t,r){const s=[e];t&&N.getPrimaryRasterUrls(t.toJSON(),s);const a=await Promise.all(s.map((e=>L.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:r})))),o=a.findIndex((e=>null==e));if(o>-1)throw new i("imagery-tile-layer:open",`cannot open raster: ${s[o]}`);return this._primaryRasters=a,this._initializeWithFunctionRaster(t)}async _openFromUrl(e,t){const r=await L.open({url:e,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==r)throw new i("imagery-tile-layer:open",`cannot open raster: ${e}`);this._primaryRasters=[r],this.raster=r}async _openFromSource(e,t){const r="the tiled imagery data source is not supported",s="coverage"===e.type?.toLowerCase()?"CovJSON":e.extent&&e.pixelBlock?"MEMORY":null;if(!s)throw new i("imagery-tile-layer:open",r);"MEMORY"===s&&(e={extent:e.extent,pixelBlocks:[e.pixelBlock]});const a=await L.open({url:"",source:e,datasetFormat:s,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t});if(null==a)throw new i("imagery-tile-layer:open",r);this._primaryRasters=[a],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=a}async _openFunctionRaster(e,t){const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>r[e.url]=e));const s=N.create(e.functionDefinition?.toJSON()??e.toJSON(),r),i=new x({rasterFunction:s});return await i.open(t),i}async _initializeWithFunctionRaster(e,t){try{this.raster=await this._openFunctionRaster(e,t)}catch(r){r instanceof i&&a.getLogger(this).error("imagery-tile-layer:open",r.message),a.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};t.__decorate([p.property({clonable:!1})],M.prototype,"_primaryRasters",void 0),t.__decorate([p.property({type:[c.Integer],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],M.prototype,"bandIds",void 0),t.__decorate([p.property({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),y.enumeration(T.interpolationKebab)],M.prototype,"interpolation",void 0),t.__decorate([p.property(O.legendEnabled)],M.prototype,"legendEnabled",void 0),t.__decorate([p.property({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],M.prototype,"isReference",void 0),t.__decorate([p.property({type:["show","hide"]})],M.prototype,"listMode",void 0),t.__decorate([p.property({json:{read:!0,write:!0}})],M.prototype,"blendMode",void 0),t.__decorate([p.property()],M.prototype,"sourceJSON",void 0),t.__decorate([p.property({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],M.prototype,"version",void 0),t.__decorate([p.property({readOnly:!0,json:{read:!1}})],M.prototype,"type",void 0),t.__decorate([p.property({type:["ArcGISTiledImageServiceLayer"]})],M.prototype,"operationalLayerType",void 0),t.__decorate([p.property({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,r){t[r]=!e}}}})],M.prototype,"popupEnabled",void 0),t.__decorate([p.property({type:r,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],M.prototype,"popupTemplate",void 0),t.__decorate([p.property({readOnly:!0})],M.prototype,"defaultPopupTemplate",null),t.__decorate([p.property({readOnly:!0,type:[P]})],M.prototype,"fields",void 0),t.__decorate([p.property({readOnly:!0,type:[P]})],M.prototype,"rasterFields",null),t.__decorate([p.property({constructOnly:!0})],M.prototype,"source",void 0),M=t.__decorate([h.subclass("esri.layers.ImageryTileLayer")],M);return M}));
