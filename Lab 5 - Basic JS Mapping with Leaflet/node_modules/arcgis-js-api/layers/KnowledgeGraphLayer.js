/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../core/Collection","../core/Error","../core/Logger","../core/accessorSupport/decorators/property","../core/has","../core/RandomLCG","../core/accessorSupport/decorators/subclass","./Layer","./knowledgeGraph/KnowledgeGraphLayerDataManager","./knowledgeGraph/KnowledgeGraphSublayer","./mixins/BlendLayer","./mixins/ScaleRangeLayer","../rest/knowledgeGraphService","../rest/knowledgeGraph/EntityType","../rest/knowledgeGraph/RelationshipType"],(function(e,t,a,i,n,o,s,r,p,h,d,l,y,c,g,u){"use strict";const m=(e,t,a)=>(e.has(t)||e.set(t,a()),e.get(t));let f=class extends(l.BlendLayer(y.ScaleRangeLayer(p))){constructor(e){super(e),this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new t,this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.sublayerIdsCache=new Map,this.tables=new t,this.type="knowledge-graph",this._originalInclusionList=e.inclusionModeDefinition}normalizeCtorArgs(e){return{url:e.url,title:e.title}}load(){return this.addResolvingPromise(c.fetchKnowledgeGraph(this.url).then((e=>{this._initializeLayerProperties({knowledgeGraph:e,inclusionModeDefinition:this._originalInclusionList}),this.loadLayerAssumingLocalCache()}))),Promise.resolve(this)}_initializeLayerProperties(e){const t=new Set;let n=[],o=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new a("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.inclusionModeDefinition?.generateAllSublayers?(n=e.knowledgeGraph.dataModel.entityTypes??[],o=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach(((a,s)=>{if(!this._graphTypeLookup.get(s))return i.getLogger(this).warn(`A named type, ${s}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(s);this._graphTypeLookup.get(s)instanceof u||"strictOrigin"in this._graphTypeLookup.get(s)?t.has(s)||(t.add(s),o.push(this._graphTypeLookup.get(s))):this._graphTypeLookup.get(s)instanceof g||"properties"in this._graphTypeLookup.get(s)?t.has(s)||(t.add(s),n.push(this._graphTypeLookup.get(s))):(i.getLogger(this).warn(`A named type, ${s}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(s))})):(n=e.knowledgeGraph.dataModel.entityTypes??[],o=e.knowledgeGraph.dataModel.relationshipTypes??[]);const s=new h.KnowledgeGraphLayerDataManager({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=n,this.memberRelationshipTypes=o,this.dataManager=s}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const a of e)this.sublayerIdsCache.has(a.typeName)||(this.sublayerIdsCache.set(a.typeName,new Set),t.push(a.typeName)),this.sublayerIdsCache.get(a.typeName).add(a.id);for(const a of t)if(this._graphTypeLookup.has(a)){const e=this._graphTypeLookup.get(a),t="endPoints"in e?"relationship":"entity",i=new d({objectType:e,parentCompositeLayer:this,graphType:t,title:a});"entity"===t?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a),i.geometryType?this.layers.push(i):this.tables.push(i),this.dataManager.sublayerCaches.set(a,new Map)}this._refreshNamedTypes()}loadLayerAssumingLocalCache(){this.memberEntityTypes.forEach((e=>{const t=new d({objectType:e,parentCompositeLayer:this,graphType:"entity",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.memberRelationshipTypes.forEach((e=>{const t=new d({objectType:e,parentCompositeLayer:this,graphType:"relationship",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{const a=m(this.sublayerIdsCache,t,(()=>new Set));e.members?.forEach((e=>{a.add(e.id)}))}))}async addRecords(e){await this._handleNewRecords(e)}async removeRecords(e){const t=[];for(const a of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(a.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(a.typeName)?.members?.has(a.id)&&t.push(a);this.dataManager.removeFromLayer(t);for(const a of t)this.sublayerIdsCache.get(a.typeName)?.delete(a.id);return this._refreshNamedTypes(),t}};e.__decorate([n.property()],f.prototype,"dataManager",void 0),e.__decorate([n.property()],f.prototype,"knowledgeGraph",void 0),e.__decorate([n.property()],f.prototype,"layers",void 0),e.__decorate([n.property()],f.prototype,"memberEntityTypes",void 0),e.__decorate([n.property()],f.prototype,"memberRelationshipTypes",void 0),e.__decorate([n.property()],f.prototype,"sublayerIdsCache",void 0),e.__decorate([n.property()],f.prototype,"tables",void 0),e.__decorate([n.property({json:{read:!1}})],f.prototype,"type",void 0),f=e.__decorate([r.subclass("esri.layers.KnowledgeGraphLayer")],f);return f}));
