/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["exports","../../../../colorUtils","../../rasterFunctionConstants","./utils","../../../../renderers/support/colorRampUtils"],(function(t,e,a,n,r){"use strict";function o(t){return"colormap"in t?s(t):"colorRamp"in t?i(t):u(t)}function s(t){const a=t.colormap.map((t=>{if("value"in t){const a="string"==typeof t.color?e.getNamedColor(t.color)??e.hex2rgba(t.color):t.color;(t=[t.value,...a])[4]&&t[4]<=1&&(t[4]=Math.round(255*t[4]))}return t})),{raster:r,outputPixelType:o}=t,s={colormap:a,raster:r};return n.createRasterFunction("Colormap",s,o)}function i(t){const{raster:e,colorRamp:a,outputPixelType:r}=t,o={colorRamp:"toJSON"in a?a.toJSON():a,raster:e};return n.createRasterFunction("Colormap",o,r)}function u(t){const{colorRampName:e}=t,o=Object.values(a.colormapName).find((t=>t.toLowerCase()===e?.toLowerCase())),s=r.colorRampDict.toJSON(e),{raster:i,outputPixelType:u="unknown"}=t,c=o?{colormapName:o,raster:i}:{colorRampName:s,raster:i};return n.createRasterFunction("Colormap",c,u)}function c(t){const{raster:e,histograms:a,outputPixelType:r}=t,o=t.statistics?.map((t=>({min:t.min,max:t.max,mean:t.avg,standardDeviation:t.stddev})));return n.createRasterFunction("StatisticsHistograms",{raster:e,statistics:o,histograms:a},r)}function l(t){const{raster:e,attributeTable:a,outputPixelType:r="unknown"}=t,o="toJSON"in a?a.toJSON():a;return n.createRasterFunction("Table",{raster:e,attributeTableAsRecordSet:o},r)}function p(t){const{raster:e,outputPixelType:a="unknown"}=t,r={raster:e,missingBandAction:"fail"===t.missingBandAction?1:0};return"bandIds"in t?r.bandIds=t.bandIds:"bandNames"in t?r.bandNames=t.bandNames:"bandWavelengths"in t&&(r.bandWavelengths=t.bandWavelengths),n.createRasterFunction("ExtractBand",r,a)}function m(t){const{rasters:e,outputPixelType:a}=t;return n.createRasterFunction("CompositeBand",{rasters:e},a)}function d(t){const{allowUnmatched:e,raster:a,rangeMaps:r,outputPixelType:o}=t,s=r?.filter((({output:t})=>null!=t)),i=s?.flatMap((({range:t})=>t)),u=s?.map((({output:t})=>t)),c=r?.filter((t=>null==t.output))?.flatMap((({range:t})=>t)),l={allowUnmatched:e,raster:a,inputRanges:i,outputValues:u,noDataRanges:c};return n.createRasterFunction("Remap",l,o)}function g(t){const{raster:e,outputPixelType:a="unknown"}=t,r=t.includedRanges?.flatMap((t=>t)),o=t.noDataValues?.map((t=>t.join(" "))),s={raster:e,includedRanges:r,noDataInterpretation:"match-all"===t.noDataInterpretation?1:0,noDataValues:o};return n.createRasterFunction("Mask",s,a)}function f(t){const{geometry:e,keepOutside:a,outputPixelType:r="unknown"}=t,o="declaredClass"in e?e.toJSON():e,s=a?2:1;return n.createRasterFunction("Clip",{clippingGeometry:o,clippingType:s},r)}function R(t){const{weights:e,outputPixelType:a="unknown"}=t;return n.createRasterFunction("Grayscale",{conversionParameters:e},a)}t.clip=f,t.colormap=o,t.compositeBands=m,t.extractBand=p,t.grayscale=R,t.mask=g,t.remap=d,t.statisticsHistogram=c,t.table=l,Object.defineProperty(t,Symbol.toStringTag,{value:"Module"})}));
