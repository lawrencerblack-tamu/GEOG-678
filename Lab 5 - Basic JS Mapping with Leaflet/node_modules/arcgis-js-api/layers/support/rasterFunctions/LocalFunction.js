/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/Logger","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../rasterFunctionConstants","../rasterFormats/pixelRangeUtils","./BaseRasterFunction","./LocalFunctionArguments","./localUtils"],(function(t,e,s,n,o,r,i,a,u,c,l){"use strict";let p=class extends u{constructor(){super(...arguments),this.functionName="Local",this.functionArguments=null,this.rasterArgumentNames=["rasters"]}_bindSourceRasters(){const{sourceRasterInfos:t}=this,e=t[0],{bandCount:s}=e,{processAsMultiband:n}=this.functionArguments;if(t.some((t=>t.bandCount!==s)))return{success:!1,supportsGPU:!1,error:"local-function: input rasters do not have same band count"};const{operation:o,rasters:r}=this.functionArguments,i=l.operandsCount[o];if(!(999===i||r.length===i||r.length<=1&&1===i))return{success:!1,supportsGPU:!1,error:`local-function: the length of functionArguments.rasters does not match operation's requirement: ${i}`};const a=e.clone();a.bandCount=999!==i||n?s:1,this._removeStatsHistColormapVAT(a),this._updateStatistics(a),this._updatePixelType(a),this.rasterInfo=a;return{success:!0,supportsGPU:1===a.bandCount&&i<=3&&(o<11||o>16)}}_processPixels(t){const{pixelBlocks:e}=t;return null==e||e.some((t=>null==t))?null:l.local(e,this.functionArguments.operation,{processAsMultiband:this.functionArguments.processAsMultiband,outputPixelType:this.outputPixelType??void 0})}_getWebGLParameters(){const{operation:t}=this.functionArguments,e=l.operandsCount[t],s=Object.keys(i.localOperators).find((e=>i.localOperators[e]===t))?.toLowerCase()??"undefined",n=this.outputPixelType??"f32";let[o,r]=a.getPixelValueRange(n);const u=a.isIntegerPixelType(n);return u&&(o-=1e-4,r+=1e-4),{imageCount:e,operationName:s,domainRange:[o,r],isOutputRounded:u}}_updateStatistics(t){const e=this.sourceRasterInfos[0],{operation:s}=this.functionArguments,n=l.getOutputDomain(s)?.domain;if(n){t.statistics=[];for(let e=0;e<t.bandCount;e++)t.statistics[e]={min:n[0],max:n[1],avg:(n[0]+n[1])/2,stddev:(n[0]+n[1])/10}}else 45===s&&e.statistics?.length&&(t.statistics=e.statistics.map((t=>({min:-t.max,max:-t.min,avg:null!=t.avg?-t.avg:void 0,stddev:null!=t.stddev?-t.stddev:void 0}))))}_updatePixelType(t){const{statistics:e,pixelType:s}=this.sourceRasterInfos[0],{operation:n}=this.functionArguments,{domain:o,isInteger:r}=l.getOutputDomain(n)??{domain:null,isInteger:!1};let i="f32";if(o&&r)i=a.getIntegerPixelType(o[0],o[1]);else if(30===n){const t=e?.[0];i=t?a.getIntegerPixelType(t.min,t.max):a.isIntegerPixelType(s)?s:"s32"}else if(45===n&&a.isIntegerPixelType(s)){const t=e?.map((({max:t})=>-t)),n=e?.map((({min:t})=>-t)),o=t?.length?Math.min(...t):null,r=n?.length?Math.min(...n):null;i=null!=o&&null!=r?a.getIntegerPixelType(o,r):s.startsWith("s")?s.replace("s","u"):"u1"===s||"u2"===s||"u4"===s?"s8":"u8"===s?"s16":"s32"}t.pixelType=this.outputPixelType=this._getOutputPixelType(i)}};t.__decorate([e.property({json:{write:!0,name:"rasterFunction"}})],p.prototype,"functionName",void 0),t.__decorate([e.property({type:c,json:{write:!0,name:"rasterFunctionArguments"}})],p.prototype,"functionArguments",void 0),t.__decorate([e.property()],p.prototype,"rasterArgumentNames",void 0),p=t.__decorate([r.subclass("esri.layers.support.rasterFunctions.LocalFunction")],p);return p}));
