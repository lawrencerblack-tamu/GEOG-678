/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../geometry","../../../core/Error","../../../core/Logger","../../../core/promiseUtils","../../../core/accessorSupport/decorators/property","../../../core/has","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../ogc/crsUtils","../DimensionalDefinition","./BaseRaster","./multipartParser","./wcsCapabilitiesParser","./wcsCoverageParser","../rasterFormats/RasterCodec","../rasterFunctions/pixelUtils","../../../geometry/Extent"],(function(e,t,i,n,s,r,o,a,l,c,d,p,h,u,g,f,m,w){"use strict";const v=["nearest neighbor","bilinear","bicubic"],y=["nearest","linear","cubic"],x="response is not a supported multipart/related mediaType with inline tiff,  switching to compatibility mode",I="response is not a supported multipart mediaType with inline tiff",C="response is base64 encoded which may impact layer display performance",b="server returns an exception";let $=class extends p{constructor(){super(...arguments),this.datasetFormat="WCSServer"}async open(e){await this.init();const t=e?.signal,n=await this._getCapabilities(t);if(this.capabilities=n,!this.version){let e=n.capabilitiesVersion?.slice(0,3);"2.0"===e||"1.1"===e||"1.0"===e?this.version=n.capabilitiesVersion:(e=n.supportedVersions.find((e=>"2.0.1"===e))||n.supportedVersions.find((e=>"2.0"===e.slice(0,3)))||n.supportedVersions.find((e=>"1.1"===e.slice(0,3)))||n.supportedVersions.find((e=>"1.0"===e.slice(0,3)))||"1.0.0",this.version=e)}const s=n.coverages.filter((({coverageSubType:e})=>null==e||""===e||/^rectified(grid|dataset)/i.test(e)));if(!s.length)throw new i("wcsraster-open","cannot find rectified grid coverages");null==this.coverageId&&(this.coverageId=s[0].id);const r=s.find((e=>e.id===this.coverageId));if(null==r)throw new i("wcsraster-open",`the coverageId ${this.coverageId} does not exist in capabilities`);const o=await this._describeCoverage(t);this.coverageInfo=o[0],"2.0"===this.version.slice(0,3)&&(this.coverageInfo.lonLatEnvelope=r.lonLatEnvelope,this.coverageInfo.supportedInterpolations=g.standardizeInterpolations(n.supportedInterpolations)),this.datasetName=this.coverageInfo.title;const{rasterInfo:a}=this.coverageInfo;if(this.createRemoteDatasetStorageInfo(a,512,512),this._set("rasterInfo",a),null==a.spatialReference)throw new i("wcsraster-open",`coverage without spatial reference is not supported: ${this.coverageId}`);const{pixelType:l,bandCount:c}=await this._getPixelTypeAndBandCount(t);a.pixelType=l,1===a.bandCount&&c>1&&(a.bandCount=c),this.updateTileInfo()}async fetchRawTile(e,t,n,s={}){if(this.isBlockOutside(e,t,n))return null;const{nativePixelSize:r,spatialReference:o}=this.rasterInfo,a=2**e,l=r.x*a,c=r.y*a,{blockWidth:d,blockHeight:p}=this.getBlockWidthHeight(e),{origin:h}=this.rasterInfo.storageInfo.tileInfo,u=this.getTileExtent({x:l,y:c},t,n,h,o,[d,p]),g=this.rasterInfo.extent,f=u.xmax>g.xmax,w=u.ymin<g.ymin,v=f||w;let y=u,x=d,I=p;if(v&&(y=u.clone().intersection(g),null!=y&&(f&&(x=Math.floor((y.xmax-y.xmin)/l),y.xmax=y.xmin+l*x),w&&(I=Math.floor((y.ymax-y.ymin)/c),y.ymin=y.ymax-c*I))),null==y||x<=1||I<=1)return null;const C=await this._getCoverage(y,x,I,a,s);if(!C)return null;const{coverageDescription:b}=this.coverageInfo;let{noDataValue:$,multidimensionalInfo:S}=this.rasterInfo;const{multidimensionalDefinition:T}=s;if(null!=S&&null!=T&&T.length){const e=T[0].variableName;if("2.0"===b.version){const t=b.rangeType[0].find((t=>t.name===e));$=t?.nilValue}else if("1.1"===b.version){const t=b.range.find((t=>t.identifier===e));$=t?.nullValues}}const _=await this.decodePixelBlock(C,{width:x,height:I,planes:null,pixelType:null,noDataValue:Array.isArray($)?$[0]:$});if(null==_)return null;if(_&&(_.width!==x||_.height!==I))throw new i("wcsraster-fetch",`the response has unexpected dimension width: ${_.width}, height: {pixelBlock.height}`);return v?m.clip(_,{x:0,y:0},{width:p,height:p}):_}async _getCapabilities(e){const t={service:"WCS",request:"GetCapabilities"};this.version&&(t.version=this.version,t.acceptVersions=this.version);try{const{data:i}=await this.request(this.url,{query:t,responseType:"xml",signal:e});return u.parseCapabilities(i)}catch(n){if(!s.isAbortError(n))throw new i("wcslayer:open","wcs capabilities is not valid or supported");throw n}}async _describeCoverage(e){const t={service:"WCS",request:"DescribeCoverage",version:this.version},n=this.version?.slice(0,3);"1.0"===n?t.coverage=this.coverageId:"1.1"===n?t.identifiers=this.coverageId:"2.0"===n&&(t.coverageId=this.coverageId);try{const{data:i}=await this.request(this.url,{query:t,responseType:"xml",signal:e});return g.parseCoverages(i,this.version)}catch(r){if(!s.isAbortError(r))throw new i("wcslayer:open","wcs coverage description is not valid or supported");throw r}}async _getPixelTypeAndBandCount(e){const{pixelSize:t,extent:s,multidimensionalInfo:r}=this.rasterInfo,o=s.center,a=new w({xmin:o.x-t.x,xmax:o.x+t.x,ymin:o.y-t.y,ymax:o.y+t.y,spatialReference:s.spatialReference});let l=[];if(null!=r){const e=r.variables[0];l=[],e.dimensions.forEach((t=>{l.push(new d({variableName:e.name,dimensionName:t.name,values:t.hasRegularIntervals?t.extent[0]:t.values?.[0],isSlice:!0}))}))}const{coverageDescription:c}=this.coverageInfo,p={interpolation:"nearest",multidimensionalDefinition:l,signal:e},{version:h}=c,{ioConfig:u}=this,g="2.0"===h&&null==u.allowAnyMediaType||"1.1"===h&&null==u.use2GridOffsets;let f;try{f=await this._getCoverage(a,2,2,1,p,!0)}catch(v){if(!g)throw v;if("1.1"===h){if(!v.details?.isResolutionMismatch)throw v;u.use2GridOffsets=!0}}if(!f&&g&&("2.0"===h&&(u.allowAnyMediaType=!0),f=await this._getCoverage(a,2,2,1,p),f&&n.getLogger(this).warn("wcsraster:getcoverage",x)),!f)throw new i("wcsraster-open","unable to determine pixel type");const m=await this.decodePixelBlock(f,{width:2,height:2,planes:null,pixelType:null});if(null==m)throw new i("wcsraster-open","unable to determine pixel type");return{pixelType:m.pixelType,bandCount:m.getPlaneCount()??0}}async _getCoverage(e,t,s,r,o,a=!1){const{coverageDescription:l}=this.coverageInfo,{version:c}=l,d="2.0"===c?this._getCoverage201Parameters(e,t,s,r,o,l):"1.1"===c?this._getCoverage110Parameters(e,t,s,o,l):this._getCoverage100Parameters(e,t,s,o),p="2.0"===c?await this.request(this._constructWCS201Url(d),{signal:o.signal,responseType:"array-buffer"}):await this.request(this.url,{query:d,signal:o.signal,responseType:"array-buffer"});if("1.0"===c)return p.data;if("2.0"===c&&!1!==this.ioConfig.allowAnyMediaType){if("tiff"===f.getFormat(p.data))return a&&(this.ioConfig.allowAnyMediaType=!0,n.getLogger(this).warn("wcsraster:getcoverage",x)),p.data}const u=h.parse(p);if(u.isMultipart&&u.data){const e=u.data.find((e=>e.contentType?.toLowerCase().includes("image")&&null!=e.contentData));return a&&"base64"===e?.contentTransferEncoding&&n.getLogger(this).warn("wcsraster:getcoverage",C),e?.contentData}const g=new Uint8Array(p.data,0,Math.min(p.data.byteLength,2e3)),m=String.fromCharCode.apply(null,g).toLowerCase().includes("exception"),w=m&&String.fromCharCode.apply(null,g).includes("A non-zero RESX/RESY or WIDTH/HEIGHT is required but neither was provided");if(m)throw new i("wcsraster:getcoverage",b,{isResolutionMismatch:w});throw new i("wcsraster:getcoverage",I)}_getInterpolationIndex(e){return e&&this.coverageInfo.supportedInterpolations?.includes(e)?"nearest"===e?0:"bilinear"===e?1:"cubic"===e?2:0:0}_getCoverage100Parameters(e,t,i,n){const s=`${e.xmin},${e.ymin},${e.xmax},${e.ymax}`,r=e.spatialReference.wkid,o=(this.coverageInfo.supportedFormats||[]).find((e=>e.toLowerCase().includes("tiff")))||"GEOTIFF",{bandIds:a,interpolation:l}=n,c=this._getInterpolationIndex(l),d=a?a.map((e=>this.coverageInfo.bandNames[e])):null,p=v[c],{multidimensionalDefinition:h}=n;let u;if(null!=h&&null!=this.rasterInfo.multidimensionalInfo){const e=h.find((e=>"StdTime"===e.dimensionName));let t=e?.values;t&&t.length>0&&(t[0]instanceof Array&&(t=t[0]),u=t.map((e=>this._convertToISOTime(e))).join(","))}return{service:"WCS",request:"GetCoverage",version:this.version,coverage:this.coverageId,format:o,crs:`EPSG:${r}`,bbox:s,width:t,height:i,time:u,interpolation:p,band:d?.join(",")}}_getCoverage110Parameters(e,t,i,n,s){const{multidimensionalDefinition:r,bandIds:o,interpolation:a}=n,l=e.spatialReference.wkid,d=`urn:ogc:def:crs:EPSG::${l}`,p=(this.coverageInfo.supportedFormats||[]).find((e=>e.toLowerCase().includes("tiff")))||"image/tiff",h=this._getInterpolationIndex(a),u=y[h],g=null==a||0===this.coverageInfo.supportedInterpolations?.indexOf(a),f=s.domain.spatialDomain,m=f.origin.x<=f.envelope.xmin&&f.origin.y<=f.envelope.ymin,w=e.width/t,v=e.height/i*(m?1:-1),x=m?[e.xmin,e.ymin]:[e.xmin,e.ymax],I=f.useEPSGAxis&&c.isAxesOrderReversedForWkid(l),C=I?`${x[1]},${x[0]}`:`${x[0]},${x[1]}`,b=this.ioConfig.use2GridOffsets,$=I?b?`${v},${w}`:`${v},0,0,${w}`:b?`${w},${v}`:`${w},0,0,${v}`,S=w/2,T=e.xmin+S,_=e.xmax-S,L=Math.abs(v)/2,E=e.ymin+L,R=e.ymax-L,A=I?`${E},${T},${R},${_},${d}`:`${T},${E},${_},${R},${d}`,D=s.range.find((e=>e.axis.some((e=>e.identifier.toLowerCase().includes("band")))));let P,G=D&&u&&o?g?`${D.identifier}[${D.axis[0].identifier}[${o.join(",")}]]`:`${D.identifier}:${u}[${D.axis[0].identifier}[${o.join(",")}]]`:null;if(null!=r&&r.length)for(let c=0;c<r.length;c++){let e=r[c].values;const t=r[c].dimensionName?.toLowerCase(),i=r[c].variableName?.toLowerCase();if(e.length>0)if(e[0]instanceof Array&&(e=e[0]),"stdtime"===t)P=e.map((e=>this._convertToISOTime(e))).join(",");else{const n=s.range.find((e=>e.identifier.toLowerCase()===i));if(n){const i=n.axis.find((e=>e.identifier.toLowerCase()===t));i&&(G=g?n.identifier+"["+i.identifier+"["+e.join(",")+"]]":n.identifier+":"+u+"["+i.identifier+"["+e.join(",")+"]]")}}}return{service:"WCS",request:"GetCoverage",version:this.version,identifier:this.coverageId,format:p,crs:`EPSG:${l}`,boundingbox:A,gridCS:"urn:ogc:def:cs:OGC:0.0:Grid2dSquareCS",gridType:"urn:ogc:def:method:WCS:1.1:2dGridIn2dCrs",gridOrigin:C,gridOffsets:$,gridBaseCRS:d,timeSequence:P,rangeSubset:G}}_convertToISOTime(e,t=!1){return(t?new Date(24*(e-25569)*60*60*1e3):new Date(e)).toISOString()}_getCoverage201Parameters(e,t,i,n,s,r){const{multidimensionalDefinition:o,interpolation:a}=s,l=this._getInterpolationIndex(a);let c=null;const{supportedInterpolations:d}=this.capabilities;if(d?.length)switch(l){case 0:c=d.find((e=>e.toLowerCase().includes("nearest")));break;case 1:c=d.find((e=>e.toLowerCase().includes("linear")));break;case 2:c=d.find((e=>e.toLowerCase().includes("cubic")||e.toLowerCase().includes("quadratic")))}const p=(this.coverageInfo.supportedFormats||[]).find((e=>e.toLowerCase().includes("tiff")))||"image/tiff",{bandNames:h}=this.coverageInfo,{boundedBy:u,domainSet:g,rangeType:f}=r,m=u.isEastFirst?0:1,w=1-m,{axisLabels:v}=u,y=v[m],x=v[w],I=`http://www.opengis.net/def/crs/EPSG/0/${e.spatialReference.wkid}`,C=I,b=[];b.push(`${y}(${e.xmin},${e.xmax})`),b.push(`${x}(${e.ymin},${e.ymax})`);const $=[];if(v.length>2)for(let R=2;R<v.length;R++){const e=g.origin[R];if(v[R].toLowerCase().includes("time")){let t=e.toString();u.uomLabels?.[R].toLowerCase().includes("ole")&&($.push(v[R]),t=this._convertToISOTime(e,!0)),b.push(v[R]+",http://www.opengis.net("+t+")")}else b.push(v[R]+",http://www.opengis.net("+e+")")}let S=null;if(null!=o&&o.length){const e=[];f.forEach((t=>t.forEach((t=>e.push(t.name)))));const t=[];for(let i=0;i<o.length;i++){const n=v.find((e=>e===o[i].dimensionName)),s=e.find((e=>e===o[i].variableName));if(t.includes(s)||t.push(s),n){let e=o[i].values;if(e.length>0){Array.isArray(e[0])&&(e=e[0]);let t="";t=n.toLowerCase().includes("time")?e.map((e=>this._convertToISOTime(e))).join(","):e.join(",");const i=b.findIndex((e=>0===e.indexOf(n+",http://www.opengis.net")));-1===i&&b.push(n+",http://www.opengis.net("+t+")"),-1===i||b[i].includes("("+t+")")||b.splice(i,1,n+",http://www.opengis.net("+t+")")}}}t.length&&(S=t.join(","))}else if(h?.length>=2){S=(s.bandIds?s.bandIds.map((e=>h[e])):h).join(",")}const T=b.join("&subset="),_=!r.domainSet.hasSameAxisLabelsAsBoundedBy&&!1!==this.ioConfig.allowScaleFactor,L=_?null:`${y}(${t}),${x}(${i})`,E=_?1/n:null;return{service:"WCS",request:"GetCoverage",version:this.version,coverageId:this.coverageId,rangesubset:S,interpolation:c,scaleSize:L,scaleFactor:E,subset:T,format:p,mediaType:this.ioConfig.allowAnyMediaType?null:"multipart/related",outputcrs:I,subsettingcrs:C}}_constructWCS201Url(e){const t={...this.ioConfig.customFetchParameters,...e},i=[];Object.keys(t).forEach((e=>{const n=t[e];null!=n&&("subset"===e?"string"==typeof n&&n.split("&subset=").forEach((e=>{e&&i.push(`subset=${encodeURIComponent(e)}`)})):i.push(`${e}=${encodeURIComponent(n)}`))}));return`${encodeURI(this.url)}?${i.join("&")}`}};e.__decorate([r.property({type:String,json:{write:!0}})],$.prototype,"datasetFormat",void 0),e.__decorate([r.property()],$.prototype,"tileType",void 0),e.__decorate([r.property({type:String,json:{write:!0}})],$.prototype,"version",void 0),e.__decorate([r.property({type:String,json:{write:!0}})],$.prototype,"coverageId",void 0),$=e.__decorate([l.subclass("esri.layers.support.rasterDatasets.WCSRaster")],$);return $}));
