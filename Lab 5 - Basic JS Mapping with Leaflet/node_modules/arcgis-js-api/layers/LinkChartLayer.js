/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../chunks/tslib.es6","../geometry","../core/Collection","../core/Error","../core/Logger","../core/promiseUtils","../core/accessorSupport/decorators/property","../core/has","../core/RandomLCG","../core/accessorSupport/decorators/subclass","../geohash/geohashUtils","./Layer","./graphics/featureConversionUtils","./graphics/OptimizedGeometry","./knowledgeGraph/KnowledgeGraphLayerDataManager","./knowledgeGraph/KnowledgeGraphSublayer","./knowledgeGraph/supportUtils","./mixins/BlendLayer","./mixins/ScaleRangeLayer","../libs/linkchartlayout/LinkChartLayout","../rest/knowledgeGraphService","../rest/knowledgeGraph/EntityType","../rest/knowledgeGraph/RelationshipType","../geometry/Extent","../geometry/Point","../geometry/Polyline"],(function(e,t,a,i,o,n,r,s,h,l,d,c,p,y,u,m,g,f,k,L,C,M,w,b,N,D){"use strict";const E=(e,t,a)=>(e.has(t)||e.set(t,a()),e.get(t));let T=class extends(f.BlendLayer(k.ScaleRangeLayer(c))){constructor(e){if(super(e),this.dataPreloadedInLocalCache=!1,this.defaultLinkChartConfig=null,this._currentLinkChartConfig={layoutMode:"RADIAL_TREE"},this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new a,this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map,this.linkChartExtent=new b({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7}),this.linkChartGeohashLookup=new Map,this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.sublayerIdsCache=new Map,this.tables=new a,this.type="link-chart",this._originalInclusionList=e.inclusionModeDefinition,e.dataPreloadedInLocalCache&&!e.inclusionModeDefinition)throw new i("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it")}normalizeCtorArgs(e){return{url:e.url,title:e.title,dataPreloadedInLocalCache:e.dataPreloadedInLocalCache,defaultLinkChartConfig:e.defaultLinkChartConfig}}_initializeLayerProperties(e){if(!this.title&&this.url){const e=this.url.split("/");this.title=e[e.length-2]}const t=new Set;let a=[],n=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new i("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this._graphTypeLookup.set(e.name,e)})),e.inclusionModeDefinition?.generateAllSublayers?(a=e.knowledgeGraph.dataModel.entityTypes??[],n=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach(((i,r)=>{if(!this._graphTypeLookup.get(r))return o.getLogger(this).warn(`A named type, ${r}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(r);this._graphTypeLookup.get(r)instanceof w||"strictOrigin"in this._graphTypeLookup.get(r)?t.has(r)||(t.add(r),n.push(this._graphTypeLookup.get(r))):this._graphTypeLookup.get(r)instanceof M||"properties"in this._graphTypeLookup.get(r)?t.has(r)||(t.add(r),a.push(this._graphTypeLookup.get(r))):(o.getLogger(this).warn(`A named type, ${r}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(r))})):(a=e.knowledgeGraph.dataModel.entityTypes??[],n=e.knowledgeGraph.dataModel.relationshipTypes??[]);const r=new u.KnowledgeGraphLayerDataManager({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=a,this.memberRelationshipTypes=n,this.dataManager=r}load(e){return this.addResolvingPromise(new Promise((t=>{C.fetchKnowledgeGraph(this.url).then((a=>{if(this._initializeLayerProperties({knowledgeGraph:a,inclusionModeDefinition:this._originalInclusionList}),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},this.dataManager.knowledgeGraph.dataModel.entityTypes?.forEach((e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})})),this.dataManager.knowledgeGraph.dataModel.relationshipTypes?.forEach((e=>{e.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(e.name,{useAllData:!0})}))),this.dataPreloadedInLocalCache)this.loadLayerAssumingLocalCache(),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach((e=>{e.useAllData=!1,e.members?.forEach((e=>{let t;t=e.linkChartLocation instanceof y?e.linkChartLocation:e.linkChartLocation?p.convertFromGeometry(e.linkChartLocation):null,t&&2===t.coords.length&&0===t.lengths.length?(this.linkChartGeohashLookup.set(e.id,d.encodeGeohash(t.coords[1],t.coords[0],u.geohashEncodingPrecision)),this.entityLinkChartDiagramLookup.set(e.id,t)):(this.linkChartGeohashLookup.set(e.id,""),this.relationshipLinkChartDiagramLookup.set(e.id,t))})),this.addResolvingPromise(this._initializeDiagram().then((async()=>{this.layers.forEach((async e=>{await e.refreshCachedQueryEngine()})),this.tables.forEach((async e=>{await e.refreshCachedQueryEngine()}))})))}));else{const t="GEOGRAPHIC"===this.defaultLinkChartConfig?.layoutMode;this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,t,!0).then((async()=>{n.throwIfAborted(e);const t=[],a=[];this.loadLayerAssumingLocalCache(),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1,this.dataManager.inclusionModeDefinition.namedTypeDefinitions.forEach((e=>{e.useAllData=!1}))),await this._initializeDiagram(),this.layers.forEach((e=>{a.push(e.refreshCachedQueryEngine()),t.push(new Promise((t=>{e.on("layerview-create",(()=>{t(null)}))})))})),this.tables.forEach((e=>{a.push(e.refreshCachedQueryEngine())})),await Promise.all(a)})))}t(null)}))}))),Promise.resolve(this)}async addRecords(e,t){let a=[];t?.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(a=await g.getRelationshipEndNodeIds(e,this.dataManager.knowledgeGraph));const i=e.concat(a).filter((e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)));await this._handleNewRecords(i)}async removeRecords(e,{cascadeRemoveRelationships:t=!0,recalculateLayout:a=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1}){let i=[];for(const n of e)!1===this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(n.typeName)?.useAllData&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(n.typeName)?.members?.has(n.id)&&i.push(n);if(t){const e=new Set,t=[];for(const a of i)if(this.dataManager.nodeConnectionsLookup.has(a.id))for(const t of this.dataManager.nodeConnectionsLookup.get(a.id))e.add(t);for(const a of e)if(this.dataManager.memberIdTypeLookup.has(a))for(const e of this.dataManager.memberIdTypeLookup.get(a))this.dataManager.relationshipTypeNames.has(e)&&t.push({id:a,typeName:e});i=i.concat(t)}this.dataManager.removeFromLayer(i);for(const n of i)this.sublayerIdsCache.get(n.typeName)?.delete(n.id),this.dataManager.relationshipTypeNames.has(n.typeName)?this.relationshipLinkChartDiagramLookup.delete(n.id):this.entityLinkChartDiagramLookup.delete(n.id);a&&await this.calculateLinkChartLayout(this._currentLinkChartConfig.layoutMode,{});const o=[];return this.layers.forEach((e=>{o.push(e.refreshCachedQueryEngine())})),await Promise.all(o),this._refreshNamedTypes(),i}async expand(e,t){const a=await this.dataManager.getConnectedRecordIds(e,t),i=a.filter((e=>!this.sublayerIdsCache.get(e.typeName)?.has(e.id)));return await this._handleNewRecords(a),{records:i}}loadLayerAssumingLocalCache(){this.memberRelationshipTypes.forEach((e=>{const t=new m({objectType:e,parentCompositeLayer:this,graphType:"relationship",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.memberEntityTypes.forEach((e=>{const t=new m({objectType:e,parentCompositeLayer:this,graphType:"entity",title:e.name});t.geometryType?this.layers.push(t):this.tables.push(t),this.dataManager.sublayerCaches.has(e.name)||this.dataManager.sublayerCaches.set(e.name,new Map)})),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{const a=E(this.sublayerIdsCache,t,(()=>new Set));e.members?.forEach((e=>{if(a.add(e.id),e.linkChartLocation)if(e.linkChartLocation instanceof y)this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(e.id,e.linkChartLocation):this.entityLinkChartDiagramLookup.set(e.id,e.linkChartLocation),2===e.linkChartLocation.coords.length&&0===e.linkChartLocation.lengths.length?this.linkChartGeohashLookup.set(e.id,d.encodeGeohash(e.linkChartLocation.coords[1],e.linkChartLocation.coords[0],u.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(e.id,"");else{const a=p.convertFromGeometry(e.linkChartLocation);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(e.id,e.linkChartLocation?a:null):this.entityLinkChartDiagramLookup.set(e.id,e.linkChartLocation?a:null),"x"in e.linkChartLocation&&"y"in e.linkChartLocation?this.linkChartGeohashLookup.set(e.id,d.encodeGeohash(e.linkChartLocation.x,e.linkChartLocation.y,u.geohashEncodingPrecision)):this.linkChartGeohashLookup.set(e.id,"")}}))}))}async calculateLinkChartLayout(e="RADIAL_TREE",t){const a=[],n=[],r=[];this.dataManager.sublayerCaches.forEach(((e,t)=>{this.dataManager.entityTypeNames.has(t)?e.forEach((e=>{a.push({typeName:t,feature:e})})):this.dataManager.relationshipTypeNames.has(t)&&e.forEach((e=>{n.push({typeName:t,feature:e})}))})),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map;const s=new Map,h=new Map,l=new Map,c=new Map,y=new Uint8Array(a.length),m=new Float64Array(a.length),g=new Float64Array(a.length),f=new Uint32Array(n.length),k=new Uint32Array(n.length),C=[],M="FORCE_DIRECTED",w=new b({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7});let E,T="FORCE_DIRECTED",x=0,G=0;switch(T="GEOGRAPHIC"===e?M:e,T){case"FORCE_DIRECTED":E=L.LCForceDirectedLayout.apply;break;case"COMMUNITY":E=L.LCCommunityLayout.apply;break;case"HIERARCHICAL":E=L.LCHierarchicalLayout.apply;break;case"RADIAL_TREE":E=L.LCRadialTreeLayout.apply;break;case"SMART_TREE":E=L.LCSmartTreeLayout.apply;break;default:E=L.LCSimpleLayout.apply}a.forEach((({typeName:a,feature:i})=>{if(t?.lockedNodeLocations?.has(i.attributes[u.mockOidFieldName])){"GEOGRAPHIC"===e&&this.dataManager.geographicLookup.has(a)?y[x]=L.NodeFlag.IsGeographic:y[x]=L.NodeFlag.None;const o=t.lockedNodeLocations.get(i.attributes[u.mockOidFieldName]);m[x]=o.x,g[x]=o.y}else if("GEOGRAPHIC"===e&&this.dataManager.geographicLookup.has(a)){y[x]=L.NodeFlag.IsGeographic;let e=null;const t=i.attributes[this.dataManager.geographicLookup.get(a).name],o=this.dataManager.geographicLookup.get(a)?.geometryType;switch(o){case"esriGeometryPoint":m[x]=t?.x,g[x]=t?.y;break;case"esriGeometryPolygon":e=t?.centroid,null!=e?.x&&null!=e?.y?(m[x]=e.x,g[x]=e.y):y[x]=L.NodeFlag.IsMovable;break;case"esriGeometryPolyline":case"esriGeometryMultipoint":e=t?.extent?.center,null!=e?.x&&null!=e?.y?(m[x]=e.x,g[x]=e.y):y[x]=L.NodeFlag.IsMovable;break;default:y[x]=L.NodeFlag.IsMovable}(null==m[x]||null==g[x]||Number.isNaN(m[x])||Number.isNaN(g[x]))&&(y[x]=L.NodeFlag.IsMovable,m[x]=0,g[x]=0)}else y[x]=L.NodeFlag.IsMovable,m[x]=0,g[x]=0;c.set(i.attributes[u.mockOidFieldName],x),C[x]={feature:i,typeName:a},x++}));let _=!1;const F=new Map;n.forEach((e=>{const t=e.feature.attributes[u.mockOriginIdFieldName],a=e.feature.attributes[u.mockDestinationIdFieldName],i=c.get(t),o=c.get(a);if(void 0!==i&&void 0!==o){const n=t+"-"+a,s=F.get(n),h=s?.has(e.typeName);h||(f[G]=i,k[G]=o,void 0===s?F.set(n,new Map([[e.typeName,G]])):s.set(e.typeName,G),G++),r.push(e)}else _=!0,this.relationshipLinkChartDiagramLookup.set(t,null),this.linkChartGeohashLookup.set(t,null)})),_&&o.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null"),await L.load();const{success:I,links:v}=E(y,m,g,f.subarray(0,G),k.subarray(0,G));if(!I)throw new i("knowledge-graph:layout-failed","Attempting to arrange the records in the specified layout failed");for(let i=0;i<C.length;i++){if(g[i]>84.9999?g[i]=84.9999:g[i]<-84.9999&&(g[i]=-84.9999),m[i]>179.9999?m[i]=179.9999:m[i]<-179.9999&&(m[i]=-179.9999),C[i].feature.attributes[u.mockLayoutGeometryFieldName]=new N(m[i],g[i]),s.has(C[i].typeName)){const e=s.get(C[i].typeName);e?.set(C[i].feature.attributes[u.mockOidFieldName],C[i].feature)}else{const e=new Map;e.set(C[i].feature.attributes[u.mockOidFieldName],C[i].feature),s.set(C[i].typeName,e)}l.set(C[i].feature.attributes[u.mockOidFieldName],C[i].feature);const e=p.convertFromGeometry(C[i].feature.attributes[u.mockLayoutGeometryFieldName]);this.entityLinkChartDiagramLookup.set(C[i].feature.attributes[u.mockOidFieldName],C[i].feature.attributes[u.mockLayoutGeometryFieldName]?e:null),this.linkChartGeohashLookup.set(C[i].feature.attributes[u.mockOidFieldName],d.encodeGeohash(C[i].feature.attributes[u.mockLayoutGeometryFieldName].y,C[i].feature.attributes[u.mockLayoutGeometryFieldName].x,u.geohashEncodingPrecision)),C[i].feature.attributes[u.mockLayoutGeometryFieldName].x<w.xmin&&(w.xmin=C[i].feature.attributes[u.mockLayoutGeometryFieldName].x),C[i].feature.attributes[u.mockLayoutGeometryFieldName].x>w.xmax&&(w.xmax=C[i].feature.attributes[u.mockLayoutGeometryFieldName].x),C[i].feature.attributes[u.mockLayoutGeometryFieldName].y<w.ymin&&(w.ymin=C[i].feature.attributes[u.mockLayoutGeometryFieldName].y),C[i].feature.attributes[u.mockLayoutGeometryFieldName].y>w.ymax&&(w.ymax=C[i].feature.attributes[u.mockLayoutGeometryFieldName].y)}if(this.linkChartExtent.xmin=w.xmin,this.linkChartExtent.xmax=w.xmax,this.linkChartExtent.ymin=w.ymin,this.linkChartExtent.ymax=w.ymax,!v)throw new i("knowledge-graph:layout-failed","Attempting to retrieve link geometry from diagram engine failed");const R=new Map,A=new Map,P=new Map,O=new Set;for(let i=0;i<r.length;i++){const e=[],t=r[i],a=t.feature.attributes[u.mockOriginIdFieldName],n=t.feature.attributes[u.mockDestinationIdFieldName],s=a+"-"+n,d=F.get(s).get(t.typeName),y=0===d?0:v?.vertexEndIndex[d-1];if(!O.has(d)){if(O.add(d),v.types[d]===L.LinkType.Recursive){const t=[v.vertices[2*y],v.vertices[2*y+1]],a=[v.vertices[2*(y+1)],v.vertices[2*(y+1)+1]],i=[.5*(t[0]+a[0]),.5*(t[1]+a[1])],o=[i[0]-t[0],i[1]-t[1]],n=[i[0]+o[1],i[1]-o[0]],r=[i[0]-o[1],i[1]+o[0]];e.push(t),e.push(n),e.push(a),e.push(r),e.push(t)}else{if(v.types[d]!==L.LinkType.Regular){o.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");continue}for(let t=y;t<v.vertexEndIndex[d];t++)e.push([v.vertices[2*t],v.vertices[2*t+1]])}const t=C[c.get(a)]?.feature.attributes[u.mockLayoutGeometryFieldName],i=C[c.get(n)]?.feature.attributes[u.mockLayoutGeometryFieldName];e[0][0]===t.x&&e[0][1]===t.y||(e[0]=[t.x,t.y]),e[e.length-1][0]===i.x&&e[e.length-1][1]===i.y||(e[e.length-1]=[i.x,i.y]);for(let a=1;a<e.length-1;a++)e[a][1]>85.5?e[a][1]=85.5:e[a][1]<-85.5&&(e[a][1]=-85.5),e[a][0]>179.9999?e[a][0]=179.9999:e[a][0]<-179.9999&&(e[a][0]=-179.9999);R.has(s)?R.get(s).push(e):R.set(s,[e])}const m=R.get(s);A.has(s)||(A.set(s,new Map),P.set(s,new Map));const g=A.get(s),f=P.get(s);g.has(t.typeName)||(g.set(t.typeName,m.shift()),f.set(t.typeName,0));const k=g.get(t.typeName);f.set(t.typeName,f.get(t.typeName)+1);const M=new D({paths:k});if(t.feature.attributes[u.mockLayoutGeometryFieldName]=M,h.has(t.typeName)){const e=h.get(t.typeName);e?.set(t.feature.attributes[u.mockOidFieldName],t.feature)}else{const e=new Map;e.set(t.feature.attributes[u.mockOidFieldName],t.feature),h.set(t.typeName,e)}l.set(t.feature.attributes[u.mockOidFieldName],t.feature);const w=p.convertFromGeometry(t.feature.attributes[u.mockLayoutGeometryFieldName]);this.relationshipLinkChartDiagramLookup.set(t.feature.attributes[u.mockOidFieldName],t.feature.attributes[u.mockLayoutGeometryFieldName]?w:null),this.linkChartGeohashLookup.set(t.feature.attributes[u.mockOidFieldName],"")}for(const i of r)i.feature.attributes[u.mockAggregationCountFieldName]=P.get(i.feature.attributes[u.mockOriginIdFieldName]+"-"+i.feature.attributes[u.mockDestinationIdFieldName])?.get(i.typeName)??null;return this._currentLinkChartConfig={layoutMode:e},{nodes:s,links:h,idMap:l}}async applyNewLinkChartLayout(e="RADIAL_TREE",t){const a=[];await this.calculateLinkChartLayout(e,t),this.layers.forEach((e=>{a.push(e.refreshCachedQueryEngine())})),await Promise.all(a),this._refreshNamedTypes()}getCurrentNodeLocations(){const e=new Map;return this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((t=>{t?.members?.forEach((t=>{const a=t.linkChartLocation;let i;const o=t.id;a&&(i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]},e.set(o,new N({x:i.x,y:i.y})))}))})),e}async synchronizeInclusionListWithCache(){return new Promise((e=>{this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(((e,t)=>{if(e.useAllData=!1,e.members&&e.members.size>0){if(!this.dataManager.sublayerCaches.get(t))return;const a=new Set(Array.from(this.dataManager.sublayerCaches.get(t).keys()));Array.from(e.members.keys()).filter((e=>!a.has(e))).forEach((t=>{e.members?.delete(t)}))}})),e()}))}async refreshLinkChartCache(e){await this.dataManager.refreshCacheContent(e);const t=[];this.layers.forEach((e=>{t.push(e.refreshCachedQueryEngine())})),await Promise.all(t),this._refreshNamedTypes()}async _handleNewRecords(e){const t=[];this.dataManager.addToLayer(e);for(const a of e)this.sublayerIdsCache.has(a.typeName)||(this.sublayerIdsCache.set(a.typeName,new Set),t.push(a.typeName)),this.sublayerIdsCache.get(a.typeName).add(a.id);for(const a of t)if(this._graphTypeLookup.has(a)){const e=this._graphTypeLookup.get(a),t="endPoints"in e?"relationship":"entity",i=new m({objectType:e,parentCompositeLayer:this,graphType:t,title:a});"entity"===t?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a),i.geometryType?this.layers.push(i):this.tables.push(i),this.dataManager.sublayerCaches.set(a,new Map)}await this.dataManager.refreshCacheContent(e.map((e=>e.id))),await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode)}async _initializeDiagram(){this.defaultLinkChartConfig?this.defaultLinkChartConfig.doNotRecalculateLayout?(this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach(((e,t)=>{e?.members?.forEach((e=>{const a=e.linkChartLocation;let i;const o=e.id;if(!a)return;i="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]};const n=p.convertFromGeometry(i);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(o,n):this.entityLinkChartDiagramLookup.set(o,n),this.linkChartGeohashLookup.set(o,d.encodeGeohash(i.x,i.y,u.geohashEncodingPrecision)),this.linkChartExtent.xmin>i.x&&(this.linkChartExtent.xmin=i.x),this.linkChartExtent.xmax<i.x&&(this.linkChartExtent.xmax=i.x),this.linkChartExtent.ymin>i.y&&(this.linkChartExtent.ymin=i.y),this.linkChartExtent.ymax<i.y&&(this.linkChartExtent.ymax=i.y)}))})),this.memberRelationshipTypes.forEach((e=>{e.name&&this.dataManager.sublayerCaches.get(e.name)?.forEach((e=>{const t=this.relationshipLinkChartDiagramLookup.get(e.attributes[u.mockOriginIdFieldName]),a=this.relationshipLinkChartDiagramLookup.get(e.attributes[u.mockDestinationIdFieldName]);if(t&&a){const i=p.convertFromGeometry(new D({paths:[[t.coords[0],t.coords[1]],[a.coords[0],a.coords[1]]]}));this.relationshipLinkChartDiagramLookup.set(e.attributes[u.mockOidFieldName],i)}else this.relationshipLinkChartDiagramLookup.set(e.attributes[u.mockOidFieldName],null);this.linkChartGeohashLookup.set(e.attributes[u.mockOidFieldName],"")}))}))):await this.calculateLinkChartLayout(this.defaultLinkChartConfig.layoutMode,{lockedNodeLocations:this.getCurrentNodeLocations()}):await this.calculateLinkChartLayout("RADIAL_TREE",{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}};e.__decorate([r.property()],T.prototype,"dataPreloadedInLocalCache",void 0),e.__decorate([r.property()],T.prototype,"defaultLinkChartConfig",void 0),e.__decorate([r.property()],T.prototype,"dataManager",void 0),e.__decorate([r.property()],T.prototype,"knowledgeGraph",void 0),e.__decorate([r.property()],T.prototype,"layers",void 0),e.__decorate([r.property()],T.prototype,"entityLinkChartDiagramLookup",void 0),e.__decorate([r.property()],T.prototype,"relationshipLinkChartDiagramLookup",void 0),e.__decorate([r.property()],T.prototype,"linkChartExtent",void 0),e.__decorate([r.property()],T.prototype,"linkChartGeohashLookup",void 0),e.__decorate([r.property()],T.prototype,"memberEntityTypes",void 0),e.__decorate([r.property()],T.prototype,"memberRelationshipTypes",void 0),e.__decorate([r.property()],T.prototype,"sublayerIdsCache",void 0),e.__decorate([r.property()],T.prototype,"tables",void 0),e.__decorate([r.property({json:{read:!1}})],T.prototype,"type",void 0),T=e.__decorate([l.subclass("esri.layers.LinkChartLayer")],T);return T}));
