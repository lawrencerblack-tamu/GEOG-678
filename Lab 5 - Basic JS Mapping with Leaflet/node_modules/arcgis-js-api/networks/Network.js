/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["require","../chunks/tslib.es6","../geometry","../Graphic","../request","../core/Error","../core/Loadable","../core/Logger","../core/MultiOriginJSONSupport","../core/promiseUtils","../core/urlUtils","../core/accessorSupport/decorators/property","../core/has","../core/RandomLCG","../core/accessorSupport/decorators/subclass","../geometry/Extent","../geometry/support/jsonUtils","../layers/mixins/EditBusLayer","../layers/support/arcgisLayerUrl","./support/TopologyValidationJobInfo","./support/utils","../versionManagement/support/versionManagementUtils","../geometry/SpatialReference"],(function(e,t,r,o,a,s,i,n,l,d,p,u,c,y,h,m,g,f,v,w,_,S,b){"use strict";const E=e=>Object.freeze(Object.defineProperty({__proto__:null,default:e},Symbol.toStringTag,{value:"Module"}));let U=class extends(l.MultiOriginJSONMixin(i)){static fromPortalItem(e){return _.networkFromPortalItem(e)}constructor(e){super(e),this.id=null,this.title=null,this.layerUrl=null,this.dataElement=null,this.fullExtent=null,this.spatialReference=null,this.type=null,this.sourceJSON=null,this.gdbVersion=null,this.historicMoment=null,this._applyEditsHandler=e=>{const{serviceUrl:t,gdbVersion:r,result:o}=e,a=t===this.featureServiceUrl,s=f.versionMatches(t,r,this.gdbVersion);a&&s&&o.then((e=>{S.isVersionInEditSession(t,r)&&(this.historicMoment=e.historicMoment)}))},this._updateMomentHandler=e=>{const{serviceUrl:t,gdbVersion:r,moment:o}=e,a=t===this.featureServiceUrl,s=f.versionMatches(t,r,this.gdbVersion);a&&s&&(this.historicMoment=o)},this.when().then((()=>{this.addHandles([f.onApplyEditsEvent(this._applyEditsHandler),f.onUpdateMomentEvent(this._updateMomentHandler)])}),(()=>{}))}initialize(){this.when().catch((e=>{d.isAbortError(e)||n.getLogger(this).error("#load()",`Failed to load layer (title: '${this.title??"no title"}', id: '${this.id??"no id"}')`,{error:e})}))}get datasetName(){return this.dataElement?.name??null}get owner(){return this.dataElement?.userIdentity??null}get schemaGeneration(){return this.dataElement?.schemaGeneration??null}get parsedUrl(){return p.urlToObject(this.layerUrl)}get featureServiceUrl(){return v.parse(this.parsedUrl.path).url.path}get networkServiceUrl(){return this.featureServiceUrl.replace(/\/FeatureServer/i,"/UtilityNetworkServer")}get layerId(){return v.parse(this.parsedUrl.path).sublayer}get networkSystemLayers(){return null}async load(e){return this.addResolvingPromise(this._fetchDataElement(this.featureServiceUrl,this.layerId.toString(),e)),this.addResolvingPromise(this._fetchLayerMetaData(this.layerUrl,e)),this}getLayerIdBySourceId(e){if(this.dataElement){const t=this.dataElement.domainNetworks;for(const r of t){for(const t of r.edgeSources??[])if(t.sourceId===e)return t.layerId;for(const t of r.junctionSources??[])if(t.sourceId===e)return t.layerId}return null}return null}async queryNamedTraceConfigurations(t,r){const[{queryNamedTraceConfigurations:o},{default:a}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/queryNamedTraceConfigurations"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/QueryNamedTraceConfigurationsParameters"],(e=>t(E(e))),r)))]),s=this.networkServiceUrl,i=a.from(t);return(await o(s,i,{...r}))?.namedTraceConfigurations}async validateTopology(t,r){if(!t.validateArea)throw new s("network:undefined-validateArea","the network must have validateArea defined in the validate network topology parameters.");const[{validateNetworkTopology:o},{default:a}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/validateNetworkTopology"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/ValidateNetworkTopologyParameters"],(e=>t(E(e))),r)))]),i=a.from(t);S.isVersionInEditSession(this.featureServiceUrl,this.gdbVersion||null)?i.sessionID=S.currentSessionId:i.sessionID=null,i.gdbVersion=this.gdbVersion;const n=this.networkServiceUrl,l=this.featureServiceUrl,d=f.emitApplyEditsEvent(l,null,this.gdbVersion,!0),p=await o(n,i,{...r});if(p?.serviceEdits){const e=[];for(const t of p.serviceEdits){const{editedFeatures:r}=t,o=r?.spatialReference?new b(r.spatialReference):null;e.push({layerId:t.layerId,editedFeatures:{adds:r?.adds?.map((e=>this._createEditedFeature(e,o)))||[],updates:r?.updates?.map((e=>({original:this._createEditedFeature(e[0],o),current:this._createEditedFeature(e[1],o)})))||[],deletes:r?.deletes?.map((e=>this._createEditedFeature(e,o)))||[],spatialReference:o}})}d.resolve({edits:null,addedFeatures:[],updatedFeatures:[],deletedFeatures:[],addedAttachments:[],updatedAttachments:[],deletedAttachments:[],editedFeatures:e,exceededTransferLimit:!1,historicMoment:p.moment})}return p}async submitTopologyValidationJob(t,r){let o=null;if(!t.validateArea)throw new s("network:undefined-validateArea","the network must have validateArea defined in the validate network topology parameters.");if(!this.gdbVersion){const e=this.layerUrl.replace(/\/FeatureServer/i,"/VersionManagementServer").replace(/\/\d*$/,"");o=(await a(e,{responseType:"json",query:{f:"json"}})).data.defaultVersionName}const[{submitValidateNetworkTopologyJob:i},{default:n}]=await Promise.all([new Promise(((t,r)=>e(["../rest/networks/validateNetworkTopology"],t,r))),new Promise(((t,r)=>e(["../rest/networks/support/ValidateNetworkTopologyParameters"],(e=>t(E(e))),r)))]),l=n.from(t);S.isVersionInEditSession(this.featureServiceUrl,this.gdbVersion||null)?l.sessionID=S.currentSessionId:l.sessionID=null,l.gdbVersion=this.gdbVersion||o;const d=this.networkServiceUrl,p=this.featureServiceUrl?f.emitApplyEditsEvent(this.featureServiceUrl,null,this.gdbVersion,!0):void 0,u=await i(d,l,{...r});return new w({statusUrl:u,editsResolver:p})}_createEditedFeature(e,t){return new o({attributes:e.attributes,geometry:g.fromJSON({...e.geometry,spatialReference:t})})}async _fetchLayerMetaData(e,t){const r=await a(e,{responseType:"json",query:{f:"json"},...t});this.sourceJSON=r.data,this.read(r.data,{origin:"service"})}async _fetchDataElement(e,t,r){if(this.dataElement)return;const o=await a(`${e}/queryDataElements`,{responseType:"json",query:{layers:JSON.stringify([t]),f:"json"},...r}).then((e=>e.data.layerDataElements?.[0]));o&&this.read(o,{origin:"service"})}};t.__decorate([u.property({type:String,nonNullable:!0,json:{origins:{"web-map":{read:!0,write:{isRequired:!0}},service:{read:!0}},read:!1}})],U.prototype,"id",void 0),t.__decorate([u.property({type:String,nonNullable:!0,json:{origins:{"web-map":{read:!0,write:{isRequired:!0}},service:{read:{source:"name"}}},read:!1}})],U.prototype,"title",void 0),t.__decorate([u.property({type:String,nonNullable:!0,json:{origins:{"web-map":{read:{source:"url"},write:{target:"url",isRequired:!0}}},read:!1}})],U.prototype,"layerUrl",void 0),t.__decorate([u.property({type:Object,json:{origins:{service:{read:!0}},read:!1}})],U.prototype,"dataElement",void 0),t.__decorate([u.property({type:m,json:{origins:{service:{read:{source:"extent"}}},read:!1}})],U.prototype,"fullExtent",void 0),t.__decorate([u.property({type:b,json:{origins:{service:{read:{source:"extent.spatialReference"}}},read:!1}})],U.prototype,"spatialReference",void 0),t.__decorate([u.property({type:["utility","trace"],readOnly:!0,json:{read:!1,write:!1}})],U.prototype,"type",void 0),t.__decorate([u.property({readOnly:!0})],U.prototype,"datasetName",null),t.__decorate([u.property({readOnly:!0})],U.prototype,"owner",null),t.__decorate([u.property({readOnly:!0})],U.prototype,"schemaGeneration",null),t.__decorate([u.property({readOnly:!0})],U.prototype,"parsedUrl",null),t.__decorate([u.property({readOnly:!0})],U.prototype,"featureServiceUrl",null),t.__decorate([u.property({readOnly:!0})],U.prototype,"networkServiceUrl",null),t.__decorate([u.property({readOnly:!0})],U.prototype,"layerId",null),t.__decorate([u.property()],U.prototype,"sourceJSON",void 0),t.__decorate([u.property({readOnly:!0})],U.prototype,"networkSystemLayers",null),t.__decorate([u.property()],U.prototype,"gdbVersion",void 0),t.__decorate([u.property({type:Date})],U.prototype,"historicMoment",void 0),U=t.__decorate([h.subclass("esri.networks.Network")],U);return U}));
