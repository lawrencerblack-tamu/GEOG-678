/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../core/arrayUtils","../../../core/Error","../../../core/promiseUtils","../../../core/Logger","../../../core/has","../../../core/accessorSupport/decorators/subclass","../../../layers/support/fieldType","../../../layers/support/fieldUtils","../../statistics/support/predominanceUtils","../../statistics/support/statsWorker","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./support/utils"],(function(e,t,a,i,r,s,n,o,l,u,m,g,d,p,y,c){"use strict";let f=class extends y{constructor(){super(...arguments),this.adapterName="feature-layer-binning-adapter"}async _getNormalizationTotalFromMemory(e,t,i){const{featuresJSON:r,graphics:s,layerView:n,query:o}=t,l=(!r&&!s&&n&&"queryAggregateSummaryStatistics"in n?await n.queryAggregateSummaryStatistics(o,{field:e},{signal:i}):r?await this.workerClient.summaryStatistics({field:e},r):await m.summaryStatistics({attribute:{field:e},features:s})).sum;if(null==l)throw new a(`${this.adapterName}:invalid`,"invalid normalizationTotal");return l}async _processStatsFromMemoryParams(e){const{features:t,filter:i}=e;if(t?.length)return this._getFilteredFeatures(t,i);const{view:r,field:s,field2:n,field3:o,normalizationField:l,valueExpression:u,returnGeometry:m,layerViewFunc:g,signal:d}=e;let y=null,f=null,h=null,w=null,F=null;if(r)try{if(y=await r.whenLayerView(this.layer),f=null!=g&&g in y&&"function"==typeof y[g],f){await this._waitForLayerViewUpdate(y);const e=await p.getFieldsList({field:s,field2:n,field3:o,normalizationField:l,valueExpression:u});c.getMissingFieldsForBinning(this,e).length?f=!1:(h="createAggregateQuery"in y?y.createAggregateQuery():null,h?(h.outFields=e,h.returnGeometry=!1,c.updateQueryWithFeatureFilter(h,i)):f=!1),y.suspended&&(f=!1)}}catch{f=!1}if(!f&&(F=c.getFeatureReductionFields(this.layer).map((e=>e.toJSON())),w=await this._fetchFeaturesForStats({field:s,field2:n,field3:o,valueExpression:u,normalizationField:l,returnGeometry:m,filter:i,view:r,signal:d},"json"),!w?.length))throw new a(`${this.adapterName}:insufficient-data`,"No features are available to calculate statistics");return{layerView:y,query:h,featuresJSON:w,fieldInfos:F}}async _summaryStatsFromMemory(e,t){const{view:a,field:i,valueExpression:r,normalizationType:s,signal:n}=e,l={field:i,valueExpression:r,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:u,graphics:g,layerView:d,query:p,fieldInfos:y}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateSummaryStatistics"});return r&&a&&(u||g)&&(l.fieldType=t?.type?o.kebabDict.toJSON(t.type):null,l.viewInfoParams=c.getViewInfoParams(a),l.timeZone=a.timeZone,l.fieldInfos=y),"percent-of-total"===s&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotalFromMemory(i,{featuresJSON:u,graphics:g,layerView:d,query:p},n)),!u&&!g&&d&&"queryAggregateSummaryStatistics"in d?d.queryAggregateSummaryStatistics(p,l,{signal:n}):u?this.workerClient.summaryStatistics(l,u):m.summaryStatistics({attribute:l,features:g})}async _uvFromMemory(e,t){const{view:a,field:i,valueExpression:r,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:g,fieldInfos:d}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateUniqueValues"}),y={field:i,field2:e.field2,field3:e.field3,fieldDelimiter:p.fieldDelimiter,valueExpression:r,domains:t,returnAllCodedValues:s};return r&&a&&(o||l)&&(y.viewInfoParams=c.getViewInfoParams(a),y.timeZone=a.timeZone,y.fieldInfos=d),!o&&!l&&u&&"queryAggregateUniqueValues"in u?u.queryAggregateUniqueValues(g,y,{signal:n}):o?this.workerClient.uniqueValues(y,o):m.uniqueValues({attribute:y,features:l})}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:i,signal:r}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateHistogram"}),g={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return i&&t&&(s||n)&&(g.viewInfoParams=c.getViewInfoParams(t),g.timeZone=t.timeZone,g.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(g.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},r)),!s&&!n&&o&&"queryAggregateHistogram"in o?o.queryAggregateHistogram(l,g,{signal:r}):s?this.workerClient.histogram(g,s):m.histogram({attribute:g,features:n})}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:i,signal:r}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateClassBreaks"}),g={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return i&&t&&(s||n)&&(g.viewInfoParams=c.getViewInfoParams(t),g.timeZone=t.timeZone,g.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(g.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},r)),!s&&!n&&o&&"queryAggregateClassBreaks"in o?o.queryAggregateClassBreaks(l,g,{signal:r}):s?this.workerClient.classBreaks(g,s):m.classBreaks({attribute:g,features:n})}getField(e=""){const t=c.getFeatureReductionFields(this.layer);return t?.find((t=>t.name.toLowerCase()===e?.toLowerCase()))}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!1,supportsStatistics:!0}:null}getFieldDomain(e,t){return null}async summaryStatistics(e){const{field:t}=e,i=t?this.getField(t):null,r=p.isAnyDateField(i)||l.isTimeOnlyField(i),s=e.sqlExpression&&!e.valueExpression&&!t;if(r||s)throw new a(`${this.adapterName}:not-supported`,"Date field and sqlExpression are not supported");return this._summaryStatsFromMemory(e,i)}async uniqueValues(e){const t=await c.getDomainsForFields(e,this);return this._uvFromMemory(e,t)}async histogram(e){const{field:t}=e,i=t?this.getField(t):null,r=p.isAnyDateField(i)||l.isTimeOnlyField(i),s=e.sqlExpression&&!e.valueExpression&&!t;if(r||s)throw new a(`${this.adapterName}:not-supported`,"Date field and sqlExpression are not supported");return this._histogramFromMemory(e)}async classBreaks(e){return(!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)).catch((()=>(i.throwIfAborted(e.signal),this._classBreaksFromMemory(e))))}async queryFeatureCount(e){const t=await(e.view?.whenLayerView(this.layer));if(!t||!("queryAggregateCount"in t)||!t.queryAggregateCount)throw new a(`${this.adapterName}:not-supported`,"LayerView is not supported.");await this._waitForLayerViewUpdate(t);const i=t.createAggregateQuery();return i.where=g.mergeWhereClauses(i.where,e.whereClause),c.updateQueryWithFeatureFilter(i,e.filter),t.queryAggregateCount(i,{signal:e.signal})}generateRenderer(e,t){throw new a(`${this.adapterName}:not-supported`,"'generateRenderer' is not supported.")}heatmapStatistics(e){throw new a(`${this.adapterName}:not-supported`,"'heatmapStatistics' is not supported.")}async predominantCategories(e){const{fields:t,view:a,signal:i}=e,r=u.getArcadeForPredominantCategory(t),s=await this._uvFromMemory({valueExpression:r,view:a,signal:i});return c.getPredominantCategoriesFromUVInfos(s.uniqueValueInfos,t)}async getSampleFeatures(e,i){const{view:r,sampleSize:s,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e;if(!r)throw new a(`${this.adapterName}:not-supported`,"'view' is required to get sample features for binning.");if("3d"===r.type)throw new a(`${this.adapterName}:not-supported`,"3d 'view' is not supported to get sample features for binning.");const m=await r.whenLayerView(this.layer);if(!("queryAggregateJSON"in m&&m.queryAggregateJSON&&"queryAggregates"in m&&m.queryAggregates))throw new a(`${this.adapterName}:not-supported`,"LayerView is not supported.");await this._waitForLayerViewUpdate(m);if(c.getMissingFieldsForBinning(this,n).length)throw new a(`${this.adapterName}:insufficient-data`,"Layer does not have required fields");const g=1,d="json"===i,p=m.createAggregateQuery();p.outSpatialReference=r?.spatialReference,p.returnGeometry=!!o,p.outFields=n,c.updateQueryWithFeatureFilter(p,l);const{features:y}=d?await m.queryAggregateJSON(p,{signal:u}):await m.queryAggregates(p,{signal:u});return y.length&&null!=s&&s>0&&s<=y.length?t.pickRandom(y,s,g):y}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType="polygon",this.objectIdField=null,this.supportsSQLExpression=!1,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent;const i="featureReduction"in t?t.featureReduction:null;if("binning"!==i?.type&&"cluster"!==i?.type)throw new a(`${this.adapterName}:invalid-parameters`,`Feature reduction type ${i?.type} is not supported`);this.workerClient=d.WorkerClient.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};f=e.__decorate([n.subclass("esri.smartMapping.support.adapters.FeatureLayerBinningAdapter")],f);return f}));
