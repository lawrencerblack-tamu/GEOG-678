/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.29/esri/copyright.txt for details.
*/
define(["../../../chunks/tslib.es6","../../../core/Error","../../../core/Logger","../../../core/has","../../../core/RandomLCG","../../../core/accessorSupport/decorators/subclass","../../../rest/support/generateRendererUtils","../../statistics/support/utils","../../statistics/support/WorkerClient","../utils","./FeatureLayerAdapter","./support/utils"],(function(e,t,r,a,s,i,n,l,o,u,c,d){"use strict";let p=class extends c{constructor(){super(...arguments),this.adapterName="csv-layer-adapter"}async _createGenerateRendererResult(e,r,a,s,i){const o=e?.features,u=o?.length;if(!u)throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const c=d.ensureFeaturesJSON(o);let p=null;if("percent-of-total"===s){if(p=(await this.workerClient.summaryStatistics({field:r},c)).sum,null==p)throw new t("csv-layer-adapter:invalid","invalid normalizationTotal")}if("class-breaks-definition"===i?.type){const e=(await l.getDataValues({field:r,normalizationType:s,normalizationField:a,normalizationTotal:p},c)).filter((e=>Number.isFinite(e)));return n.createGenerateRendererClassBreaks({definition:i,values:e,normalizationTotal:p})}const h=(await l.getDataValues({field:r},c)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return n.createGenerateRendererUniqueValues(h)}generateRenderer(e,t){const r=e.classificationDefinition;let a=null,s=null,i=null;"class-breaks-definition"===r?.type?(a=r.classificationField,s=r.normalizationField,i=r.normalizationType):a=r?.attributeField;const n=this.layer;return u.getFieldsList({field:a,normalizationField:s}).then((o=>{const u=n.createQuery();return u.returnGeometry=!1,u.outFields=o,u.where=l.mergeWhereClauses(u.where,e.where),n.queryFeatures(u,{signal:t}).then((e=>this._createGenerateRendererResult(e,a,s,i,r)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=o.WorkerClient.getInstance(),await this.workerClient.open(e.signal)}));return this.addResolvingPromise(t),Promise.resolve(this)}};p=e.__decorate([i.subclass("esri.smartMapping.support.adapters.CSVLayerAdapter")],p);return p}));
